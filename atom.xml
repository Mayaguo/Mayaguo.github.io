<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GMaya</title>
  
  <subtitle>生命不止，奋斗不息。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gmaya.top/"/>
  <updated>2020-03-16T07:21:10.770Z</updated>
  <id>https://gmaya.top/</id>
  
  <author>
    <name>GMaya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud Eureka服务通信Ribbon/Feign（三）</title>
    <link href="https://gmaya.top/20200316-2/"/>
    <id>https://gmaya.top/20200316-2/</id>
    <published>2020-03-16T14:12:12.000Z</published>
    <updated>2020-03-16T07:21:10.770Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/16/PlutoCrescent_ZH-CN3538488331_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>每一个客户端就是一个完整的项目，是一个模块，假如我有订单模块，支付模块，用户模块，等等，那么我这些模块之间怎么相互调用呢？采用HttpClient工具类访问？</p><h2 id="Ribbon-和-Feign-简介"><a href="#Ribbon-和-Feign-简介" class="headerlink" title="Ribbon 和 Feign 简介"></a>Ribbon 和 Feign 简介</h2><h3 id="Ribbon-简介"><a href="#Ribbon-简介" class="headerlink" title="Ribbon 简介"></a>Ribbon 简介</h3><blockquote><p>Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将Netflix的中间层服务连接在一起。Ribbon 客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出 Load Balancer 后面所有的机器，Ribbon 会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们也很容易使用Ribbon实现自定义的负载均衡算法。简单地说，Ribbon 是一个客户端负载均衡器。</p></blockquote><h3 id="Feign-简介"><a href="#Feign-简介" class="headerlink" title="Feign 简介"></a>Feign 简介</h3><blockquote><p>Feign 是一个声明式的 web service 客户端，它使得编写 web service 客户端更为容易。创建接口，为接口添加注解，即可使用Feign。Feign可以使用Feign注解或者JAX-RS注解，还支持热插拔的编码器和解码器。Spring Cloud 为Feign添加了Spring MVC的注解支持，并整合了Ribbon和Eureka来为使用 Feign 时提供负载均衡。</p></blockquote><h2 id="创建支付模块（客户端）"><a href="#创建支付模块（客户端）" class="headerlink" title="创建支付模块（客户端）"></a>创建支付模块（客户端）</h2><p>起名pay项目，也可以去spring官网 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a>按照之前的办法创建<br>再介绍一个方法，直接在idea中创建<br><img data-src="https://img-blog.csdnimg.cn/20200316104221227.png" alt=""><br>下一步<br><img data-src="https://img-blog.csdnimg.cn/20200316104311198.png" alt=""><br>填写组织和项目名称<br><img data-src="https://img-blog.csdnimg.cn/20200316104405772.png" alt=""><br>搜索添加<br><img data-src="https://img-blog.csdnimg.cn/20200316104620686.png" alt=""><br>下一步<br><img data-src="https://img-blog.csdnimg.cn/20200316104718476.png" alt=""><br>完成<br>然后按照客户端的修改操作进行修改<br>修改application.yml<br>因为是小demo，所以就不使用集群了，电脑有点卡。真实情况每个服务端和客户端有可能都不在一个服务器上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: pay</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8081</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      #注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔</span><br><span class="line">      #defaultZone: http://server01:8761/eureka/,http://server02:8762/eureka/</span><br><span class="line">      defaultZone: http:<span class="comment">//server01:8761/eureka/</span></span><br></pre></td></tr></table></figure><p>修改启动项<br>添加注解@EnableDiscoveryClient<br>添加一个正常情况下的最简洁支付接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  支付接口</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/3/16 10:53</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getPay"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPay</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 返回支付信息</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"this pay！！！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建订单模块（客户端）"><a href="#创建订单模块（客户端）" class="headerlink" title="创建订单模块（客户端）"></a>创建订单模块（客户端）</h2><p>跟上面支付模块一模一样的操作。。。<br>注意：<br><img data-src="https://img-blog.csdnimg.cn/20200316110022486.png" alt=""><br>创建订单最简洁订单的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  订单接口</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/3/16 11:03</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getOrder"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 返回订单信息</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"this order！！！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>此时两个正常的项目已经创建完毕，那么我订单模块怎么去调用支付模块呢？</strong></p><h2 id="方式一：RestTemplate调用"><a href="#方式一：RestTemplate调用" class="headerlink" title="方式一：RestTemplate调用"></a>方式一：RestTemplate调用</h2><p>修改订单模块接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getOrder"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">       RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">       String forObject = restTemplate.getForObject(<span class="string">"http://localhost:8081/getPay"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="keyword">return</span> forObject;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>启动服务端，启动支付端，启动订单端<br>调用支付接口<br><img data-src="https://img-blog.csdnimg.cn/20200316111440912.png" alt=""><br>调用订单接口<br><img data-src="https://img-blog.csdnimg.cn/20200316111506428.png" alt=""><br>可以看出调用成功，但是缺点也很明显，必须要知道对方的url地址，对于多个实例那就难受了，所以是不可取的。</p><h2 id="方式二：通过-LoadBalanced"><a href="#方式二：通过-LoadBalanced" class="headerlink" title="方式二：通过 @LoadBalanced"></a>方式二：通过 @LoadBalanced</h2><p>添加RestTemplateConfig配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  RestTemplate配置类</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/3/16 11:24</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200316112723276.png" alt=""><br>修改订单接口<br>此时只需要填写调用的项目名就好了，跟ip无关。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  订单接口接口</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/3/16 11:03</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getOrder"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String forObject = restTemplate.getForObject(<span class="string">"http://PAY/getPay"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> forObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启订单项目查看</p><p><img data-src="https://img-blog.csdnimg.cn/20200316134202712.png" alt=""><br><strong>@LoadBalanced 源码</strong><br>注解源码注释中说，用来标记restTemplate使之配置使用LoadBalancerClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation to mark a RestTemplate or WebClient bean to be configured to use a</span></span><br><span class="line"><span class="comment"> * LoadBalancerClient.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD &#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LoadBalanced &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoadBalancerClient则表示客户端负载均衡器。<br><img data-src="https://img-blog.csdnimg.cn/20200316135308761.png" alt=""><br>所以使用@LoadBalanced就代表使用ribbon实现客户端的负载均衡<br>负载均衡的策略默认使用的是轮询算法</p><blockquote><p>负载均衡是在同一个功能的微服务中根据不同的策略选择不同的微服务，因此这些微服务对外暴露的实例名称要相同（spring.application.name）<br>ribbon是一个客户端的负载均衡，必须要连接eureka，才能在指定的微服务实例中按照策略选择</p></blockquote><p>假设支付模块（pay）部署在两台或者多台服务器，只有端口号不一样，其他的都一样，那么我订单模块按照轮询算法去调用支付模块。</p><h2 id="方式三：通过-Feign"><a href="#方式三：通过-Feign" class="headerlink" title="方式三：通过 Feign"></a>方式三：通过 Feign</h2><p>第一步：添加Feign依赖<br>打开订单模块pom文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>第二步：修改订单模块启动类OrderApplication<br>添加注解@EnableFeignClients<br><img data-src="https://img-blog.csdnimg.cn/20200316142558747.png" alt=""><br>第三步：声明需要调用的接口<br>创建PayClient接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  支付接口声明</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/3/16 14:28</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"pay"</span>) <span class="comment">// 服务名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PayClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getPay"</span>) <span class="comment">//  这里要和pay提供的接口一致</span></span><br><span class="line">    <span class="function">String <span class="title">getPay</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200316143337289.png" alt=""><br>修改OrderController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  订单接口接口</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/3/16 11:03</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PayClient payClient; <span class="comment">// 注入支付模块服务</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getOrder"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String pay = payClient.getPay();</span><br><span class="line">        <span class="keyword">return</span> pay;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启订单模块项目，一切正常！</p><p>只有先入门，才能追查源码以及骚操作！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;http://s1.wailian.download/2020/03/16/PlutoCrescent_ZH-CN3538488331_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://gmaya.top/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://gmaya.top/tags/SpringCloud/"/>
    
      <category term="Eureka" scheme="https://gmaya.top/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Eureka高可用的服务注册中心（二）</title>
    <link href="https://gmaya.top/20200316/"/>
    <id>https://gmaya.top/20200316/</id>
    <published>2020-03-16T04:52:12.000Z</published>
    <updated>2020-03-16T07:15:59.170Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/16/YukonGames_ZH-CN0135612170_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="集群原理图"><a href="#集群原理图" class="headerlink" title="集群原理图"></a>集群原理图</h2><p>如果只有一个注册中心（服务端），一旦挂掉，就直接GG，在分布式系统中，任何地方存在单点故障，整个系统就不是高可用的。（自己手画的难看见谅）</p><p><img data-src="https://img-blog.csdnimg.cn/20200315221636385.png" alt=""></p><h2 id="创建服务端2"><a href="#创建服务端2" class="headerlink" title="创建服务端2"></a>创建服务端2</h2><p>在上一篇文章中写了最简单的单服务端，单客户端的例子。所以，在上一篇的基础上，继续新建一个服务端，起名字叫做服务端2<br>登录spring官网 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a><br><img data-src="https://img-blog.csdnimg.cn/20200315222938981.png" alt=""><br>保存到本地之后，导入项目<br><img data-src="https://img-blog.csdnimg.cn/20200315223158658.png" alt=""><br>服务器2（EurekaServerTwo）启动类添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200315224555469.png" alt=""><br>修改EurekaServerTwo配置文件application.yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8762</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      # #注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔</span><br><span class="line">      # 向端口8761注册(两个服务端互相注册)</span><br><span class="line">      defaultZone: http:<span class="comment">//server01:8761/eureka/</span></span><br><span class="line">    # 指示此实例是否应将其信息注册到eureka服务器以供其他服务发现，默认为false</span><br><span class="line">    register-with-eureka: <span class="keyword">false</span></span><br><span class="line">  instance:</span><br><span class="line">    # 该服务实例所在主机名</span><br><span class="line">    hostname: server02</span><br><span class="line">  server:</span><br><span class="line">    # 启用自我保护机制，默认为true</span><br><span class="line">    enable-self-preservation: <span class="keyword">false</span></span><br><span class="line">spring:</span><br><span class="line">  profiles: server02</span><br></pre></td></tr></table></figure><h2 id="修改服务器1EurekaServer"><a href="#修改服务器1EurekaServer" class="headerlink" title="修改服务器1EurekaServer"></a>修改服务器1EurekaServer</h2><p>修改EurekaServer项目的配置文件application.yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8761</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      # 注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔</span><br><span class="line">      # 向端口8762注册(两个服务端互相注册)</span><br><span class="line">      defaultZone: http:<span class="comment">//server02:8762/eureka/</span></span><br><span class="line">    # 指示此实例是否应将其信息注册到eureka服务器以供其他服务发现，默认为false</span><br><span class="line">    register-with-eureka: <span class="keyword">false</span></span><br><span class="line">  instance:</span><br><span class="line">    # 该服务实例所在主机名</span><br><span class="line">    hostname: server01</span><br><span class="line">  server:</span><br><span class="line">    # 启用自我保护机制，默认为true</span><br><span class="line">    enable-self-preservation: <span class="keyword">false</span></span><br><span class="line">spring:</span><br><span class="line">  profiles: server01</span><br></pre></td></tr></table></figure><h2 id="修改电脑hosts文件"><a href="#修改电脑hosts文件" class="headerlink" title="修改电脑hosts文件"></a>修改电脑hosts文件</h2><p>修改host文件添加对application.yml配置文件中hostname的映射<br>打开电脑C:\Windows\System32\drivers\etc<br>找到hosts，在文件最后输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>    server01</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>    server02</span><br></pre></td></tr></table></figure><p>注意使用管理员权限，不然没办法保存</p><h2 id="启动查看效果"><a href="#启动查看效果" class="headerlink" title="启动查看效果"></a>启动查看效果</h2><p>修改启动配置项<br><img data-src="https://img-blog.csdnimg.cn/20200315230830125.png" alt=""><br><strong>在服务器1配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dspring.profiles.active=server01</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200315230914439.png" alt=""><br><strong>在服务器2配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dspring.profiles.active=server02</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200315231015288.png" alt=""><br>启动服务器1，启动服务器2，启动客户端<br>如果在启动中报错，先则是因为服务器1向服务器2注册没有连接上，等你服务器2启动完毕就不会报错了。<br>最终在浏览器查看效果<br><strong><a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a></strong><br><img data-src="https://img-blog.csdnimg.cn/2020031523152013.png" alt=""><br><strong><a href="http://localhost:8762/" target="_blank" rel="noopener">http://localhost:8762/</a></strong><br><img data-src="https://img-blog.csdnimg.cn/20200315231601974.png" alt=""></p><h2 id="停止服务器1"><a href="#停止服务器1" class="headerlink" title="停止服务器1"></a>停止服务器1</h2><p>此时检验效果，停止服务器1，即端口号为：8761的服务器<br><img data-src="https://img-blog.csdnimg.cn/20200315231759209.png" alt=""><br>稍微等待一会，因为有默认的失效时间。<br>查看<a href="http://localhost:8762" target="_blank" rel="noopener">http://localhost:8762</a><br>此时客户端已经消失，<br><img data-src="https://img-blog.csdnimg.cn/2020031523232598.png" alt=""><br>这是因为客户端没有配置服务器2的注册。</p><h2 id="修改客户端"><a href="#修改客户端" class="headerlink" title="修改客户端"></a>修改客户端</h2><p>修改EurekaClient项目的配置文件application.yml<br>将两个注册中心全部配置上去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-client</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8711</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      #注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔</span><br><span class="line">      defaultZone: http:<span class="comment">//server01:8761/eureka/,http://server02:8762/eureka/</span></span><br></pre></td></tr></table></figure><p>将server02注册进来，重新启动服务端1，服务端2，客户端，再次演示上面断掉服务端1的操作<br>这个时候server02就能一直显示客户端的注册</p><p>这样就算一个服务器挂掉，对整体也不会有影响了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;http://s1.wailian.download/2020/03/16/YukonGames_ZH-CN0135612170_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://gmaya.top/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://gmaya.top/tags/SpringCloud/"/>
    
      <category term="Eureka" scheme="https://gmaya.top/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Eureka最简单的入门（一）</title>
    <link href="https://gmaya.top/20200315/"/>
    <id>https://gmaya.top/20200315/</id>
    <published>2020-03-15T13:33:45.000Z</published>
    <updated>2020-03-15T13:53:30.072Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/15/MetamorphicRocks_ZH-CN9753251368_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="Eureka介绍"><a href="#Eureka介绍" class="headerlink" title="Eureka介绍"></a>Eureka介绍</h2><blockquote><p>Eureka是一个基于REST的服务，主要用于AWS云中的定位服务，以实现中间层服务器的负载平衡和故障转移，在 Spring Cloud 微服务架构中通常用作注册中心，我们称这个服务为 Eureka Server，还有一个与之交互的客户端称之为 Eureka Client</p></blockquote><h2 id="创建eureka服务端"><a href="#创建eureka服务端" class="headerlink" title="创建eureka服务端"></a>创建eureka服务端</h2><p>登录spring官网 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a><br><img data-src="https://img-blog.csdnimg.cn/20200315173526729.png" alt=""><br>写好组名称，和项目名称,搜索eureka server，点击+，选择导出到本地。<br><img data-src="https://img-blog.csdnimg.cn/20200315173919500.png" alt=""><br>将下载好的项目导入idea。</p><p>然后在eureka server项目启动类添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200315175550115.png" alt=""><br>修改配置application.yml文件<br>其中defaultZone<strong>前后注意空格</strong>，而且这个单词是关联不出来的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8761</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8761/eureka/</span></span><br><span class="line">    # 指示此实例是否应将其信息注册到eureka服务器以供其他服务发现，默认为false</span><br><span class="line">    register-with-eureka: <span class="keyword">false</span></span><br><span class="line">  server:</span><br><span class="line">    # 启用自我保护机制，默认为true</span><br><span class="line">    enable-self-preservation: <span class="keyword">false</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    # 微服务名称</span><br><span class="line">    name: eureka</span><br></pre></td></tr></table></figure><p>启动localhost:8761显示页面即为成功！</p><p><img data-src="https://img-blog.csdnimg.cn/20200315203638407.png" alt=""></p><h2 id="创建eureka客户端"><a href="#创建eureka客户端" class="headerlink" title="创建eureka客户端"></a>创建eureka客户端</h2><p>登录spring官网 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a><br>修改项目名称，搜索eureka discovery client 。点击+ ，保存到本地<br><img data-src="https://img-blog.csdnimg.cn/20200315204041224.png" alt=""><br>保存到本地之后，在上一个项目中打开<br><img data-src="https://img-blog.csdnimg.cn/20200315175306228.png" alt=""><br>选择eureka客户端导入。<br><img data-src="https://img-blog.csdnimg.cn/20200315175355975.png" alt=""></p><p>修改eureka客户端启动类<br>添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200315204457915.png" alt=""><br>pom文件添加</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>修改配置文件application.yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-client</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8711</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      #注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“,”进行分隔</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200315210244310.png" alt=""><br>启动服务端，启动客户端<br><img data-src="https://img-blog.csdnimg.cn/20200315210433640.png" alt=""><br>最简单的一个spring cloud + eureka 服务注册到此结束。全部是采用默认形式，最简单的一个项目搭建。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;http://s1.wailian.download/2020/03/15/MetamorphicRocks_ZH-CN9753251368_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://gmaya.top/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://gmaya.top/tags/SpringCloud/"/>
    
      <category term="Eureka" scheme="https://gmaya.top/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 MySQL 中优化 SQL 语句查询常用的 30 种方法</title>
    <link href="https://gmaya.top/20200314/"/>
    <id>https://gmaya.top/20200314/</id>
    <published>2020-03-14T12:08:11.000Z</published>
    <updated>2020-03-14T12:14:22.388Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/14/Cirkelbroen_ZH-CN9645986135_1920x1080.jpg" alt=""></p><a id="more"></a><blockquote><p>转载于网络，作者不详。</p></blockquote><p>1、对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。 </p><p>2、应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。 </p><p>3、应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">0</span></span><br></pre></td></tr></table></figure><p>4、应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">10</span> <span class="keyword">or</span> <span class="keyword">num</span>=<span class="number">20</span></span><br></pre></td></tr></table></figure><p>可以这样查询： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">10</span> </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">20</span></span><br></pre></td></tr></table></figure><p>5、下面的查询也将导致全表扫描： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%abc%'</span></span><br></pre></td></tr></table></figure><p>若要提高效率，可以考虑全文检索。 </p><p>6、in 和 not in 也要慎用，否则会导致全表扫描，如： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>对于连续的数值，能用 between 就不要用 in 了： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>7、如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=@<span class="keyword">num</span></span><br></pre></td></tr></table></figure><p>可以改为强制查询使用索引： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">with</span>(<span class="keyword">index</span>(索引名)) <span class="keyword">where</span> <span class="keyword">num</span>=@<span class="keyword">num</span></span><br></pre></td></tr></table></figure><p>8、应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>/<span class="number">2</span>=<span class="number">100</span></span><br></pre></td></tr></table></figure><p>应改为: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">100</span>*<span class="number">2</span></span><br></pre></td></tr></table></figure><p>9、应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br>name以abc开头的id </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">substring</span>(<span class="keyword">name</span>,<span class="number">1</span>,<span class="number">3</span>)=<span class="string">'abc'</span></span><br></pre></td></tr></table></figure><p>‘2005-11-30’生成的id </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">datediff</span>(<span class="keyword">day</span>,createdate,<span class="string">'2005-11-30'</span>)=<span class="number">0</span></span><br></pre></td></tr></table></figure><p>应改为: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'abc%'</span> </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> createdate&gt;=<span class="string">'2005-11-30'</span> <span class="keyword">and</span> createdate&lt;<span class="string">'2005-12-1'</span></span><br></pre></td></tr></table></figure><p>10、不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。 </p><p>11、在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。 </p><p>12、不要写一些没有意义的查询，如需要生成一个空表结构： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> col1,col2 <span class="keyword">into</span> <span class="comment">#t from t where 1=0</span></span><br></pre></td></tr></table></figure><p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="comment">#t(...)</span></span><br></pre></td></tr></table></figure><p>13、很多时候用 exists 代替 in 是一个好的选择： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> a <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">in</span>(<span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> b)</span><br></pre></td></tr></table></figure><p>用下面的语句替换： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> a <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> b <span class="keyword">where</span> <span class="keyword">num</span>=a.num)</span><br></pre></td></tr></table></figure><p>14、并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。 </p><p>15、索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。 </p><p>16、应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。 </p><p>17、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。 </p><p>18、尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。 </p><p>19、任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。 </p><p>20、尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。 </p><p>21、避免频繁创建和删除临时表，以减少系统表资源的消耗。 </p><p>22、临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。 </p><p>23、在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。 </p><p>24、如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。 </p><p>25、尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。 </p><p>26、使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。 </p><p>27、与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。 </p><p>28、在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。 </p><p>29、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。 </p><p>30、尽量避免大事务操作，提高系统并发能力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;http://s1.wailian.download/2020/03/14/Cirkelbroen_ZH-CN9645986135_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://gmaya.top/categories/mysql/"/>
    
    
      <category term="日常分享" scheme="https://gmaya.top/tags/%E6%97%A5%E5%B8%B8%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>idea新建springboot项目pom文件报错</title>
    <link href="https://gmaya.top/20200313/"/>
    <id>https://gmaya.top/20200313/</id>
    <published>2020-03-13T05:01:11.000Z</published>
    <updated>2020-03-13T07:35:43.468Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/13/FrenchColorado_ZH-CN9446885520_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前也有过类似的情况，只不过都是把spring-boot-starter-parent版本号改成本地仓库已经有的，然后继续开发。今天想写个demo，就新建了一个，然后版本号不一致，就一直报错，所以找了一天问题，才解决。太可怕了</p><h2 id="新建springboot项目的问题"><a href="#新建springboot项目的问题" class="headerlink" title="新建springboot项目的问题"></a>新建springboot项目的问题</h2><p>使用idea，一路next，到最后生成项目<br>然后pom文件报错<br>我特意换了一个全新的maven，发现是因为jar拉不下来，就配置了国内镜像<br>找到maven ，conf 打开 settings.xml。在mirrors里面写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 阿里云镜像 --&gt;</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;id&gt;alimaven&lt;<span class="regexp">/id&gt;</span></span><br><span class="line"><span class="regexp">&lt;name&gt;aliyun maven&lt;/</span>name&gt;</span><br><span class="line">&lt;url&gt;http:<span class="comment">//maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span></span><br><span class="line">&lt;mirrorOf&gt;central&lt;<span class="regexp">/mirrorOf&gt;</span></span><br><span class="line"><span class="regexp">&lt;/mi</span>rror&gt;</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;id&gt;central&lt;<span class="regexp">/id&gt;</span></span><br><span class="line"><span class="regexp">&lt;name&gt;Maven Repository Switchboard&lt;/</span>name&gt;</span><br><span class="line">&lt;url&gt;http:<span class="comment">//repo1.maven.org/maven2/&lt;/url&gt;</span></span><br><span class="line">&lt;mirrorOf&gt;central&lt;<span class="regexp">/mirrorOf&gt;&lt;/mi</span>rror&gt;</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;id&gt;repo2&lt;<span class="regexp">/id&gt;</span></span><br><span class="line"><span class="regexp">&lt;mirrorOf&gt;central&lt;/mi</span>rrorOf&gt;</span><br><span class="line">&lt;name&gt;Human Readable Name <span class="keyword">for</span> <span class="keyword">this</span> Mirror.&lt;<span class="regexp">/name&gt;</span></span><br><span class="line"><span class="regexp">&lt;url&gt;http:/</span><span class="regexp">/repo2.maven.org/m</span>aven2/<span class="xml"><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/mirror&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;mirror&gt;</span></span><br><span class="line"><span class="regexp">&lt;id&gt;ibiblio&lt;/i</span>d&gt;</span><br><span class="line">&lt;mirrorOf&gt;central&lt;<span class="regexp">/mirrorOf&gt;</span></span><br><span class="line"><span class="regexp">&lt;name&gt;Human Readable Name for this Mirror.&lt;/</span>name&gt;</span><br><span class="line">&lt;url&gt;http:<span class="comment">//mirrors.ibiblio.org/pub/mirrors/maven2/&lt;/url&gt;</span></span><br><span class="line">&lt;<span class="regexp">/mirror&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- 中央仓库在中国的镜像 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;mirror&gt;</span></span><br><span class="line"><span class="regexp">&lt;id&gt;maven.net.cn&lt;/i</span>d&gt;</span><br><span class="line">&lt;name&gt;oneof the central mirrors <span class="keyword">in</span> china&lt;<span class="regexp">/name&gt;</span></span><br><span class="line"><span class="regexp">&lt;url&gt;http:/</span><span class="regexp">/maven.net.cn/</span>content/groups/public/<span class="xml"><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></span><br><span class="line">&lt;mirrorOf&gt;central&lt;<span class="regexp">/mirrorOf&gt;</span></span><br><span class="line"><span class="regexp">&lt;/mi</span>rror&gt;</span><br></pre></td></tr></table></figure><p>然后发现还是有点问题，有些拉不下来。<br>继续设置idea，打开设置，搜索maven<br><img data-src="https://img-blog.csdnimg.cn/20200313142951573.png" alt=""><br>将上面的勾打上<br>然后在VM Options下面输入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-Dmaven.wagon.http.ssl.insecure=<span class="literal">true</span></span><br><span class="line">-Dmaven.wagon.http.ssl.allowall=<span class="literal">true</span></span><br><span class="line">-Dmaven.wagon.http.ssl.ignore.validity.dates=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后点击最右面maven，重新安装一下<br>（拉完之后再把勾去掉，还原）<br><img data-src="https://img-blog.csdnimg.cn/20200313143220272.png" alt=""><br>此时已经解决了我所有报错的问题，然后启动项目是启动不起来的，因为没有web<br>继续在pom加入spring-boot-starter-web</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>启动类中加入hello代码校验<br><img data-src="https://img-blog.csdnimg.cn/20200313143721913.png" alt=""><br>启动，浏览器输入<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a><br><img data-src="https://img-blog.csdnimg.cn/20200313143752533.png" alt=""><br>哎。真tm菜</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;http://s1.wailian.download/2020/03/13/FrenchColorado_ZH-CN9446885520_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="idea" scheme="https://gmaya.top/categories/idea/"/>
    
    
      <category term="java" scheme="https://gmaya.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>hexo配置最新next主题的几个问题</title>
    <link href="https://gmaya.top/20200312/"/>
    <id>https://gmaya.top/20200312/</id>
    <published>2020-03-12T05:01:11.000Z</published>
    <updated>2020-03-12T06:22:16.725Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/SiestaKey_ZH-CN1759696989_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>截止到写这博客的时间，花费了一天左右的时间，将next主题美化了一下，以此记录。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>我的博客使用next模板为Mist，打开主题配置文件<br><img data-src="https://img-blog.csdnimg.cn/20200312112907956.png" alt=""></p><h2 id="添加背景线条效果"><a href="#添加背景线条效果" class="headerlink" title="添加背景线条效果"></a>添加背景线条效果</h2><p><img data-src="https://img-blog.csdnimg.cn/2020031211451787.png" alt=""><br>我是参考<a href="https://github.com/theme-next/theme-next-canvas-nest" target="_blank" rel="noopener">canvas-nest</a>官方网站</p><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><p>在根目录的source 文件夹下创建_data文件夹，然后创建footer.swig<br><img data-src="https://img-blog.csdnimg.cn/20200312113617444.png" alt=""><br>注意不要将位置创建到主题里面去，然后将代码拷贝进去即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script color=<span class="string">"0,0,0"</span> opacity=<span class="string">"0.5"</span> zIndex=<span class="string">"-1"</span> count=<span class="string">"99"</span> src=<span class="string">"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>其中color是颜色值，opacity是透明度，zIndex是现在层级，count是线条数量。</p><h3 id="设置路径"><a href="#设置路径" class="headerlink" title="设置路径"></a>设置路径</h3><p>打开<strong>主题配置文件</strong><br>搜索 custom_file_path 将footer注释打开<br><img data-src="https://img-blog.csdnimg.cn/20200312113927646.png" alt=""><br>然后 hexo g  ， hexo s  ，启动看看效果</p><h2 id="首页文章之间周围有边框"><a href="#首页文章之间周围有边框" class="headerlink" title="首页文章之间周围有边框"></a>首页文章之间周围有边框</h2><p>刚开始这个首页文章之间没有边框，每个文章之间没有明显的间隔。<br>效果：<br><img data-src="https://img-blog.csdnimg.cn/20200312135123740.png" alt=""><br>打开：\themes\next\source\css_common\components\post\post.styl<br><img data-src="https://img-blog.csdnimg.cn/20200312135622899.png" alt=""><br>大概35行，找到motion.transition.post_block<br>修改前：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (hexo-config(<span class="string">'motion.transition.post_block'</span>)) &#123;</span><br><span class="line">    .post-block, .pagination, .comments &#123;</span><br><span class="line">      opacity: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (hexo-config(<span class="string">'motion.transition.post_block'</span>)) &#123;</span><br><span class="line">  .post-block&#123;</span><br><span class="line">     opacity: <span class="number">0</span>;</span><br><span class="line">     padding: <span class="number">25</span>px;</span><br><span class="line">     -webkit-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">.5</span>);</span><br><span class="line">     -moz-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">.5</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> .pagination, .comments &#123;</span><br><span class="line">    opacity: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 hexo g  ， hexo s  ，启动看看效果</p><h2 id="修改文章之间的间隔"><a href="#修改文章之间的间隔" class="headerlink" title="修改文章之间的间隔"></a>修改文章之间的间隔</h2><p>默认的文章间距120px，有点大。</p><p>打开：\themes\next\source\css_schemes\Mist_posts-expand.styl<br><img data-src="https://img-blog.csdnimg.cn/20200312140746217.png" alt=""><br>大概24行，找到.post-block:not<br>修改前：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.post-block:not(:first-child) &#123;</span><br><span class="line">  margin-top: <span class="number">120</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将120px，修改为你想要的间距，我改成了20px<br>修改后：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.post-block:not(:first-child) &#123;</span><br><span class="line">  margin-top: <span class="number">20</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="评论数显示为英文问题"><a href="#评论数显示为英文问题" class="headerlink" title="评论数显示为英文问题"></a>评论数显示为英文问题</h2><p>我使用的Valine评论，但是文章标题下面显示的评论数为英文。<br>打开：\themes\next\languages\zh-CN.yml<br><img data-src="https://img-blog.csdnimg.cn/2020031214110617.png" alt=""><br>在post下面新增：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments.valine:</span> <span class="string">评论数</span></span><br></pre></td></tr></table></figure><p>注意空格，和下面保持对齐<br><img data-src="https://img-blog.csdnimg.cn/2020031214125048.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;http://s1.wailian.download/2020/03/12/SiestaKey_ZH-CN1759696989_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://gmaya.top/categories/hexo/"/>
    
    
      <category term="随笔" scheme="https://gmaya.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>获取qq音乐分享链接</title>
    <link href="https://gmaya.top/0308/"/>
    <id>https://gmaya.top/0308/</id>
    <published>2020-03-08T06:12:15.000Z</published>
    <updated>2020-03-12T06:39:50.287Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/2ca911872a193a63a.jpg" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想要写个插件。支持qq，微信，在群里面点歌，这就要获取音乐接口的api 了。<br>注：只允许个人学习使用。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>通过浏览器分析音乐查询接口，分享接口，等等<br><strong>qq音乐搜索接口：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//c.y.qq.com/soso/fcgi-bin/client_search_cp?p=1&amp;n=1&amp;w=水手&amp;format=json&amp;inCharset=utf8&amp;outCharset=utf-8</span></span><br></pre></td></tr></table></figure><p>其中：w=歌名，p=页数，n=条数，format=格式。剩下两个就是编码格式了</p><p>结果：<br>得到以下几个参数：<br>albumname：专辑<br>albumid ： 专辑id<br>albummid : 专辑图片<br>songname ：歌名<br>singer[0].name:歌手名字<br>songid ： 分享链接使用</p><p><strong>音乐分享链接：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//i.y.qq.com/v8/playsong.html?songid=</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//i.y.qq.com/v8/playsong.html?songid=4829638</span></span><br></pre></td></tr></table></figure><p><strong>获取专辑图片：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//y.gtimg.cn/music/photo_new/T002R300x300M000专辑图片.jpg</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//y.gtimg.cn/music/photo_new/T002R300x300M000002MwneO44kDAi.jpg</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;http://s1.wailian.download/2020/03/12/2ca911872a193a63a.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="接口" scheme="https://gmaya.top/categories/%E6%8E%A5%E5%8F%A3/"/>
    
    
      <category term="随笔" scheme="https://gmaya.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>易语言对接腾讯ai智能闲聊</title>
    <link href="https://gmaya.top/0307/"/>
    <id>https://gmaya.top/0307/</id>
    <published>2020-03-07T03:29:25.000Z</published>
    <updated>2020-03-12T06:40:23.607Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/38621881e9146614e.jpg" alt=""></p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>腾讯闲聊服务基于AI Lab领先的NLP引擎能力、数据运算能力和千亿级互联网语料数据的支持，同时集成了广泛的知识问答能力，可实现上百种自定义属性配置，以及男、女不同的语言风格及说话方式，从而让聊天变得更睿智、简单和有趣</p></blockquote><blockquote><p>基础闲聊接口提供基于文本的基础聊天能力，可以让您的应用快速拥有具备上下文语义理解的机器聊天功能。</p></blockquote><p>注：同时我将此接口制作成插件，可以应用在QQ和微信上。再也不怕自己一个人没人聊天了。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先在<a href="https://ai.qq.com/" target="_blank" rel="noopener">腾讯ai官网</a>注册自己的账号，将智能闲聊接入。然后在控制台-应用管理，找到刚接入的智能闲聊，在应用信息里面得到APPID，APPKEY两个参数。<br><img data-src="http://s1.wailian.download/2020/03/11/20200307114018.png" alt="首页"></p><p>基础闲聊API地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>api.ai.qq.com<span class="regexp">/fcgi-bin/</span>nlp<span class="regexp">/nlp_textchat</span></span><br></pre></td></tr></table></figure><p>入参：</p><p><img data-src="http://s1.wailian.download/2020/03/11/20200307114831.png" alt="image"></p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>getAI 方法</p><p>注意： #app_id 和 #app_key 就是上面申请得到的两个参数</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">.版本 <span class="number">2</span></span><br><span class="line"></span><br><span class="line">.子程序 getAI, , 公开</span><br><span class="line">.参数 msg, 文本型, , 消息内容</span><br><span class="line">.局部变量 入参, 文本型</span><br><span class="line">.局部变量 time_stamp, 文本型</span><br><span class="line">.局部变量 nonce_str, 文本型</span><br><span class="line">.局部变量 session, 文本型</span><br><span class="line">.局部变量 question, 文本型</span><br><span class="line">.局部变量 sign, 文本型</span><br><span class="line">.局部变量 反参, 文本型</span><br><span class="line">.局部变量 JSON, 类_json</span><br><span class="line">.局部变量 回复消息, 文本型</span><br><span class="line"></span><br><span class="line">msg ＝ 删全部空 (msg)</span><br><span class="line">' 限制问题字数不能超过<span class="number">250</span>字节 ，官方要求：非空且长度上限<span class="number">300</span>字节</span><br><span class="line">.如果真 (取文本长度 (msg) ＞ <span class="number">250</span>)</span><br><span class="line">    返回 ()</span><br><span class="line">.如果真结束</span><br><span class="line"></span><br><span class="line">time_stamp ＝ 时间_取现行时间戳 (真)</span><br><span class="line">nonce_str ＝ 文本_取随机字符 (<span class="number">16</span>)</span><br><span class="line">session ＝ nonce_str</span><br><span class="line">question ＝ 编码_URL编码 (编码_gb2312到utf8 (msg), 真, )</span><br><span class="line">入参 ＝ “app_id=” ＋ #app_id ＋ “&amp;nonce_str=” ＋ nonce_str ＋ “&amp;question=” ＋ question ＋ “&amp;session=” ＋ session ＋ “&amp;time_stamp=” ＋ time_stamp</span><br><span class="line">' 入参一定要按照字典顺序排好，不然签名不对</span><br><span class="line">sign ＝ getSign (入参)</span><br><span class="line">入参 ＝ 入参 ＋ “&amp;sign=” ＋ sign</span><br><span class="line"><span class="title">反参 ＝ 编码_utf8到gb2312 (网页_访问S (“https:</span>//api.ai.qq.com/fcgi-bin/nlp/nlp_textchat”, <span class="number">1</span>, 入参, , , , , , , , , , , , , , , , , , ))</span><br><span class="line"></span><br><span class="line">.如果真 (JSON.解析 (反参))</span><br><span class="line">    .如果真 (JSON.取通用属性 (“ret”, ) ＝ “<span class="number">0</span>”)</span><br><span class="line">        回复消息 ＝ JSON.取通用属性 (“data.answer”, )</span><br><span class="line">        .如果真 (回复消息 ≠ “”)</span><br><span class="line">            ' 得到智能ai的回答之后，做你想做的事情</span><br><span class="line">        .如果真结束</span><br><span class="line"></span><br><span class="line">    .如果真结束</span><br></pre></td></tr></table></figure><p>getSign 方法</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.版本 <span class="number">2</span></span><br><span class="line"></span><br><span class="line">.子程序 getSign, 文本型</span><br><span class="line">.参数 入参, 文本型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">返回 (校验_取md5 (到字节集 (入参 ＋ “<span class="variable">&amp;app_key</span>=” ＋ <span class="meta">#app_key), 真, ))</span></span><br></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>最后还可以在腾讯ai控制台中配置多重属性的闲聊画像，并且可配置的属性会持续增加，使闲聊的风格因您的喜好而不同。<br>可以实时观看应用概况<br><img data-src="http://s1.wailian.download/2020/03/11/20200307115953.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;http://s1.wailian.download/2020/03/12/38621881e9146614e.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="易语言" scheme="https://gmaya.top/categories/%E6%98%93%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="易语言" scheme="https://gmaya.top/tags/%E6%98%93%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>win10安装git</title>
    <link href="https://gmaya.top/0306/"/>
    <id>https://gmaya.top/0306/</id>
    <published>2020-03-06T09:57:08.000Z</published>
    <updated>2020-03-12T06:40:57.117Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/42284a29cf41f91ef.jpg" alt=""></p><a id="more"></a><h2 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h2><p>去<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git官网</a>下载win版本64位<br>安装全部下一步到结束</p><h2 id="下载小乌龟"><a href="#下载小乌龟" class="headerlink" title="下载小乌龟"></a>下载小乌龟</h2><p>去<a href="https://tortoisegit.org/download/" target="_blank" rel="noopener">tortoriseGit官网</a>下载64位小乌龟。<br>然后下面还有一个中文语言包（不下载也行），Language Packs 下面的 Chinese, simplified<br>先安装小乌龟，一路暴力下一步到结束。安装语言包，一路到结束。<br>鼠标右键打开小乌龟设置，选择语言为中文，结束！</p><h2 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h2><p>鼠标右键 打开 Git Bash</p><p>输入下面的命令<br>将邮箱换成你自己的邮箱、然后回车</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -o -t rsa -b <span class="number">4096</span> -C <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure><p>然后出现提示 密钥保存的位置。记一下<br>使用默认密钥地址，继续回车<br>提示你对密钥设置密码，这里无需设置，直接按回车键就好，要按两次回车键。<br>之后就会显示保存成功<br>然后打开默认位置，看一下有没有两个文件<br><img data-src="https://img-blog.csdnimg.cn/20200306173738233.png" alt="密钥"></p><h2 id="添加密钥到Git服务器"><a href="#添加密钥到Git服务器" class="headerlink" title="添加密钥到Git服务器"></a>添加密钥到Git服务器</h2><p>登录进来之后点击右上角的图标，选择settings设置SSH密钥<br><img data-src="https://img-blog.csdnimg.cn/2020030617384577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择 SSH keys<br>然后 new SSH keys<br>将刚才生成的公钥放进去保存即可。</p><h2 id="配置本地私钥"><a href="#配置本地私钥" class="headerlink" title="配置本地私钥"></a>配置本地私钥</h2><p>在文件夹空白处右键选择TortoiseGit的设置(setting)选项<br><img data-src="https://img-blog.csdnimg.cn/20200306174116319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一直点下一步到下面的这个页面，中间会让你输入你的名称和邮箱（名称随便写，邮箱还写你那个邮箱），然后点击 生成PuTTY密钥对<br><img data-src="https://img-blog.csdnimg.cn/20200306174318690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择你刚才的私钥<br><img data-src="https://img-blog.csdnimg.cn/20200306174349611.png" alt="在这里插入图片描述"><br>然后点击Save private key 保存成PuTTY 格式的私钥<br><img data-src="https://img-blog.csdnimg.cn/20200306174436984.png" alt="在这里插入图片描述"><br>保存成功后关闭窗口</p><h2 id="TortoiseGit克隆项目加载私钥"><a href="#TortoiseGit克隆项目加载私钥" class="headerlink" title="TortoiseGit克隆项目加载私钥"></a>TortoiseGit克隆项目加载私钥</h2><p>右键Git克隆弹出如下窗口<br><img data-src="https://img-blog.csdnimg.cn/20200306174550620.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200306174746242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;http://s1.wailian.download/2020/03/12/42284a29cf41f91ef.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://gmaya.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="安装git" scheme="https://gmaya.top/tags/%E5%AE%89%E8%A3%85git/"/>
    
  </entry>
  
  <entry>
    <title>酷q表情使用</title>
    <link href="https://gmaya.top/0119/"/>
    <id>https://gmaya.top/0119/</id>
    <published>2020-01-19T12:20:52.000Z</published>
    <updated>2020-03-12T06:41:18.702Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/58bbe62ac415d6f92.jpg" alt=""></p><a id="more"></a><h2 id="表情1"><a href="#表情1" class="headerlink" title="表情1"></a>表情1</h2><p>在消息内添加</p><p>[CQ:face,id=XXX]</p><p>其中XXX为下面中的编号</p><p>例如你想添加微笑表情：[CQ:face,id=14][CQ:face,id=14][CQ:face,id=14]</p><p>结果就是三个微笑表情<br><img data-src="https://img-blog.csdnimg.cn/20200119144211711.png" alt="face表情"></p><h2 id="表情2"><a href="#表情2" class="headerlink" title="表情2"></a>表情2</h2><p>在消息内添加</p><p>[CQ:emoji,id=XXX]</p><p>其中XXX为下面中的编号</p><p>例如你想添加雪花表情：[CQ:emoji,id=10052]<br><img data-src="https://img-blog.csdnimg.cn/2020011914444148.png" alt="emoji表情"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;http://s1.wailian.download/2020/03/12/58bbe62ac415d6f92.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="酷q" scheme="https://gmaya.top/categories/%E9%85%B7q/"/>
    
    
      <category term="酷q" scheme="https://gmaya.top/tags/%E9%85%B7q/"/>
    
      <category term="工具类" scheme="https://gmaya.top/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
  </entry>
  
</feed>
