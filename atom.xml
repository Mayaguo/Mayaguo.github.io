<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GMaya</title>
  
  <subtitle>生命不止，奋斗不息。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gmaya.top/"/>
  <updated>2020-04-26T03:13:03.275Z</updated>
  <id>https://gmaya.top/</id>
  
  <author>
    <name>GMaya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>给个人博客添加腾讯cos存储</title>
    <link href="https://gmaya.top/2020/20200426/"/>
    <id>https://gmaya.top/2020/20200426/</id>
    <published>2020-04-26T03:10:14.000Z</published>
    <updated>2020-04-26T03:13:03.275Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/26/FalklandRockhoppers_ZH-CN5370686595_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>图片，视频等一些静态资源放到自己网站会有一定的访问延迟。</p><h2 id="开通存储桶"><a href="#开通存储桶" class="headerlink" title="开通存储桶"></a>开通存储桶</h2><p>在控制台找到对象存储,选择和云服务器一个地方的对象存储。<br><img data-src="https://img-blog.csdnimg.cn/20200426103440374.png" alt=""><br>按照步骤一步一步创建即可。</p><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>一般都是专门创建一个用户来操作的，当然至高无上的主账号也没啥毛病。<br>将新建的用户加上几个策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QcloudCOSGetServiceAccess 对象存储（COS）存储桶列表访问权限</span><br><span class="line">QcloudCOSFullAccess 对象存储（COS）全读写访问权限</span><br><span class="line">QcloudCOSDataFullControl 对象存储（COS）数据读、写、删除、列出的访问权限</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200426104928263.png" alt=""><br>然后在列表中权限管理设置上，    <strong>公有读私有写。数据读取、数据写入权限</strong>。<br><img data-src="https://img-blog.csdnimg.cn/20200426105025653.png" alt=""></p><h2 id="域名管理"><a href="#域名管理" class="headerlink" title="域名管理"></a>域名管理</h2><p>默认的链接一般都是<br><a href="https://blog-xxx.cos.ap-shanghai.myqcloud.com/imgs/MegellanicCloud_ZH-CN5132305226_1920x1080.jpg" target="_blank" rel="noopener">https://blog-xxx.cos.ap-shanghai.myqcloud.com/imgs/MegellanicCloud_ZH-CN5132305226_1920x1080.jpg</a><br>如果想要使用自己的子域名，比如：<br><a href="https://cos.gmaya.top/imgs/MegellanicCloud_ZH-CN5132305226_1920x1080.jpg" target="_blank" rel="noopener">https://cos.gmaya.top/imgs/MegellanicCloud_ZH-CN5132305226_1920x1080.jpg</a></p><ol><li>添加自定义域名</li><li>设置nginx的https代理</li></ol><p>首先在DNS 解析 中 解析一个 cos 指向自己服务器ip的子域名，然后去申请一个免费的证书。<br><img data-src="https://img-blog.csdnimg.cn/2020042611085940.png" alt=""></p><p>然后在域名管理里面添加自定义域名</p><p><img data-src="https://img-blog.csdnimg.cn/20200426105728973.png" alt=""><br>之后修改nginx配置。<br>因为我全站都是https的，不想因为几个图片没有https，导致全站又变成不安全的了。强迫症</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       <span class="number">443</span> ssl;</span><br><span class="line">       server_name  cos.gmaya.top;</span><br><span class="line"></span><br><span class="line">ssl on;</span><br><span class="line">       ssl_certificate      1_cos.gmaya.top_bundle.crt; # 你的证书</span><br><span class="line">       ssl_certificate_key  <span class="number">2</span>_cos.gmaya.top.key;</span><br><span class="line">ssl_session_cache    shared:SSL:<span class="number">1</span>m;</span><br><span class="line">       ssl_session_timeout  <span class="number">5</span>m;</span><br><span class="line"></span><br><span class="line">       ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">       ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">access_log off; </span><br><span class="line">expires 30d; # 缓存30天，自己决定</span><br><span class="line"></span><br><span class="line">root /data/www/; # 必须</span><br><span class="line">proxy_pass  https:<span class="comment">//blog-xxx.cos.ap-shanghai.myqcloud.com; # 你的桶路径</span></span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">error_page  <span class="number">404</span>      /<span class="number">404</span>.html;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="防盗链设置"><a href="#防盗链设置" class="headerlink" title="防盗链设置"></a>防盗链设置</h2><p>如果不开启防盗链，那么哪个网站都可以引用你的图片。</p><p><img data-src="https://img-blog.csdnimg.cn/20200426110345344.png" alt=""></p><h2 id="客户端工具"><a href="#客户端工具" class="headerlink" title="客户端工具"></a>客户端工具</h2><p>在控制台直接进行下载<br><img data-src="https://img-blog.csdnimg.cn/2020042611062841.png" alt=""><br>在用户管理里面找到刚才新开的账户，然后根据API 密钥登录接口。以后上传图片就可以直接拖拽了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/26/FalklandRockhoppers_ZH-CN5370686595_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="cos" scheme="https://gmaya.top/categories/cos/"/>
    
    
      <category term="cos" scheme="https://gmaya.top/tags/cos/"/>
    
      <category term="存储" scheme="https://gmaya.top/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>添加feign熔断降级之后启动报错</title>
    <link href="https://gmaya.top/2020/20200425/"/>
    <id>https://gmaya.top/2020/20200425/</id>
    <published>2020-04-25T08:16:14.000Z</published>
    <updated>2020-04-26T02:27:17.948Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cos.gmaya.top/imgs/MegellanicCloud_ZH-CN5132305226_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在springcloud中，我使用feign自带的Hystrix实现熔断降级，但是却报错了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Error starting ApplicationContext. To display the conditions report re-run your application with <span class="string">'debug'</span> enabled.</span><br><span class="line">[<span class="number">2020</span>-<span class="number">04</span>-<span class="number">25</span> <span class="number">15</span>:<span class="number">49</span>:<span class="number">59</span> ERROR main] org.springframework.boot.SpringApplication - Application run failed</span><br><span class="line">org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name <span class="string">'userController'</span>: Unsatisfied dependency expressed through field <span class="string">'userFacade'</span>; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'gmaya.service.admin.api.facade.UserFacade'</span>: FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: No fallbackFactory instance of type <span class="class"><span class="keyword">class</span> <span class="title">gmaya</span>.<span class="title">service</span>.<span class="title">admin</span>.<span class="title">api</span>.<span class="title">facade</span>.<span class="title">factory</span>.<span class="title">UserFallbackFactory</span> <span class="title">found</span> <span class="title">for</span> <span class="title">feign</span> <span class="title">client</span> <span class="title">gmaya</span>-<span class="title">service</span>-<span class="title">admin</span></span></span><br><span class="line">at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:<span class="number">130</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:<span class="number">399</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">1422</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">594</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class="number">517</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$<span class="number">0</span>(AbstractBeanFactory.java:<span class="number">323</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class="number">222</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">321</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="number">202</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:<span class="number">882</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:<span class="number">878</span>) ~[spring-context-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="number">550</span>) ~[spring-context-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:<span class="number">141</span>) ~[spring-boot-<span class="number">2.2</span><span class="number">.6</span>.RELEASE.jar:<span class="number">2.2</span><span class="number">.6</span>.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:<span class="number">747</span>) [spring-boot-<span class="number">2.2</span><span class="number">.6</span>.RELEASE.jar:<span class="number">2.2</span><span class="number">.6</span>.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:<span class="number">397</span>) [spring-boot-<span class="number">2.2</span><span class="number">.6</span>.RELEASE.jar:<span class="number">2.2</span><span class="number">.6</span>.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="number">315</span>) [spring-boot-<span class="number">2.2</span><span class="number">.6</span>.RELEASE.jar:<span class="number">2.2</span><span class="number">.6</span>.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="number">1226</span>) [spring-boot-<span class="number">2.2</span><span class="number">.6</span>.RELEASE.jar:<span class="number">2.2</span><span class="number">.6</span>.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="number">1215</span>) [spring-boot-<span class="number">2.2</span><span class="number">.6</span>.RELEASE.jar:<span class="number">2.2</span><span class="number">.6</span>.RELEASE]</span><br><span class="line">at top.gmaya.gmayawepapiadmin.GmayaWepapiAdminApplication.main(GmayaWepapiAdminApplication.java:<span class="number">15</span>) [classes/:na]</span><br><span class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'gmaya.service.admin.api.facade.UserFacade'</span>: FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: No fallbackFactory instance of type <span class="class"><span class="keyword">class</span> <span class="title">gmaya</span>.<span class="title">service</span>.<span class="title">admin</span>.<span class="title">api</span>.<span class="title">facade</span>.<span class="title">factory</span>.<span class="title">UserFallbackFactory</span> <span class="title">found</span> <span class="title">for</span> <span class="title">feign</span> <span class="title">client</span> <span class="title">gmaya</span>-<span class="title">service</span>-<span class="title">admin</span></span></span><br><span class="line">at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:178) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:<span class="number">101</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:<span class="number">1818</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getObjectForBeanInstance(AbstractAutowireCapableBeanFactory.java:<span class="number">1266</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">260</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="number">202</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:<span class="number">276</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:<span class="number">1515</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:<span class="number">1472</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:<span class="number">1253</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:<span class="number">1210</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:<span class="number">640</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">... <span class="number">19</span> common frames omitted</span><br><span class="line">Caused by: java.lang.IllegalStateException: No fallbackFactory instance of type <span class="class"><span class="keyword">class</span> <span class="title">gmaya</span>.<span class="title">service</span>.<span class="title">admin</span>.<span class="title">api</span>.<span class="title">facade</span>.<span class="title">factory</span>.<span class="title">UserFallbackFactory</span> <span class="title">found</span> <span class="title">for</span> <span class="title">feign</span> <span class="title">client</span> <span class="title">gmaya</span>-<span class="title">service</span>-<span class="title">admin</span></span></span><br><span class="line">at org.springframework.cloud.openfeign.HystrixTargeter.getFromContext(HystrixTargeter.java:81) ~[spring-cloud-openfeign-core-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">at org.springframework.cloud.openfeign.HystrixTargeter.targetWithFallbackFactory(HystrixTargeter.java:<span class="number">63</span>) ~[spring-cloud-openfeign-core-<span class="number">2.2</span><span class="number">.2</span>.RELEASE.jar:<span class="number">2.2</span><span class="number">.2</span>.RELEASE]</span><br><span class="line">at org.springframework.cloud.openfeign.HystrixTargeter.target(HystrixTargeter.java:<span class="number">53</span>) ~[spring-cloud-openfeign-core-<span class="number">2.2</span><span class="number">.2</span>.RELEASE.jar:<span class="number">2.2</span><span class="number">.2</span>.RELEASE]</span><br><span class="line">at org.springframework.cloud.openfeign.FeignClientFactoryBean.loadBalance(FeignClientFactoryBean.java:<span class="number">253</span>) ~[spring-cloud-openfeign-core-<span class="number">2.2</span><span class="number">.2</span>.RELEASE.jar:<span class="number">2.2</span><span class="number">.2</span>.RELEASE]</span><br><span class="line">at org.springframework.cloud.openfeign.FeignClientFactoryBean.getTarget(FeignClientFactoryBean.java:<span class="number">282</span>) ~[spring-cloud-openfeign-core-<span class="number">2.2</span><span class="number">.2</span>.RELEASE.jar:<span class="number">2.2</span><span class="number">.2</span>.RELEASE]</span><br><span class="line">at org.springframework.cloud.openfeign.FeignClientFactoryBean.getObject(FeignClientFactoryBean.java:<span class="number">262</span>) ~[spring-cloud-openfeign-core-<span class="number">2.2</span><span class="number">.2</span>.RELEASE.jar:<span class="number">2.2</span><span class="number">.2</span>.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:<span class="number">171</span>) ~[spring-beans-<span class="number">5.2</span><span class="number">.5</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.5</span>.RELEASE]</span><br><span class="line">... <span class="number">30</span> common frames omitted</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br></pre></td></tr></table></figure><p>首先先去看了几个点：</p><ol><li>降级实现类是否加注解@Component<br><img data-src="https://img-blog.csdnimg.cn/2020042515525663.png" alt=""></li><li>是否开启了Hystrix熔断支持</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>发现都没问题。</p><p>反正是知道加上UserFallbackFactory才报错的，之前没加就没报错。</p><p>觉得是spring注入不了这个bean。然后突然想起来，之前说项目的所有包都要在springboot启动类下面或者同级。</p><p>然后我就去看了一下我的项目结构<br><img data-src="https://img-blog.csdnimg.cn/20200425155843672.png" alt=""><br>这包名不一样啊，那么我启动web项目能发现在api项目中注册的bean？<br><img data-src="https://img-blog.csdnimg.cn/2020042516022796.png" alt=""><br>注解 springbootapplication源码中解释： 自动扫描所在包及其子包，会将有注解的加入到spring容器中。</p><p>然后就在web暴露接口项目的启动类中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages = &#123; <span class="string">"top.gmaya.gmayawepapiadmin"</span>, <span class="string">"gmaya.service.admin.api"</span>&#125;)</span><br></pre></td></tr></table></figure><p>第一个扫描自己的包，第二个扫描feign接口包</p><p>然后就启动成功了，奇怪之前不加为什么可以呢。<br>然后看了一下，之前是@EnableFeignClients已经将接口扫描注册了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span>(basePackages = &#123;<span class="string">"gmaya.service.admin.api.facade"</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动，访问，没问题。<br>关闭impl实现项目，访问，出现熔断，降级。</p><p>顺便测测负载均衡，默认是开启的。<br>刚才启动的impl实现项目端口是9001，然后使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dserver.port=<span class="number">9003</span> -jar gmaya-service-admin-impl-<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT.jar  server.port=<span class="number">9003</span></span><br></pre></td></tr></table></figure><p>再次启动一个9003端口的项目。<br><img data-src="https://img-blog.csdnimg.cn/20200425160724961.png" alt=""><br>这个时候再次访问接口，发现这两个impl实现项目交替打印。因为默认负载均衡方式是轮询。<br><img data-src="https://img-blog.csdnimg.cn/20200425161033468.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://cos.gmaya.top/imgs/MegellanicCloud_ZH-CN5132305226_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://gmaya.top/categories/SpringCloud/"/>
    
    
      <category term="问题" scheme="https://gmaya.top/tags/%E9%97%AE%E9%A2%98/"/>
    
      <category term="熔断" scheme="https://gmaya.top/tags/%E7%86%94%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>撞库、脱库和洗库</title>
    <link href="https://gmaya.top/2020/20200424/"/>
    <id>https://gmaya.top/2020/20200424/</id>
    <published>2020-04-24T02:55:14.000Z</published>
    <updated>2020-04-24T02:57:58.081Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/24/KingEider_ZH-CN3559595357_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="撞库"><a href="#撞库" class="headerlink" title="撞库"></a>撞库</h2><p>“撞库”一般就是指黑客拿到已经泄露的用户信息，然后去各个网站进行登录，一旦你的账号密码在各个网站都一样，那么就相当于撞库成功。<br>建议：各个网站的登录账号和密码不要一样。</p><h2 id="脱库"><a href="#脱库" class="headerlink" title="脱库"></a>脱库</h2><p>“拖库”就是黑客通过技术手段，盗取数据库信息的过程。<br>建议：做防sql注入，文件上传漏洞等。</p><h2 id="洗库"><a href="#洗库" class="headerlink" title="洗库"></a>洗库</h2><p>“洗库”就是将得到的数据信息进行贩卖。变现。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/24/KingEider_ZH-CN3559595357_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="自我抒写" scheme="https://gmaya.top/categories/%E8%87%AA%E6%88%91%E6%8A%92%E5%86%99/"/>
    
    
      <category term="随笔" scheme="https://gmaya.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>泰山版《Java开发手册》</title>
    <link href="https://gmaya.top/2020/20200422/"/>
    <id>https://gmaya.top/2020/20200422/</id>
    <published>2020-04-22T05:49:14.000Z</published>
    <updated>2020-04-22T07:27:38.865Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/22/GPS_ZH-CN5160095061_1920x1080.jpg" alt=""></p><a id="more"></a><p>每次阿里推出最新的开发手册，自己都会去喵一眼，看一下。养成好习惯<br>泰山版：<br>新增5条日期时间规约；新增2条表别名sql规约；新增统一错误码规约。</p><p>官网地址：<a href="https://developer.aliyun.com/topic/java2020" target="_blank" rel="noopener">https://developer.aliyun.com/topic/java2020</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/22/GPS_ZH-CN5160095061_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://gmaya.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://gmaya.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>分布式雪花算法工具类</title>
    <link href="https://gmaya.top/2020/20200421/"/>
    <id>https://gmaya.top/2020/20200421/</id>
    <published>2020-04-21T03:30:14.000Z</published>
    <updated>2020-04-21T03:33:32.772Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/21/BluebellWood_ZH-CN8128422960_1920x1080.jpg" alt=""></p><a id="more"></a><blockquote><p>SnowFlake 算法，是 Twitter 开源的分布式 id 生成算法。</p></blockquote><p>SnowFlake算法的优点：</p><ul><li>高性能高可用：生成时不依赖于数据库，完全在内存中生成。</li><li>容量大：每秒中能生成数百万的自增ID。</li><li>ID自增：存入数据库中，索引效率高。</li></ul><p>SnowFlake算法的缺点：<br>依赖与系统时间的一致性，如果系统时间被回调，或者改变，可能会造成id冲突或者重复。</p><p>SnowFlakeUtil工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gmaya.springbootrabbitmq.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 雪花算法 分布式 id生成工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GMaya</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dateTime</span> 2020/4/21 9:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowFlakeUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间起始标记点，作为基准，一般取系统的最近时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> epoch = <span class="number">1587433423721L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器标识位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdBits = <span class="number">10L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器ID最大值: 1023</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ -<span class="number">1L</span> &lt;&lt; <span class="keyword">this</span>.workerIdBits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 0，并发控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 毫秒内自增位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdShift = <span class="keyword">this</span>.sequenceBits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 22</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timestampLeftShift = <span class="keyword">this</span>.sequenceBits + <span class="keyword">this</span>.workerIdBits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4095,111111111111,12位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ -<span class="number">1L</span> &lt;&lt; <span class="keyword">this</span>.sequenceBits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录产生时间毫秒数，判断是否是同1毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入机器id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SnowFlakeUtil</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id &gt; <span class="keyword">this</span>.maxWorkerId || id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"机器id不能大于%d或小于0"</span>, <span class="keyword">this</span>.maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间毫秒数</span></span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.lastTimestamp == timestamp) &#123;</span><br><span class="line">            <span class="comment">//如果上一个timestamp与新产生的相等，则sequence加一(最大4095)</span></span><br><span class="line">            <span class="keyword">this</span>.sequence = <span class="keyword">this</span>.sequence + <span class="number">1</span> &amp; <span class="keyword">this</span>.sequenceMask;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 超过最大值进行按位与，结果为0，也就是当这一毫秒序号超过最大值，就会循环等待下一毫秒</span></span><br><span class="line">                timestamp = <span class="keyword">this</span>.tilNextMillis(<span class="keyword">this</span>.lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.sequence = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果时间回退，则报错或者返回-1，调用端进行判断</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; <span class="keyword">this</span>.lastTimestamp) &#123;</span><br><span class="line">            log.error(String.format(<span class="string">"时钟回退，拒绝 %d 毫秒内生成雪花id"</span>, (<span class="keyword">this</span>.lastTimestamp - timestamp)));</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.lastTimestamp = timestamp;</span><br><span class="line">        <span class="comment">// 当前时间-初始时间，然后左移timestampLeftShift。</span></span><br><span class="line">        <span class="comment">// 将机器id左移workerIdShift</span></span><br><span class="line">        <span class="comment">// | 是按位或运算符，例如：x | y，只有当x，y都为0的时候结果才为0，其它情况结果都为1。</span></span><br><span class="line">        <span class="keyword">return</span> timestamp - <span class="keyword">this</span>.epoch &lt;&lt; <span class="keyword">this</span>.timestampLeftShift | <span class="keyword">this</span>.id &lt;&lt; <span class="keyword">this</span>.workerIdShift | <span class="keyword">this</span>.sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果说几十年后id重复了，把机器id加1，再用几十年</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SnowFlakeUtil flowIdWorker = <span class="keyword">new</span> SnowFlakeUtil(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getSnowFlakeId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flowIdWorker.nextId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待下一个毫秒的到来, 保证返回的毫秒数在参数lastTimestamp之后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得系统当前毫秒数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断生成的记录是否有重复记录</span></span><br><span class="line">        <span class="keyword">final</span> Map&lt;Long, Integer&gt; map = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; <span class="number">2000</span>; s++) &#123;</span><br><span class="line">                    <span class="keyword">long</span> snowFlakeId = SnowFlakeUtil.getSnowFlakeId();</span><br><span class="line">                    log.info(<span class="string">"生成雪花ID=&#123;&#125;"</span>,snowFlakeId);</span><br><span class="line">                    Integer put = map.put(snowFlakeId, <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (put != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"主键重复"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/21/BluebellWood_ZH-CN8128422960_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://gmaya.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://gmaya.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="雪花算法" scheme="https://gmaya.top/tags/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+RabbitMQ削峰入门</title>
    <link href="https://gmaya.top/2020/20200420/"/>
    <id>https://gmaya.top/2020/20200420/</id>
    <published>2020-04-20T10:06:14.000Z</published>
    <updated>2020-04-20T10:10:44.720Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/20/NeistPoint_ZH-CN3115403132_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当大量的客户访问请求打到后端，去访问数据库等，瞬间会爆炸的。<br>经过前端或者其他的方案进行限流外。<br>还是有大量的请求，这个时候需要削峰了。</p><h2 id="简单的削峰例子"><a href="#简单的削峰例子" class="headerlink" title="简单的削峰例子"></a>简单的削峰例子</h2><p>先设置小一点，然后循环往队列里面放消息，消费的时候延迟2秒</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: <span class="number">192.168</span><span class="number">.21</span><span class="number">.129</span></span><br><span class="line">    port: <span class="number">5672</span></span><br><span class="line">    username: guest</span><br><span class="line">    password: guest</span><br><span class="line">    virtual-host: <span class="regexp">/</span></span><br><span class="line"><span class="regexp">    listener:</span></span><br><span class="line"><span class="regexp">      type: simple</span></span><br><span class="line"><span class="regexp">      simple:</span></span><br><span class="line"><span class="regexp">        prefetch: 1 # 消费者每次从队列获取的消息数量</span></span><br><span class="line"><span class="regexp">        concurrency: 1 # 消费者数量</span></span><br><span class="line"><span class="regexp">        max-concurrency: 1 # 启动消费者最大数量</span></span><br></pre></td></tr></table></figure><p>调用生产者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (int i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// 调用消息生产者</span></span><br><span class="line">    sender.sender(msg+i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RabbitListener(queues = MQConfig.QUEUE)</span><br><span class="line">   public <span class="keyword">void</span> receiver(<span class="built_in">String</span> msg) throws InterruptedException &#123;</span><br><span class="line">       Thread.sleep(<span class="number">2000</span>L); <span class="comment">// 模拟处理需要2秒</span></span><br><span class="line">       log.info(<span class="string">"消费者消费。。。。。。&#123;&#125;"</span>, msg);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>页面访问：</p><p><a href="http://localhost:8088/hello?msg=GMaya" target="_blank" rel="noopener">http://localhost:8088/hello?msg=GMaya</a></p><p>此时消息会全部放到列队，但是会一条一条消费。简单的实现了削峰处理</p><p><img data-src="https://img-blog.csdnimg.cn/20200420163647431.png" alt=""><br>调整消费者的数量</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">prefetch: 1 # 消费者每次从队列获取的消息数量</span><br><span class="line">concurrency: 2 # 消费者数量</span><br><span class="line">max-concurrency: 10 # 启动消费者最大数量</span><br></pre></td></tr></table></figure><p>此时就会有两个消费者同时去消费队列中的消息。所以这个消费者数量需要根据实际的情况去设置所能承受的一个值，也就是峰值。</p><p><img data-src="https://img-blog.csdnimg.cn/20200420164005437.png" alt=""></p><h2 id="重试策略"><a href="#重试策略" class="headerlink" title="重试策略"></a>重试策略</h2><p>如果说消费者在消费的过程中失败了，那么会一直消费，一直到成功为止。</p><p>但是也可以添加重试策略，比如失败三次就不在消费了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">listener:</span><br><span class="line">  type: simple</span><br><span class="line">  simple:</span><br><span class="line">    prefetch: 1 # 消费者每次从队列获取的消息数量</span><br><span class="line">    concurrency: 2 # 消费者数量</span><br><span class="line">    max-concurrency: 10 # 启动消费者最大数量</span><br><span class="line">    # 重试策略相关配置</span><br><span class="line">    retry:</span><br><span class="line">      enabled: true #开启消费者重试</span><br><span class="line">      max-attempts: 2 #最大重试次数</span><br><span class="line">      initial-interval: 2000 #重试间隔时间</span><br></pre></td></tr></table></figure><p>模拟异常</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RabbitListener(queues = MQConfig.QUEUE)</span><br><span class="line">   public <span class="keyword">void</span> receiver(<span class="built_in">String</span> msg) throws InterruptedException &#123;</span><br><span class="line">       Thread.sleep(<span class="number">2000</span>L); <span class="comment">// 模拟处理需要2秒</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="string">"GMaya8"</span>.equals(msg))&#123;</span><br><span class="line">           System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       log.info(<span class="string">"消费者消费。。。。。。&#123;&#125;"</span>, msg);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>此时的结果就是其他的消息被消费，但是这个GMaya8没了，失败三次之后就没了。队列中也消失了。</p><h2 id="如何保证rabbitmq消息不丢失"><a href="#如何保证rabbitmq消息不丢失" class="headerlink" title="如何保证rabbitmq消息不丢失"></a>如何保证rabbitmq消息不丢失</h2><p>丢失数据场景：</p><ol><li>生产者没有生产成功，即生产者丢失</li><li>rabbitmq丢失了</li><li>消费端丢失，即消费端没消费成功。</li></ol><p>开启confirm回调，启动手动确定消息消费。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8088</span></span><br><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: <span class="number">192.168</span><span class="number">.21</span><span class="number">.129</span></span><br><span class="line">    port: <span class="number">5672</span></span><br><span class="line">    username: guest</span><br><span class="line">    password: guest</span><br><span class="line">    virtual-host: /</span><br><span class="line">    publisher-returns: true # 实现ReturnCallback接口，如果消息从交换器发送到对应队列失败时触发</span><br><span class="line">    publisher-confirm-type: correlated</span><br><span class="line">    listener:</span><br><span class="line">      type: simple</span><br><span class="line">      simple:</span><br><span class="line">        acknowledge-mode: manual # 消息消费确认，可以手动确认</span><br><span class="line">        prefetch: 1 # 消费者每次从队列获取的消息数量</span><br><span class="line">        concurrency: 2 # 消费者数量</span><br><span class="line">        max-concurrency: 10 # 启动消费者最大数量</span><br><span class="line">        # 重试策略相关配置</span><br><span class="line">        retry:</span><br><span class="line">          enabled: true #开启消费者重试</span><br><span class="line">          max-attempts: 3 #最大重试次数</span><br><span class="line">          initial-interval: 2000 #重试间隔时间</span><br><span class="line">    template:</span><br><span class="line">      #在消息没有被路由到合适队列情况下会将消息返还给消息发布者</span><br><span class="line">      #当mandatory标志位设置为true时，如果exchange根据自身类型和消息routingKey无法找到一个合适的queue存储消息，</span><br><span class="line">      # 那么broker会调用basic.return方法将消息返还给生产者;当mandatory设置为false时，</span><br><span class="line">      # 出现上述情况broker会直接将消息丢弃;通俗的讲，mandatory标志告诉broker代理服务器至少将消息route到一个队列中，</span><br><span class="line">      # 否则就将消息return给发送者;</span><br><span class="line">      #: true # 启用强制信息</span><br><span class="line">      mandatory: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>使用交换机模式<br>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sender</span><span class="params">(RabbitTemplate rabbitTemplate)</span></span>&#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * fanout 模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fanoutSender</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"fanout生产者生产消息。。。。。&#123;&#125;"</span>, msg);</span><br><span class="line">        <span class="comment">// 会把消息发送给 所有绑定到此交换机的全部列队；routing_key会被忽略。</span></span><br><span class="line">        CorrelationData correlationData = <span class="keyword">new</span> CorrelationData(UUID.randomUUID().toString());</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(MQConfig.FANOUT_EXCHANGE, <span class="string">""</span>, msg, correlationData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> b, String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(b)&#123;</span><br><span class="line">            log.info(<span class="string">"消息生产成功"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            log.info(<span class="string">"消息生产失败"</span>);</span><br><span class="line">            <span class="comment">// 可以自己写重新发送消息</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = MQConfig.QUEUE_A)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverA</span><span class="params">(String msg,Message message, Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    log.info(<span class="string">"QUEUE_A消费者消费。。。。。。&#123;&#125;"</span>, msg);</span><br><span class="line">    channel.basicAck(message.getMessageProperties().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = MQConfig.QUEUE_B)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverB</span><span class="params">(String msg,Message message, Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    log.info(<span class="string">"QUEUE_B消费者消费。。。。。。&#123;&#125;"</span>, msg);</span><br><span class="line">    channel.basicAck(message.getMessageProperties().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候已经解决出现问题，倒是消息消失的情况。当处理好问题之后，重启就会重新消费</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/20/NeistPoint_ZH-CN3115403132_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="RabbitMQ" scheme="https://gmaya.top/categories/RabbitMQ/"/>
    
    
      <category term="RabbitMQ" scheme="https://gmaya.top/tags/RabbitMQ/"/>
    
      <category term="削峰" scheme="https://gmaya.top/tags/%E5%89%8A%E5%B3%B0/"/>
    
  </entry>
  
  <entry>
    <title>给hexo博客加404公益页面</title>
    <link href="https://gmaya.top/2020/20200419/"/>
    <id>https://gmaya.top/2020/20200419/</id>
    <published>2020-04-19T10:24:14.000Z</published>
    <updated>2020-04-19T10:25:25.671Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/19/VernalFalls_ZH-CN2664125316_1920x1080.jpg" alt=""></p><a id="more"></a><p>腾讯公益404页面，寻找丢失儿童，让大家一起关注此项公益事业！<br>效果如：<br><a href="https://gmaya.top/404.html">https://gmaya.top/404.html</a></p><p>目的：<br>如果访问网站不存在的页面，则返回腾讯公益404页面</p><p>使用方法，新建 404.html 页面，放到主题的 source 目录下，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"content-type"</span> content=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"robots"</span> content=<span class="string">"all"</span> /&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"robots"</span> content=<span class="string">"index,follow"</span>/&gt;</span><br><span class="line">  &lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"https://qzone.qq.com/gy/404/style/404style.css"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script type="text/</span>plain<span class="string">" src="</span>https:<span class="comment">//www.qq.com/404/search_children.js"</span></span><br><span class="line">          charset=<span class="string">"utf-8"</span> homePageUrl=<span class="string">"/"</span></span><br><span class="line">          homePageName=<span class="string">"回到我的主页"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="https:/</span><span class="regexp">/qzone.qq.com/gy</span><span class="regexp">/404/</span>data.js<span class="string">" charset="</span>utf<span class="number">-8</span><span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script src="</span>https:<span class="comment">//qzone.qq.com/gy/404/page.js" charset="utf-8"&gt;&lt;/script&gt;</span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>修改nginx配置，只要访问的页面不存在则跳转到404公益页面。</p><p>在nginx.conf的443端口下添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_page  <span class="number">404</span>      /<span class="number">404.</span>html;</span><br></pre></td></tr></table></figure><p>重启即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/19/VernalFalls_ZH-CN2664125316_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="优化" scheme="https://gmaya.top/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="优化" scheme="https://gmaya.top/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>win10系统hexo博客自动发布自动拉取</title>
    <link href="https://gmaya.top/2020/20200417-2/"/>
    <id>https://gmaya.top/2020/20200417-2/</id>
    <published>2020-04-17T09:34:14.000Z</published>
    <updated>2020-04-17T09:37:35.166Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/17/NBNMSipapu_ZH-CN2293681419_1920x1080.jpg" alt=""></p><a id="more"></a><p>我之前的流程是这样发布个人博客的。</p><ol><li>本地(win10)编写博客</li><li>本地上传博客到github</li><li>服务器（win10）通过git拉取最新代码</li><li>因为是nginx代理的，所以这个时候直接域名访问就是最新的了。</li></ol><p><strong>问题</strong>：<br>每次本地上传完都需要远程控制服务器，然后手动拉取代码。</p><p>更改后实现的效果：</p><ol><li>本地(win10)编写博客</li><li>本地上传博客到github</li></ol><p>其实就是 本地编写完，然后 hexo s 查看没问题，然后 hexo g  hexo d ，完事！</p><p>本地（win）无需做任何修改，hexo d 只要吧博客上传到github就行。</p><p><strong>服务器（win）做以下更改：</strong><br>存放博客根目录新建文件 pull.bat   名称随意<br>里面加上一句命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>对，就是这么简单粗暴的一个命令。</p><p><strong>然后win系统新增任务计划</strong><br><img data-src="https://img-blog.csdnimg.cn/20200417172615283.png" alt=""><br>点击<strong>创建任务</strong></p><p><img data-src="https://img-blog.csdnimg.cn/20200417172735415.png" alt=""><br>常规设置<br><img data-src="https://img-blog.csdnimg.cn/20200417172853501.png" alt=""><br>触发器设置<br>看自己想法设置间隔时间，博客没那么频繁，所以一个小时拉取一次<br><img data-src="https://img-blog.csdnimg.cn/20200417173000618.png" alt=""><br>操作设置</p><p><img data-src="https://img-blog.csdnimg.cn/20200417173159535.png" alt=""></p><p>保存！哈哈。</p><p>我服务器有点东西必须用win，没办法。 等到时候用linux在弄一个，原理应该都是这样！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/17/NBNMSipapu_ZH-CN2293681419_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://gmaya.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="自动拉取git" scheme="https://gmaya.top/tags/%E8%87%AA%E5%8A%A8%E6%8B%89%E5%8F%96git/"/>
    
      <category term="win10" scheme="https://gmaya.top/tags/win10/"/>
    
  </entry>
  
  <entry>
    <title>Linux下RabbitMQ另外一种延迟功能实现</title>
    <link href="https://gmaya.top/2020/20200417/"/>
    <id>https://gmaya.top/2020/20200417/</id>
    <published>2020-04-17T07:00:14.000Z</published>
    <updated>2020-04-17T09:03:09.315Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/17/HimachalFalls_ZH-CN2187203976_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面写了使用死信对列实现了：<br>订单下单之后 30 分钟后，用户如果没有付钱，系统需要自动取消订单。<br>今天在研究一下另外一种<br>rabbitmq-delayed-message-exchange插件</p><blockquote><p>注意：延迟插件 rabbitmq-delayed-message-exchange 是在 RabbitMQ 3.5.7 及以上的版本才支持的，依赖 Erlang/OPT 18.0 及以上运行环境。</p></blockquote><p>完整代码链接<a href="https://gitee.com/GMaya/springboot-rabbitmq" target="_blank" rel="noopener">https://gitee.com/GMaya/springboot-rabbitmq</a></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>首先找到RabbitMQ插件目录<br>我的是在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/rabbitmq/lib/rabbitmq_server-<span class="number">3.6</span><span class="number">.15</span>/plugins</span><br></pre></td></tr></table></figure><p>然后下载插件<br><a href="https://www.rabbitmq.com/community-plugins.html" target="_blank" rel="noopener">https://www.rabbitmq.com/community-plugins.html</a><br>下载需要的版本，我下载的是3.6.x<br><img data-src="https://img-blog.csdnimg.cn/20200417140527781.png" alt=""><br>解压之后把rabbitmq_delayed_message_exchange-20171215-3.6.x.ez文件上传到plugins目录</p><p>然后开启插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p>查看开启的插件列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins list</span><br></pre></td></tr></table></figure><p>重启服务</p><h2 id="集成到spring-boot"><a href="#集成到spring-boot" class="headerlink" title="集成到spring boot"></a>集成到spring boot</h2><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用rabbitmq-delayed-message-exchange 构建一个的延迟队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GMaya</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dateTime</span> 2020/4/17 14:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Queue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">delayedQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"delayedQueue"</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建延迟交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">CustomExchange <span class="title">customExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        args.put(<span class="string">"x-delayed-type"</span>, <span class="string">"direct"</span>);</span><br><span class="line">        <span class="comment">//参数二为类型：必须是x-delayed-message</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomExchange(<span class="string">"delayed-Exchange"</span>, <span class="string">"x-delayed-message"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  绑定队列到交换器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">binding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayedQueue()).to(customExchange()).with(<span class="string">"delayedQueue"</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * delayed消息生产着</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GMaya</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dateTime</span> 2020/4/17 14:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelaySender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"生产者===订单号：&#123;&#125;"</span>, msg);</span><br><span class="line">        <span class="comment">// 这里把消息生产出来，指定交换机和queue</span></span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">"delayed-Exchange"</span>, <span class="string">"delayedQueue"</span>, msg, <span class="keyword">new</span> MessagePostProcessor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException </span>&#123;</span><br><span class="line">                MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">                <span class="comment">// 这里是延迟时间，单位ms，这里延迟10s</span></span><br><span class="line">                messageProperties.setHeader(<span class="string">"x-delay"</span>,<span class="number">10000</span>);</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GMaya</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dateTime</span> 2020/4/17 14:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"delayedQueue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderMsg</span><span class="params">(String msg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"消费者===订单号：&#123;&#125;"</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在HelloController中注入调用<br>启动项目访问测试<br><a href="http://localhost:8088/hello?msg=hello,delay" target="_blank" rel="noopener">http://localhost:8088/hello?msg=hello,delay</a><br><img data-src="https://img-blog.csdnimg.cn/20200417144124808.png" alt=""><br>完美延迟！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用RabbitMQ两种延迟消息方法，</p><ol><li>通过消息过期后进入死信交换器，再由交换器转发到延迟消费队列，实现延迟功能</li><li>使用 rabbitmq-delayed-message-exchange 插件实现延迟功能。<br>如果版本合适，第二种方法比第一个简单点，没那么绕。。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/17/HimachalFalls_ZH-CN2187203976_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://gmaya.top/categories/Java/"/>
    
    
      <category term="RabbitMQ" scheme="https://gmaya.top/tags/RabbitMQ/"/>
    
      <category term="Linux" scheme="https://gmaya.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>记一次优化我的个人博客</title>
    <link href="https://gmaya.top/2020/20200414-2/"/>
    <id>https://gmaya.top/2020/20200414-2/</id>
    <published>2020-04-14T06:32:14.000Z</published>
    <updated>2020-04-14T06:35:39.669Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/13/SneezeSpring_ZH-CN1577114008_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>优化一下自己的博客访问速度等！不要求画面多么炫酷，但是，必须要快！快！！<br>我的博客：<a href="https://gmaya.top">https://gmaya.top</a>欢迎访问哟！</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>话不多说，先看效果<br>优化前：<br><img data-src="https://img-blog.csdnimg.cn/20200414142404240.png" alt="优化前"><br>优化后：<br><img data-src="https://img-blog.csdnimg.cn/2020041414265240.png" alt="优化后"></p><h2 id="Hexo内部优化"><a href="#Hexo内部优化" class="headerlink" title="Hexo内部优化"></a>Hexo内部优化</h2><p>我的个人博客站点使用hexo搭建，使用next模板。<br>模板配置文件搜索：motion<br>enable：是否开启页面动画，就是刚进来有没有那个慢吞吞的特效<br>async：是否开启异步加载，就是你的页面内容和特效是一起加载的。<br><img data-src="https://img-blog.csdnimg.cn/20200414141036404.png" alt=""></p><h2 id="Nginx优化访问"><a href="#Nginx优化访问" class="headerlink" title="Nginx优化访问"></a>Nginx优化访问</h2><p>我的博客静态页面是通过Nginx代理的</p><h3 id="修改worker-connections"><a href="#修改worker-connections" class="headerlink" title="修改worker_connections"></a>修改worker_connections</h3><p>默认是1024，相对而言扩大5倍，根据自己服务器决定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    worker_connections  <span class="number">5024</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改http配置"><a href="#修改http配置" class="headerlink" title="修改http配置"></a>修改http配置</h3><p>需要哪个就加上哪个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">    #                  '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">    #                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"># 关闭日志</span><br><span class="line">access_log      off;</span><br><span class="line"># 隐藏响应头中的有关操作系统和web server（Nginx）版本号的信息，这样对于安全性是有好处的。</span><br><span class="line">    server_tokens   off;</span><br><span class="line">    sendfile        on;</span><br><span class="line"># 等数据包累计到一定大小发送，启用 sendfile 生效</span><br><span class="line">    tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line"># 开启gzip</span><br><span class="line">    gzip  on;</span><br><span class="line"># 启用gzip压缩的最小文件；小于设置值的文件将不会被压缩</span><br><span class="line">    gzip_min_length <span class="number">1</span>k;</span><br><span class="line"># gzip 压缩级别 1-10</span><br><span class="line">    gzip_comp_level <span class="number">2</span>;</span><br><span class="line"># 禁用IE 6 gzip</span><br><span class="line">gzip_disable <span class="string">"MSIE [1-6]\."</span>;</span><br><span class="line">gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php;</span><br><span class="line"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启https访问"><a href="#开启https访问" class="headerlink" title="开启https访问"></a>开启https访问</h3><p>不喜欢网站一直显示不安全。<br>如果是http请求，将转发到https</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  gmaya.top;</span><br><span class="line">    rewrite ^(.*)$ https:<span class="comment">//$host:443/$1 permanent;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态资源缓存"><a href="#静态资源缓存" class="headerlink" title="静态资源缓存"></a>静态资源缓存</h3><p>如果不是https，直接把内容加到80端口即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">  server &#123;</span><br><span class="line">      listen       <span class="number">443</span> ssl;</span><br><span class="line">      server_name  gmaya.top;</span><br><span class="line"># 添加自己的证书</span><br><span class="line">      ssl_certificate      xxx.crt;</span><br><span class="line">      ssl_certificate_key  xxx.key;</span><br><span class="line"></span><br><span class="line">      ssl_session_cache    shared:SSL:<span class="number">1</span>m;</span><br><span class="line">      ssl_session_timeout  <span class="number">5</span>m;</span><br><span class="line"></span><br><span class="line">      ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">      ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">location ~* \.(css|js|ico|gif|jpg|jpeg|png)$ &#123;</span><br><span class="line"># 同上，通配所有以.css/.js/...结尾的请求 </span><br><span class="line">access_log off; </span><br><span class="line">#忽略头部禁止缓存申明，类似与CDN的强制缓存功能</span><br><span class="line">proxy_ignore_headers <span class="string">"Cache-Control"</span> <span class="string">"Expires"</span> <span class="string">"Set-Cookie"</span>;</span><br><span class="line"># 开启缓存，时间864000秒，</span><br><span class="line">add_header Cache-Control <span class="string">"public,max-age=864000"</span>;</span><br><span class="line">root   C:\dev\blog;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">location ~* \.(html|xml)$ &#123;</span><br><span class="line">          access_log off;</span><br><span class="line">          # max-age&lt;=0 时向server发送http请求确认 ,该资源是否有修改, 有的话 返回200 , 无的话 返回304。</span><br><span class="line">          add_header Cache-Control no-cache;</span><br><span class="line">root   C:\dev\blog;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">access_log off;</span><br><span class="line">          root   C:\dev\blog;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我博客上还有很多外链，哎，懒得换咯！（如果有一天外链挂了，再迁移过来。）</p><p>虽然一天到晚，总浏览量还不到20，哈哈。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/13/SneezeSpring_ZH-CN1577114008_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="优化" scheme="https://gmaya.top/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="Nginx" scheme="https://gmaya.top/tags/Nginx/"/>
    
      <category term="优化" scheme="https://gmaya.top/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
