<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GMaya</title>
  
  <subtitle>生命不止，奋斗不息。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gmaya.top/"/>
  <updated>2020-04-20T10:10:44.720Z</updated>
  <id>https://gmaya.top/</id>
  
  <author>
    <name>GMaya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot+RabbitMQ削峰入门</title>
    <link href="https://gmaya.top/2020/20200420/"/>
    <id>https://gmaya.top/2020/20200420/</id>
    <published>2020-04-20T10:06:14.000Z</published>
    <updated>2020-04-20T10:10:44.720Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/20/NeistPoint_ZH-CN3115403132_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当大量的客户访问请求打到后端，去访问数据库等，瞬间会爆炸的。<br>经过前端或者其他的方案进行限流外。<br>还是有大量的请求，这个时候需要削峰了。</p><h2 id="简单的削峰例子"><a href="#简单的削峰例子" class="headerlink" title="简单的削峰例子"></a>简单的削峰例子</h2><p>先设置小一点，然后循环往队列里面放消息，消费的时候延迟2秒</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: <span class="number">192.168</span><span class="number">.21</span><span class="number">.129</span></span><br><span class="line">    port: <span class="number">5672</span></span><br><span class="line">    username: guest</span><br><span class="line">    password: guest</span><br><span class="line">    virtual-host: <span class="regexp">/</span></span><br><span class="line"><span class="regexp">    listener:</span></span><br><span class="line"><span class="regexp">      type: simple</span></span><br><span class="line"><span class="regexp">      simple:</span></span><br><span class="line"><span class="regexp">        prefetch: 1 # 消费者每次从队列获取的消息数量</span></span><br><span class="line"><span class="regexp">        concurrency: 1 # 消费者数量</span></span><br><span class="line"><span class="regexp">        max-concurrency: 1 # 启动消费者最大数量</span></span><br></pre></td></tr></table></figure><p>调用生产者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (int i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// 调用消息生产者</span></span><br><span class="line">    sender.sender(msg+i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RabbitListener(queues = MQConfig.QUEUE)</span><br><span class="line">   public <span class="keyword">void</span> receiver(<span class="built_in">String</span> msg) throws InterruptedException &#123;</span><br><span class="line">       Thread.sleep(<span class="number">2000</span>L); <span class="comment">// 模拟处理需要2秒</span></span><br><span class="line">       log.info(<span class="string">"消费者消费。。。。。。&#123;&#125;"</span>, msg);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>页面访问：</p><p><a href="http://localhost:8088/hello?msg=GMaya" target="_blank" rel="noopener">http://localhost:8088/hello?msg=GMaya</a></p><p>此时消息会全部放到列队，但是会一条一条消费。简单的实现了削峰处理</p><p><img data-src="https://img-blog.csdnimg.cn/20200420163647431.png" alt=""><br>调整消费者的数量</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">prefetch: 1 # 消费者每次从队列获取的消息数量</span><br><span class="line">concurrency: 2 # 消费者数量</span><br><span class="line">max-concurrency: 10 # 启动消费者最大数量</span><br></pre></td></tr></table></figure><p>此时就会有两个消费者同时去消费队列中的消息。所以这个消费者数量需要根据实际的情况去设置所能承受的一个值，也就是峰值。</p><p><img data-src="https://img-blog.csdnimg.cn/20200420164005437.png" alt=""></p><h2 id="重试策略"><a href="#重试策略" class="headerlink" title="重试策略"></a>重试策略</h2><p>如果说消费者在消费的过程中失败了，那么会一直消费，一直到成功为止。</p><p>但是也可以添加重试策略，比如失败三次就不在消费了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">listener:</span><br><span class="line">  type: simple</span><br><span class="line">  simple:</span><br><span class="line">    prefetch: 1 # 消费者每次从队列获取的消息数量</span><br><span class="line">    concurrency: 2 # 消费者数量</span><br><span class="line">    max-concurrency: 10 # 启动消费者最大数量</span><br><span class="line">    # 重试策略相关配置</span><br><span class="line">    retry:</span><br><span class="line">      enabled: true #开启消费者重试</span><br><span class="line">      max-attempts: 2 #最大重试次数</span><br><span class="line">      initial-interval: 2000 #重试间隔时间</span><br></pre></td></tr></table></figure><p>模拟异常</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RabbitListener(queues = MQConfig.QUEUE)</span><br><span class="line">   public <span class="keyword">void</span> receiver(<span class="built_in">String</span> msg) throws InterruptedException &#123;</span><br><span class="line">       Thread.sleep(<span class="number">2000</span>L); <span class="comment">// 模拟处理需要2秒</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="string">"GMaya8"</span>.equals(msg))&#123;</span><br><span class="line">           System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       log.info(<span class="string">"消费者消费。。。。。。&#123;&#125;"</span>, msg);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>此时的结果就是其他的消息被消费，但是这个GMaya8没了，失败三次之后就没了。队列中也消失了。</p><h2 id="如何保证rabbitmq消息不丢失"><a href="#如何保证rabbitmq消息不丢失" class="headerlink" title="如何保证rabbitmq消息不丢失"></a>如何保证rabbitmq消息不丢失</h2><p>丢失数据场景：</p><ol><li>生产者没有生产成功，即生产者丢失</li><li>rabbitmq丢失了</li><li>消费端丢失，即消费端没消费成功。</li></ol><p>开启confirm回调，启动手动确定消息消费。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8088</span></span><br><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: <span class="number">192.168</span><span class="number">.21</span><span class="number">.129</span></span><br><span class="line">    port: <span class="number">5672</span></span><br><span class="line">    username: guest</span><br><span class="line">    password: guest</span><br><span class="line">    virtual-host: /</span><br><span class="line">    publisher-returns: true # 实现ReturnCallback接口，如果消息从交换器发送到对应队列失败时触发</span><br><span class="line">    publisher-confirm-type: correlated</span><br><span class="line">    listener:</span><br><span class="line">      type: simple</span><br><span class="line">      simple:</span><br><span class="line">        acknowledge-mode: manual # 消息消费确认，可以手动确认</span><br><span class="line">        prefetch: 1 # 消费者每次从队列获取的消息数量</span><br><span class="line">        concurrency: 2 # 消费者数量</span><br><span class="line">        max-concurrency: 10 # 启动消费者最大数量</span><br><span class="line">        # 重试策略相关配置</span><br><span class="line">        retry:</span><br><span class="line">          enabled: true #开启消费者重试</span><br><span class="line">          max-attempts: 3 #最大重试次数</span><br><span class="line">          initial-interval: 2000 #重试间隔时间</span><br><span class="line">    template:</span><br><span class="line">      #在消息没有被路由到合适队列情况下会将消息返还给消息发布者</span><br><span class="line">      #当mandatory标志位设置为true时，如果exchange根据自身类型和消息routingKey无法找到一个合适的queue存储消息，</span><br><span class="line">      # 那么broker会调用basic.return方法将消息返还给生产者;当mandatory设置为false时，</span><br><span class="line">      # 出现上述情况broker会直接将消息丢弃;通俗的讲，mandatory标志告诉broker代理服务器至少将消息route到一个队列中，</span><br><span class="line">      # 否则就将消息return给发送者;</span><br><span class="line">      #: true # 启用强制信息</span><br><span class="line">      mandatory: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>使用交换机模式<br>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sender</span><span class="params">(RabbitTemplate rabbitTemplate)</span></span>&#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * fanout 模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fanoutSender</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"fanout生产者生产消息。。。。。&#123;&#125;"</span>, msg);</span><br><span class="line">        <span class="comment">// 会把消息发送给 所有绑定到此交换机的全部列队；routing_key会被忽略。</span></span><br><span class="line">        CorrelationData correlationData = <span class="keyword">new</span> CorrelationData(UUID.randomUUID().toString());</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(MQConfig.FANOUT_EXCHANGE, <span class="string">""</span>, msg, correlationData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> b, String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(b)&#123;</span><br><span class="line">            log.info(<span class="string">"消息生产成功"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            log.info(<span class="string">"消息生产失败"</span>);</span><br><span class="line">            <span class="comment">// 可以自己写重新发送消息</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = MQConfig.QUEUE_A)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverA</span><span class="params">(String msg,Message message, Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    log.info(<span class="string">"QUEUE_A消费者消费。。。。。。&#123;&#125;"</span>, msg);</span><br><span class="line">    channel.basicAck(message.getMessageProperties().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = MQConfig.QUEUE_B)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverB</span><span class="params">(String msg,Message message, Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    log.info(<span class="string">"QUEUE_B消费者消费。。。。。。&#123;&#125;"</span>, msg);</span><br><span class="line">    channel.basicAck(message.getMessageProperties().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候已经解决出现问题，倒是消息消失的情况。当处理好问题之后，重启就会重新消费</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/20/NeistPoint_ZH-CN3115403132_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="RabbitMQ" scheme="https://gmaya.top/categories/RabbitMQ/"/>
    
    
      <category term="RabbitMQ" scheme="https://gmaya.top/tags/RabbitMQ/"/>
    
      <category term="削峰" scheme="https://gmaya.top/tags/%E5%89%8A%E5%B3%B0/"/>
    
  </entry>
  
  <entry>
    <title>给hexo博客加404公益页面</title>
    <link href="https://gmaya.top/2020/20200419/"/>
    <id>https://gmaya.top/2020/20200419/</id>
    <published>2020-04-19T10:24:14.000Z</published>
    <updated>2020-04-19T10:25:25.671Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/19/VernalFalls_ZH-CN2664125316_1920x1080.jpg" alt=""></p><a id="more"></a><p>腾讯公益404页面，寻找丢失儿童，让大家一起关注此项公益事业！<br>效果如：<br><a href="https://gmaya.top/404.html">https://gmaya.top/404.html</a></p><p>目的：<br>如果访问网站不存在的页面，则返回腾讯公益404页面</p><p>使用方法，新建 404.html 页面，放到主题的 source 目录下，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"content-type"</span> content=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"robots"</span> content=<span class="string">"all"</span> /&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"robots"</span> content=<span class="string">"index,follow"</span>/&gt;</span><br><span class="line">  &lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"https://qzone.qq.com/gy/404/style/404style.css"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script type="text/</span>plain<span class="string">" src="</span>https:<span class="comment">//www.qq.com/404/search_children.js"</span></span><br><span class="line">          charset=<span class="string">"utf-8"</span> homePageUrl=<span class="string">"/"</span></span><br><span class="line">          homePageName=<span class="string">"回到我的主页"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="https:/</span><span class="regexp">/qzone.qq.com/gy</span><span class="regexp">/404/</span>data.js<span class="string">" charset="</span>utf<span class="number">-8</span><span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script src="</span>https:<span class="comment">//qzone.qq.com/gy/404/page.js" charset="utf-8"&gt;&lt;/script&gt;</span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>修改nginx配置，只要访问的页面不存在则跳转到404公益页面。</p><p>在nginx.conf的443端口下添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_page  <span class="number">404</span>      /<span class="number">404.</span>html;</span><br></pre></td></tr></table></figure><p>重启即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/19/VernalFalls_ZH-CN2664125316_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="优化" scheme="https://gmaya.top/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="优化" scheme="https://gmaya.top/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>win10系统hexo博客自动发布自动拉取</title>
    <link href="https://gmaya.top/2020/20200417-2/"/>
    <id>https://gmaya.top/2020/20200417-2/</id>
    <published>2020-04-17T09:34:14.000Z</published>
    <updated>2020-04-17T09:37:35.166Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/17/NBNMSipapu_ZH-CN2293681419_1920x1080.jpg" alt=""></p><a id="more"></a><p>我之前的流程是这样发布个人博客的。</p><ol><li>本地(win10)编写博客</li><li>本地上传博客到github</li><li>服务器（win10）通过git拉取最新代码</li><li>因为是nginx代理的，所以这个时候直接域名访问就是最新的了。</li></ol><p><strong>问题</strong>：<br>每次本地上传完都需要远程控制服务器，然后手动拉取代码。</p><p>更改后实现的效果：</p><ol><li>本地(win10)编写博客</li><li>本地上传博客到github</li></ol><p>其实就是 本地编写完，然后 hexo s 查看没问题，然后 hexo g  hexo d ，完事！</p><p>本地（win）无需做任何修改，hexo d 只要吧博客上传到github就行。</p><p><strong>服务器（win）做以下更改：</strong><br>存放博客根目录新建文件 pull.bat   名称随意<br>里面加上一句命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>对，就是这么简单粗暴的一个命令。</p><p><strong>然后win系统新增任务计划</strong><br><img data-src="https://img-blog.csdnimg.cn/20200417172615283.png" alt=""><br>点击<strong>创建任务</strong></p><p><img data-src="https://img-blog.csdnimg.cn/20200417172735415.png" alt=""><br>常规设置<br><img data-src="https://img-blog.csdnimg.cn/20200417172853501.png" alt=""><br>触发器设置<br>看自己想法设置间隔时间，博客没那么频繁，所以一个小时拉取一次<br><img data-src="https://img-blog.csdnimg.cn/20200417173000618.png" alt=""><br>操作设置</p><p><img data-src="https://img-blog.csdnimg.cn/20200417173159535.png" alt=""></p><p>保存！哈哈。</p><p>我服务器有点东西必须用win，没办法。 等到时候用linux在弄一个，原理应该都是这样！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/17/NBNMSipapu_ZH-CN2293681419_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://gmaya.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="自动拉取git" scheme="https://gmaya.top/tags/%E8%87%AA%E5%8A%A8%E6%8B%89%E5%8F%96git/"/>
    
      <category term="win10" scheme="https://gmaya.top/tags/win10/"/>
    
  </entry>
  
  <entry>
    <title>Linux下RabbitMQ另外一种延迟功能实现</title>
    <link href="https://gmaya.top/2020/20200417/"/>
    <id>https://gmaya.top/2020/20200417/</id>
    <published>2020-04-17T07:00:14.000Z</published>
    <updated>2020-04-17T09:03:09.315Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/17/HimachalFalls_ZH-CN2187203976_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面写了使用死信对列实现了：<br>订单下单之后 30 分钟后，用户如果没有付钱，系统需要自动取消订单。<br>今天在研究一下另外一种<br>rabbitmq-delayed-message-exchange插件</p><blockquote><p>注意：延迟插件 rabbitmq-delayed-message-exchange 是在 RabbitMQ 3.5.7 及以上的版本才支持的，依赖 Erlang/OPT 18.0 及以上运行环境。</p></blockquote><p>完整代码链接<a href="https://gitee.com/GMaya/springboot-rabbitmq" target="_blank" rel="noopener">https://gitee.com/GMaya/springboot-rabbitmq</a></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>首先找到RabbitMQ插件目录<br>我的是在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/rabbitmq/lib/rabbitmq_server-<span class="number">3.6</span><span class="number">.15</span>/plugins</span><br></pre></td></tr></table></figure><p>然后下载插件<br><a href="https://www.rabbitmq.com/community-plugins.html" target="_blank" rel="noopener">https://www.rabbitmq.com/community-plugins.html</a><br>下载需要的版本，我下载的是3.6.x<br><img data-src="https://img-blog.csdnimg.cn/20200417140527781.png" alt=""><br>解压之后把rabbitmq_delayed_message_exchange-20171215-3.6.x.ez文件上传到plugins目录</p><p>然后开启插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p>查看开启的插件列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins list</span><br></pre></td></tr></table></figure><p>重启服务</p><h2 id="集成到spring-boot"><a href="#集成到spring-boot" class="headerlink" title="集成到spring boot"></a>集成到spring boot</h2><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用rabbitmq-delayed-message-exchange 构建一个的延迟队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GMaya</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dateTime</span> 2020/4/17 14:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Queue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">delayedQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"delayedQueue"</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建延迟交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">CustomExchange <span class="title">customExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        args.put(<span class="string">"x-delayed-type"</span>, <span class="string">"direct"</span>);</span><br><span class="line">        <span class="comment">//参数二为类型：必须是x-delayed-message</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomExchange(<span class="string">"delayed-Exchange"</span>, <span class="string">"x-delayed-message"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  绑定队列到交换器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">binding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayedQueue()).to(customExchange()).with(<span class="string">"delayedQueue"</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * delayed消息生产着</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GMaya</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dateTime</span> 2020/4/17 14:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelaySender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"生产者===订单号：&#123;&#125;"</span>, msg);</span><br><span class="line">        <span class="comment">// 这里把消息生产出来，指定交换机和queue</span></span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">"delayed-Exchange"</span>, <span class="string">"delayedQueue"</span>, msg, <span class="keyword">new</span> MessagePostProcessor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException </span>&#123;</span><br><span class="line">                MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">                <span class="comment">// 这里是延迟时间，单位ms，这里延迟10s</span></span><br><span class="line">                messageProperties.setHeader(<span class="string">"x-delay"</span>,<span class="number">10000</span>);</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GMaya</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dateTime</span> 2020/4/17 14:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"delayedQueue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderMsg</span><span class="params">(String msg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"消费者===订单号：&#123;&#125;"</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在HelloController中注入调用<br>启动项目访问测试<br><a href="http://localhost:8088/hello?msg=hello,delay" target="_blank" rel="noopener">http://localhost:8088/hello?msg=hello,delay</a><br><img data-src="https://img-blog.csdnimg.cn/20200417144124808.png" alt=""><br>完美延迟！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用RabbitMQ两种延迟消息方法，</p><ol><li>通过消息过期后进入死信交换器，再由交换器转发到延迟消费队列，实现延迟功能</li><li>使用 rabbitmq-delayed-message-exchange 插件实现延迟功能。<br>如果版本合适，第二种方法比第一个简单点，没那么绕。。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/17/HimachalFalls_ZH-CN2187203976_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://gmaya.top/categories/Java/"/>
    
    
      <category term="RabbitMQ" scheme="https://gmaya.top/tags/RabbitMQ/"/>
    
      <category term="Linux" scheme="https://gmaya.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>记一次优化我的个人博客</title>
    <link href="https://gmaya.top/2020/20200414-2/"/>
    <id>https://gmaya.top/2020/20200414-2/</id>
    <published>2020-04-14T06:32:14.000Z</published>
    <updated>2020-04-14T06:35:39.669Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/13/SneezeSpring_ZH-CN1577114008_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>优化一下自己的博客访问速度等！不要求画面多么炫酷，但是，必须要快！快！！<br>我的博客：<a href="https://gmaya.top">https://gmaya.top</a>欢迎访问哟！</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>话不多说，先看效果<br>优化前：<br><img data-src="https://img-blog.csdnimg.cn/20200414142404240.png" alt="优化前"><br>优化后：<br><img data-src="https://img-blog.csdnimg.cn/2020041414265240.png" alt="优化后"></p><h2 id="Hexo内部优化"><a href="#Hexo内部优化" class="headerlink" title="Hexo内部优化"></a>Hexo内部优化</h2><p>我的个人博客站点使用hexo搭建，使用next模板。<br>模板配置文件搜索：motion<br>enable：是否开启页面动画，就是刚进来有没有那个慢吞吞的特效<br>async：是否开启异步加载，就是你的页面内容和特效是一起加载的。<br><img data-src="https://img-blog.csdnimg.cn/20200414141036404.png" alt=""></p><h2 id="Nginx优化访问"><a href="#Nginx优化访问" class="headerlink" title="Nginx优化访问"></a>Nginx优化访问</h2><p>我的博客静态页面是通过Nginx代理的</p><h3 id="修改worker-connections"><a href="#修改worker-connections" class="headerlink" title="修改worker_connections"></a>修改worker_connections</h3><p>默认是1024，相对而言扩大5倍，根据自己服务器决定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    worker_connections  <span class="number">5024</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改http配置"><a href="#修改http配置" class="headerlink" title="修改http配置"></a>修改http配置</h3><p>需要哪个就加上哪个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">    #                  '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">    #                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"># 关闭日志</span><br><span class="line">access_log      off;</span><br><span class="line"># 隐藏响应头中的有关操作系统和web server（Nginx）版本号的信息，这样对于安全性是有好处的。</span><br><span class="line">    server_tokens   off;</span><br><span class="line">    sendfile        on;</span><br><span class="line"># 等数据包累计到一定大小发送，启用 sendfile 生效</span><br><span class="line">    tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line"># 开启gzip</span><br><span class="line">    gzip  on;</span><br><span class="line"># 启用gzip压缩的最小文件；小于设置值的文件将不会被压缩</span><br><span class="line">    gzip_min_length <span class="number">1</span>k;</span><br><span class="line"># gzip 压缩级别 1-10</span><br><span class="line">    gzip_comp_level <span class="number">2</span>;</span><br><span class="line"># 禁用IE 6 gzip</span><br><span class="line">gzip_disable <span class="string">"MSIE [1-6]\."</span>;</span><br><span class="line">gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php;</span><br><span class="line"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启https访问"><a href="#开启https访问" class="headerlink" title="开启https访问"></a>开启https访问</h3><p>不喜欢网站一直显示不安全。<br>如果是http请求，将转发到https</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  gmaya.top;</span><br><span class="line">    rewrite ^(.*)$ https:<span class="comment">//$host:443/$1 permanent;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态资源缓存"><a href="#静态资源缓存" class="headerlink" title="静态资源缓存"></a>静态资源缓存</h3><p>如果不是https，直接把内容加到80端口即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">  server &#123;</span><br><span class="line">      listen       <span class="number">443</span> ssl;</span><br><span class="line">      server_name  gmaya.top;</span><br><span class="line"># 添加自己的证书</span><br><span class="line">      ssl_certificate      xxx.crt;</span><br><span class="line">      ssl_certificate_key  xxx.key;</span><br><span class="line"></span><br><span class="line">      ssl_session_cache    shared:SSL:<span class="number">1</span>m;</span><br><span class="line">      ssl_session_timeout  <span class="number">5</span>m;</span><br><span class="line"></span><br><span class="line">      ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">      ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">location ~* \.(css|js|ico|gif|jpg|jpeg|png)$ &#123;</span><br><span class="line"># 同上，通配所有以.css/.js/...结尾的请求 </span><br><span class="line">access_log off; </span><br><span class="line">#忽略头部禁止缓存申明，类似与CDN的强制缓存功能</span><br><span class="line">proxy_ignore_headers <span class="string">"Cache-Control"</span> <span class="string">"Expires"</span> <span class="string">"Set-Cookie"</span>;</span><br><span class="line"># 开启缓存，时间864000秒，</span><br><span class="line">add_header Cache-Control <span class="string">"public,max-age=864000"</span>;</span><br><span class="line">root   C:\dev\blog;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">location ~* \.(html|xml)$ &#123;</span><br><span class="line">          access_log off;</span><br><span class="line">          # max-age&lt;=0 时向server发送http请求确认 ,该资源是否有修改, 有的话 返回200 , 无的话 返回304。</span><br><span class="line">          add_header Cache-Control no-cache;</span><br><span class="line">root   C:\dev\blog;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">access_log off;</span><br><span class="line">          root   C:\dev\blog;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我博客上还有很多外链，哎，懒得换咯！（如果有一天外链挂了，再迁移过来。）</p><p>虽然一天到晚，总浏览量还不到20，哈哈。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/13/SneezeSpring_ZH-CN1577114008_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="优化" scheme="https://gmaya.top/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="Nginx" scheme="https://gmaya.top/tags/Nginx/"/>
    
      <category term="优化" scheme="https://gmaya.top/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Linux下Nginx的入门学习记录</title>
    <link href="https://gmaya.top/2020/20200414/"/>
    <id>https://gmaya.top/2020/20200414/</id>
    <published>2020-04-14T01:00:00.000Z</published>
    <updated>2020-04-14T01:03:23.379Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/14/BWFlipper_ZH-CN1813139386_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前两篇文章已经把环境等都安装完了。</p><h2 id="反向代理demo1"><a href="#反向代理demo1" class="headerlink" title="反向代理demo1"></a>反向代理demo1</h2><p>进入tomcat/webapps<br>新建java文件夹，里面放入一个html<br>访问效果<br><a href="http://192.168.21.129:8080/java/index.html" target="_blank" rel="noopener">http://192.168.21.129:8080/java/index.html</a><br><img data-src="https://img-blog.csdnimg.cn/20200413143633806.png" alt=""><br>一般情况下都是直接访问域名+路径，没有端口号的。这就该nginx上场了<br>修改nginx配置<br>进入conf文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">           proxy_pass http:<span class="comment">//127.0.0.1:8080;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后重启nginx</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><p>访问<a href="http://192.168.21.129/java/index.html" target="_blank" rel="noopener">http://192.168.21.129/java/index.html</a><br>完美实现！</p><h2 id="反向代理demo2"><a href="#反向代理demo2" class="headerlink" title="反向代理demo2"></a>反向代理demo2</h2><p>复制一个tomcat，然后修改端口为8081</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r tomcat tomcat8081</span><br></pre></td></tr></table></figure><p>修改tomcat8081的端口，进入conf文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi server.xml</span><br></pre></td></tr></table></figure><p>直接输入/8080搜索<br>将8080 修改为8081<br><img data-src="https://img-blog.csdnimg.cn/20200413150727257.png" alt=""><br>关闭端口 8005  修改为  8006.<br><img data-src="https://img-blog.csdnimg.cn/20200413152934484.png" alt=""><br>修改一下此tomcat/webapps的文件<br>将之前的java/inde.html,修改为gmaya，内容也修改一下，用于区别。<br>访问不了，不要忘记开启8081端口哟<br>最终为：<br><a href="http://192.168.21.129:8080/java/index.html" target="_blank" rel="noopener">http://192.168.21.129:8080/java/index.html</a><br><a href="http://192.168.21.129:8081/gmaya/index.html" target="_blank" rel="noopener">http://192.168.21.129:8081/gmaya/index.html</a></p><p>修改nginx配置<br><img data-src="https://img-blog.csdnimg.cn/20200413153439872.png" alt=""><br>重启，访问看效果<br><img data-src="https://img-blog.csdnimg.cn/20200413154331962.png" alt=""></p><h2 id="Nginx-配置-负载均衡"><a href="#Nginx-配置-负载均衡" class="headerlink" title="Nginx 配置-负载均衡"></a>Nginx 配置-负载均衡</h2><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>还是上面的两个tomcat，直接修改nginx</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream myserver &#123;</span><br><span class="line">        server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span>;</span><br><span class="line">        server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8081</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http:<span class="comment">//myserver;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认轮询的方式，每次打开新窗口，8080和8081会交替出现。<br>提示：修改webapps/ROOR下index文件会看的效果更明显<br><img data-src="https://img-blog.csdnimg.cn/20200413160258481.png" alt=""></p><h3 id="Nginx-分配策略："><a href="#Nginx-分配策略：" class="headerlink" title="Nginx 分配策略："></a>Nginx 分配策略：</h3><ol><li>轮询（默认） 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除</li><li>权重，默认1，权重越高被分配的客户端越多 指定轮询几率，weight 和访问比率成正比。比如一台服务器性能好，一台不好，那就分配性能好的多一点<br><img data-src="https://img-blog.csdnimg.cn/20200413160839814.png" alt=""></li><li>ip_hash 每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。<br><img data-src="https://img-blog.csdnimg.cn/20200413161216835.png" alt=""></li><li>fair（第三方） 按后端服务器的响应时间来分配请求，响应时间短的优先分配。</li></ol><h2 id="Nginx-高可用"><a href="#Nginx-高可用" class="headerlink" title="Nginx 高可用"></a>Nginx 高可用</h2><p>tomcat搞了多个，也就是咱们web服务器搞了集群，不用担心某个tomcat挂了。<br>但是现在只有一台Nginx，如果Nginx挂了，也是gg<br>所以我们需要两台以上Nginx来实现故障转移和高可用。</p><h3 id="keepalived简介"><a href="#keepalived简介" class="headerlink" title="keepalived简介"></a>keepalived简介</h3><blockquote><p>Keepalived的作用是检测服务器的状态，如果有一台web服务器宕机，或工作出现故障，Keepalived将检测到，并将有故障的服务器从系统中剔除，同时使用其他服务器代替该服务器的工作，当服务器工作正常后Keepalived自动将服务器加入到服务器群中，这些工作全部自动完成，不需要人工干涉，需要人工做的只是修复故障的服务器。</p></blockquote><p>安装keepalived</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install keepalived -y</span><br></pre></td></tr></table></figure><p>查看网卡ifconfig<br>如果ifconfig使用不了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install net-tools</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200413164500176.png?" alt=""><br>CentOS7里面的网卡名称默认不再是eth0，而是ens33</p><p>我没有那么多服务器，所以我是使用的虚拟机。做到这一步，然后克隆一个一模一样的。<br>一个主机为：192.168.21.129<br>一个从机为：192.168.21.130</p><h3 id="修改主从keepalived配置"><a href="#修改主从keepalived配置" class="headerlink" title="修改主从keepalived配置"></a>修改主从keepalived配置</h3><h4 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#主机</span><br><span class="line">#检测脚本</span><br><span class="line">vrrp_script chk_http_port &#123;</span><br><span class="line">    script "/usr/local/src/check_nginx.sh" #心跳执行的脚本，检测nginx是否启动</span><br><span class="line">    interval 2                          #（检测脚本执行的间隔，单位是秒）</span><br><span class="line">    weight 2                            #权重</span><br><span class="line">&#125;</span><br><span class="line">#vrrp 实例定义部分</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER            # 指定keepalived的角色，MASTER为主，BACKUP为从</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">ens33</span>         # 当前进行<span class="title">vrrp</span>通讯的网络接口卡(当前<span class="title">centos</span>的网卡) 用<span class="title">ifconfig</span>查看你具体的网卡</span></span><br><span class="line"><span class="class">    <span class="title">virtual_router_id</span> 52    # 虚拟路由编号，主从要一直</span></span><br><span class="line"><span class="class">    <span class="title">priority</span> 100            # 优先级，数值越大，获取处理请求的优先级越高</span></span><br><span class="line"><span class="class">    <span class="title">advert_int</span> 1            # 检查间隔，默认为1<span class="title">s</span>(<span class="title">vrrp</span>组播周期秒数)</span></span><br><span class="line"><span class="class">    #授权访问</span></span><br><span class="line"><span class="class">    <span class="title">authentication</span> </span>&#123;</span><br><span class="line">        auth_type PASS #设置验证类型和密码，MASTER和BACKUP必须使用相同的密码才能正常通信</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_http_port            #（调用检测脚本）</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.21.133            # 定义虚拟ip(VIP)，可多设，每行一个</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="从机"><a href="#从机" class="headerlink" title="从机"></a>从机</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#从机</span><br><span class="line">#检测脚本</span><br><span class="line">vrrp_script chk_http_port &#123;</span><br><span class="line">    script "/usr/local/src/check_nginx.sh" #心跳执行的脚本，检测nginx是否启动</span><br><span class="line">    interval 2                          #（检测脚本执行的间隔，单位是秒）</span><br><span class="line">    weight 2                            #权重</span><br><span class="line">&#125;</span><br><span class="line">#vrrp 实例定义部分</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP            # 指定keepalived的角色，MASTER为主，BACKUP为从</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">ens33</span>         # 当前进行<span class="title">vrrp</span>通讯的网络接口卡(当前<span class="title">centos</span>的网卡) 用<span class="title">ifconfig</span>查看你具体的网卡</span></span><br><span class="line"><span class="class">    <span class="title">virtual_router_id</span> 52    # 虚拟路由编号，主从要一直</span></span><br><span class="line"><span class="class">    <span class="title">priority</span> 99            # 优先级，数值越大，获取处理请求的优先级越高</span></span><br><span class="line"><span class="class">    <span class="title">advert_int</span> 1            # 检查间隔，默认为1<span class="title">s</span>(<span class="title">vrrp</span>组播周期秒数)</span></span><br><span class="line"><span class="class">    #授权访问</span></span><br><span class="line"><span class="class">    <span class="title">authentication</span> </span>&#123;</span><br><span class="line">        auth_type PASS #设置验证类型和密码，MASTER和BACKUP必须使用相同的密码才能正常通信</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_http_port            #（调用检测脚本）</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.21.133           # 定义虚拟ip(VIP)，可多设，每行一个</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检测nginx脚本"><a href="#检测nginx脚本" class="headerlink" title="检测nginx脚本"></a>检测nginx脚本</h4><p>在/usr/local/src/check_nginx.sh路径创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#检测nginx是否启动了</span><br><span class="line">A=`ps -C nginx --no-header |wc -l`</span><br><span class="line">if [ $A -eq 0 ];then    #如果nginx没有启动就启动nginx</span><br><span class="line">      systemctl start nginx                #重启nginx</span><br><span class="line">      if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then    #nginx重启失败，则停掉keepalived服务，进行VIP转移</span><br><span class="line">              killall keepalived</span><br><span class="line">      fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>修改文件访问权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">775</span> check_nginx.sh</span><br></pre></td></tr></table></figure><p>启动主从tomcat，nginx<br>启动主从keepalived</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start keepalived.service</span><br></pre></td></tr></table></figure><p>重启keepalived命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service keepalived restart</span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>如果启动<a href="http://192.168.21.133/" target="_blank" rel="noopener">http://192.168.21.133/</a> 发现访问不了，可能影响的原因有</p><ol><li>默认的global_defs配置中 ，将vrrp_strict注释！<br><img data-src="https://img-blog.csdnimg.cn/20200413181812875.png" alt=""></li><li>定义的virtual_ipaddress虚拟ip，要和自己本身的虚拟机ip段一样，比如：我的虚拟机ip为：<br><a href="http://192.168.21.130/" target="_blank" rel="noopener">http://192.168.21.130/</a> ，<a href="http://192.168.21.129/" target="_blank" rel="noopener">http://192.168.21.129/</a> ； 那么我的虚拟ip 也在<a href="http://192.168.21.*/" target="_blank" rel="noopener">http://192.168.21.*/</a> 范围内，我刚开始配置的192.168.200.100，就一直ping不通，改成192.168.21.133，解决。<br><img data-src="https://img-blog.csdnimg.cn/2020041318223412.png" alt=""></li><li>virtual_router_id 默认的是51， 可以修改成52，然后重启一下看看。</li><li>priority 主从的优先级不一样。</li></ol><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>现在已经能通过虚拟ip访问了， 现在直接把主机关闭。<br>再次访问，发现还是可以访问。说明咱们的高可用ok了。</p><p>如果发现检测nginx脚本，中的启动命令不能够直接启动Nginx，所以还要把自己服务器上的<br>systemctl start nginx 配置一下。</p><h2 id="Nginx优化"><a href="#Nginx优化" class="headerlink" title="Nginx优化"></a>Nginx优化</h2><blockquote><p>Nginx默认采用多进程工作方式，Nginx启动后，会运行一个master进程和多个worker进程。其中master充当整个进程组与用户的交互接口，同时对进程进行监护，管理worker进程来实现重启服务、平滑升级、更换日志文件、配置文件实时生效等功能。worker用来处理基本的网络事件，worker之间是平等的，他们共同竞争来处理来自客户端的请求</p></blockquote><h3 id="调整worker-processes"><a href="#调整worker-processes" class="headerlink" title="调整worker_processes"></a>调整worker_processes</h3><p><strong>worker 数和服务器的 cpu 数相等是最为适宜</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">默认：worker_processes: <span class="number">1</span></span><br><span class="line">调大：worker_processes: CPU核心数，(双核<span class="number">4</span>线程，可以设置为<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="最大化worker-connections"><a href="#最大化worker-connections" class="headerlink" title="最大化worker_connections"></a>最大化worker_connections</h3><p><strong>worker_processes与worker_connections 设置好合适大小，可以提示nginx处理性能，非常重要。</strong><br>数字越大，能同时处理的连接越多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">默认：worker_connections: <span class="number">1024</span></span><br><span class="line">调大：worker_connections: <span class="number">100000</span>，（调大到<span class="number">10</span>万连接）</span><br></pre></td></tr></table></figure><p>connections不是随便设置的，而是与两个指标有重要关联，一是内存，二是操作系统级别的“进程最大可打开文件数”。<br>具体可以翻阅资料查看。不再絮叨了。</p><h3 id="启用Gzip压缩"><a href="#启用Gzip压缩" class="headerlink" title="启用Gzip压缩"></a>启用Gzip压缩</h3><p>压缩文件大小，减少了客户端http的传输带宽，因此提高了页面加载速度</p><h3 id="为静态文件启用缓存"><a href="#为静态文件启用缓存" class="headerlink" title="为静态文件启用缓存"></a>为静态文件启用缓存</h3><p>根据具体情况区别要不要开启</p><h3 id="禁用access-logs"><a href="#禁用access-logs" class="headerlink" title="禁用access_logs"></a>禁用access_logs</h3><p>访问日志记录，它记录每个nginx请求，因此消耗了大量CPU资源，从而降低了nginx性能</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/14/BWFlipper_ZH-CN1813139386_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://gmaya.top/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://gmaya.top/tags/Linux/"/>
    
      <category term="Nginx" scheme="https://gmaya.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装Nginx</title>
    <link href="https://gmaya.top/2020/20200413-3/"/>
    <id>https://gmaya.top/2020/20200413-3/</id>
    <published>2020-04-13T06:20:11.000Z</published>
    <updated>2020-04-13T06:28:53.390Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/13/RapaNuiFestival_ZH-CN1417623441_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇安装完jdk，tomcat 就在来一个Nginx。</p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>进入你想要安装的目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br></pre></td></tr></table></figure><p>创建nginx文件夹</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir nginx</span><br></pre></td></tr></table></figure><p>进入nginx目录下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nginx/</span><br></pre></td></tr></table></figure><p>下载nginx<br>在线下载或者自己下载好然后上传过来。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx<span class="literal">-1</span>.<span class="number">16.1</span>.tar.gz</span><br></pre></td></tr></table></figure><p>提示: 如果你没有wget,请先安装wget</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="literal">-y</span> install wget</span><br></pre></td></tr></table></figure><p>安装所需的插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc c++</span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><blockquote><p>用于编译c、c++代码的GCC；<br>用c语言编写的正则表达式函数库Pcre(使用rewrite模块)；<br>用于数据压缩的函式库的Zlib；<br>安全套接字层密码库OpenSSL（启用SSL支持）</p></blockquote><p>解压，编译<br>按照顺序执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-<span class="number">1.16</span><span class="number">.1</span>.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-<span class="number">1.16</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><h2 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h2><p><strong>启动</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd sbin/</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure><p><strong>停用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure><p><strong>重启</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><p>检查修改的nginx.conf配置是否正确</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -t</span><br></pre></td></tr></table></figure><p>启动完之后，浏览器访问<a href="http://192.168.21.129/" target="_blank" rel="noopener">http://192.168.21.129/</a><br>如果没有开启80端口，是不行的<br>开启80端口<br>我使用的是centos7<br>加入80规则<br>–permanent #永久生效，没有此参数设置，重启后会失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=<span class="keyword">public</span> --add-port=<span class="number">80</span>/tcp --permanent</span><br></pre></td></tr></table></figure><p>重启防火墙</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>刷新页面<a href="http://192.168.21.129/" target="_blank" rel="noopener">http://192.168.21.129/</a><br><img data-src="https://img-blog.csdnimg.cn/20200413141903835.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/13/RapaNuiFestival_ZH-CN1417623441_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://gmaya.top/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://gmaya.top/tags/Linux/"/>
    
      <category term="Nginx" scheme="https://gmaya.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装Tomcat</title>
    <link href="https://gmaya.top/2020/20200413-2/"/>
    <id>https://gmaya.top/2020/20200413-2/</id>
    <published>2020-04-13T05:45:11.000Z</published>
    <updated>2020-04-13T05:47:11.558Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/13/CorsicaHeart_ZH-CN2795615037_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇安装完jdk，就在来一个Tomcat。</p><h2 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h2><p>进入你想要安装的目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br></pre></td></tr></table></figure><p>创建tomcat文件夹</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir tomcat</span><br></pre></td></tr></table></figure><p>进入tomcat目录下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd tomcat/</span><br></pre></td></tr></table></figure><p>下载tomcat 8<br>在线下载或者自己下载好然后上传过来。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirror.bit.edu.cn/apache/tomcat/tomcat<span class="literal">-8</span>/v8.<span class="number">5.54</span>/bin/apache<span class="literal">-tomcat</span><span class="literal">-8</span>.<span class="number">5.54</span>.tar.gz</span><br></pre></td></tr></table></figure><p>提示: 如果你没有wget,请先安装wget</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="literal">-y</span> install wget</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="literal">-zxvf</span> apache<span class="literal">-tomcat</span><span class="literal">-8</span>.<span class="number">5.54</span>.tar.gz</span><br></pre></td></tr></table></figure><p>开启默认8080端口<br>我使用的是centos7<br>加入8080 规则<br>–permanent #永久生效，没有此参数设置，重启后会失效。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall<span class="literal">-cmd</span> -<span class="literal">-zone</span>=public -<span class="literal">-add</span><span class="literal">-port</span>=<span class="number">8080</span>/tcp -<span class="literal">-permanent</span></span><br></pre></td></tr></table></figure><p>重启防火墙</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall<span class="literal">-cmd</span> -<span class="literal">-reload</span></span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200413134305824.png" alt=""></p><p>启动</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/startup.sh</span><br></pre></td></tr></table></figure><p>浏览器访问： <a href="http://192.168.21.129:8080/" target="_blank" rel="noopener">http://192.168.21.129:8080/</a><br><img data-src="https://img-blog.csdnimg.cn/2020041313435613.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/13/CorsicaHeart_ZH-CN2795615037_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://gmaya.top/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://gmaya.top/tags/Linux/"/>
    
      <category term="Tomcat" scheme="https://gmaya.top/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装jdk1.8</title>
    <link href="https://gmaya.top/2020/20200413/"/>
    <id>https://gmaya.top/2020/20200413/</id>
    <published>2020-04-13T05:09:11.000Z</published>
    <updated>2020-04-13T05:44:59.674Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/13/EastereggsBerlin_ZH-CN7293755224_1920x1080.jpg" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直都想写一遍这个，虽然不是经常用到。这次准备搞一下Nginx,所以就从0开始，记录一下。</p><h2 id="安装jdk1-8"><a href="#安装jdk1-8" class="headerlink" title="安装jdk1.8"></a>安装jdk1.8</h2><p>进入你想要安装的目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br></pre></td></tr></table></figure><p>创建jdk文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir jdk1<span class="number">.8</span></span><br></pre></td></tr></table></figure><p>进入jdk目录下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd jdk1<span class="number">.8</span>/</span><br></pre></td></tr></table></figure><p>下载jdk1.8</p><p>在线下载或者自己下载好然后上传过来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate --no-cookies --header <span class="string">"Cookie: oraclelicense=accept-securebackup-cookie"</span> http:<span class="comment">//download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz</span></span><br></pre></td></tr></table></figure><p>耐心等待。。。<br><img data-src="https://img-blog.csdnimg.cn/20200413112955686.png" alt=""><br>解压</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-<span class="number">8</span>u131-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>先找到你的jdk安装目录记录一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/jdk1<span class="number">.8</span>/jdk1<span class="number">.8</span><span class="number">.0_131</span></span><br></pre></td></tr></table></figure><p>添加环境变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>输入a，在文本最后面加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1<span class="number">.8</span>/jdk1<span class="number">.8</span><span class="number">.0_131</span></span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><p>按 esc，然后：wq 保存退出。<br>加载环境变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>查看版本号，看是否安装成功！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200413130521190.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/13/EastereggsBerlin_ZH-CN7293755224_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://gmaya.top/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://gmaya.top/tags/Linux/"/>
    
      <category term="jdk" scheme="https://gmaya.top/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>分享一下Typora工具</title>
    <link href="https://gmaya.top/2020/20200411/"/>
    <id>https://gmaya.top/2020/20200411/</id>
    <published>2020-04-11T13:11:11.000Z</published>
    <updated>2020-04-11T13:14:30.833Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://s1.wailian.download/2020/04/11/SeventeenSolstice_ZH-CN4901756341_1920x1080.jpg" alt=""></p><a id="more"></a><p>分享 一个自己正在使用的工具</p><blockquote><p>Typora 是一款支持实时预览的 Markdown 文本编辑器。</p></blockquote><p>Typora官网<a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a><br>简直是编辑博客的不二之选！免费免费免费！！！<br>同时你也可以编写文档，编写简历，支持导出多种模式。太香了<br><img data-src="https://img-blog.csdnimg.cn/20200411210630663.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;https://s1.wailian.download/2020/04/11/SeventeenSolstice_ZH-CN4901756341_1920x1080.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://gmaya.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://gmaya.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
