{"meta":{"title":"GMaya","subtitle":"生命不止，奋斗不息。","description":"一分耕耘，一分收获。","author":"GMaya","url":"https://gmaya.top","root":"/"},"pages":[{"title":"友链","date":"2020-01-01T04:39:04.000Z","updated":"2020-04-14T07:26:55.881Z","comments":true,"path":"links/index.html","permalink":"https://gmaya.top/links/index.html","excerpt":"","text":"友链须知 原创博客、技术博客 请确定链接有效，无不良信息 每月保持更新 添加本站后请发送邮件gmaya@qq.com（推荐）或评论。学习的路还很长，共同进步！ 博客名称：GMaya 头像链接：https://gmaya.top/images/headpic.jpg 博客地址：https://gmaya.top 个人说明：一分耕耘，一分收获。"},{"title":"标签","date":"2020-01-01T04:39:04.000Z","updated":"2020-03-11T03:27:39.167Z","comments":false,"path":"tags/index.html","permalink":"https://gmaya.top/tags/index.html","excerpt":"","text":""},{"title":"简单却不平凡","date":"2019-12-26T07:35:07.000Z","updated":"2020-04-14T07:23:30.824Z","comments":true,"path":"about/index.html","permalink":"https://gmaya.top/about/index.html","excerpt":"","text":"个人介绍 杭漂在外的Java后端攻城狮。爱听歌，爱上网，爱新技术，爱折腾，爱钻研，爱简约。 解决不了BUG ，就解决发现BUG的人。 – 鲁迅 联系方式： 邮箱：gmaya@qq.com 博客介绍 不要求博客多么炫酷，不要求多么优秀，不要求很多访问。 但，访问速度必须快，页面必须整洁（洁癖），代码必须对齐。 如果不把经历过的错误以及解决办法记录下来，时隔一年半载，再次遇到，大几率还是面向百度编程。。 好记性不如烂笔头，自己亲手搭建个博客，亲手写一遍，亲手再整理一遍，我觉得经历的越多，时间越久，收获就更大！ 期待五年后的我再次看自己的个人博客会有很多感触。"},{"title":"分类","date":"2020-01-01T04:39:04.000Z","updated":"2020-03-11T03:25:48.154Z","comments":false,"path":"categories/index.html","permalink":"https://gmaya.top/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Spring Boot Admin 监控","slug":"20200509","date":"2020-05-09T07:03:11.000Z","updated":"2020-05-09T07:03:38.877Z","comments":true,"path":"2020/20200509/","link":"","permalink":"https://gmaya.top/2020/20200509/","excerpt":"","text":"简介 Spring Boot Admin 用于监控基于 Spring Boot 的应用，它是在 Spring Boot Actuator 的基础上提供简洁的可视化 WEB UI。Spring Boot Admin 提供了很多功能，如显示 name、id 和 version，显示在线状态，Loggers 的日志级别管理，Threads 线程管理，Environment 管理等。 具体有什么好处，有什么作用，官网说的很清楚。github地址 spring boot amdin 的服务端新增项目gmaya-springbootadmin。作为spring boot amdin 的服务端 pom文件新增pom文件 123456789&lt;dependency&gt; &lt;groupId&gt;de.codecentric&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-admin-starter-server&lt;/artifactId&gt; &lt;version&gt;2.2.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; 启动类123@SpringBootApplication@EnableDiscoveryClient@EnableAdminServer 配置文件修改application.yml 123456789101112131415161718192021222324server: port: 9100spring: application: name: gmaya-springbootadmineureka: client: service-url: defaultZone: http://localhost:8000/eureka/ healthcheck: enabled: true # 开启健康检查# 监控management: endpoints: web: exposure: # 通过HTTP公开所有的端点， 默认是info,health include: '*' endpoint: health: # 显示完整信息，#默认是never（简要信息） show-details: always 因为是使用的Eureka注册中心，所以不需要单独客户端了， 直接在想要监控的客户端直接暴露端点即可。 客户端修改比如此时，我想要监控gmaya-wepapi-admin，gmaya-service-admin只需要在这两个项目的配置类新增 1234567891011# 监控management: endpoints: web: exposure: # 通过HTTP公开所有的端点， 默认是info,health include: '*' endpoint: health: # 显示完整信息，#默认是never（简要信息） show-details: always 查看效果启动注册中心，admin服务端，两个客户端。 注册中心页面 spring boot admin 页面点进去，可以查看服务的详细信息 添加登录页面在spring boot amdin 服务端修改 可参考官方示例 pom新增 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&lt;/dependency&gt; 配置文件 1234567891011121314151617spring: application: name: gmaya-springbootadmin security: user: name: \"gmaya\" password: \"gmaya\"eureka: client: service-url: defaultZone: http://localhost:8000/eureka/ healthcheck: enabled: true # 开启健康检查 instance: metadata-map: user.name: $&#123;spring.security.user.name&#125; user.password: $&#123;spring.security.user.password&#125; 新增配置类SecuritySecureConfig，直接将官方给出的示例改造一下拿过来了。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package top.gmaya.gmayaspringbootadmin.config;import org.springframework.context.annotation.Configuration;import org.springframework.http.HttpMethod;import org.springframework.security.config.Customizer;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;import org.springframework.security.web.csrf.CookieCsrfTokenRepository;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;import de.codecentric.boot.admin.server.config.AdminServerProperties;/** * spring boot admin 官网示例 * @author GMaya * @dateTime 2020/5/9 10:30 */@Configurationpublic class SecuritySecureConfig extends WebSecurityConfigurerAdapter &#123; private final String adminContextPath; public SecuritySecureConfig(AdminServerProperties adminServerProperties) &#123; this.adminContextPath = adminServerProperties.getContextPath(); &#125; @Override protected void configure(HttpSecurity http) throws Exception &#123; SavedRequestAwareAuthenticationSuccessHandler successHandler = new SavedRequestAwareAuthenticationSuccessHandler(); successHandler.setTargetUrlParameter(\"redirectTo\"); successHandler.setDefaultTargetUrl(this.adminContextPath + \"/\"); http.authorizeRequests((authorizeRequests) -&gt; authorizeRequests .antMatchers(this.adminContextPath + \"/assets/**\").permitAll() .antMatchers(this.adminContextPath + \"/login\").permitAll().anyRequest().authenticated()) .formLogin((formLogin) -&gt; formLogin.loginPage(this.adminContextPath + \"/login\") .successHandler(successHandler)) .logout((logout) -&gt; logout.logoutUrl(this.adminContextPath + \"/logout\")) .httpBasic(Customizer.withDefaults()) .csrf((csrf) -&gt; csrf.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) .ignoringRequestMatchers( new AntPathRequestMatcher(this.adminContextPath + \"/instances\", HttpMethod.POST.toString()), new AntPathRequestMatcher(this.adminContextPath + \"/instances/*\", HttpMethod.DELETE.toString()), new AntPathRequestMatcher(this.adminContextPath + \"/actuator/**\"))); &#125;&#125; 重启，查看效果 邮件通知如果服务下线，会进行邮件通知在spring boot amdin 服务端修改 pom新增 12345&lt;!--邮件通知--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&lt;/dependency&gt; 配置文件application.yml修改 123456789101112131415161718192021spring: application: name: gmaya-springbootadmin security: user: name: \"gmaya\" password: \"gmaya\" mail: # 发件人使用的qq邮箱服务 host: smtp.qq.com username: gmaya@qq.com # 授权码，不是密码，在qq邮箱设置-账号里面有生成授权码 password: ceevfekeeeeeeeee boot: admin: notify: mail: # 收件人，多个中间用,分隔 to: xxx@xxx.com # 发件人 from: gmaya@qq.com 重启服务，然后将一个客户端关闭","categories":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://gmaya.top/categories/SpringCloud/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://gmaya.top/tags/SpringBoot/"},{"name":"SpringBoot Admin","slug":"SpringBoot-Admin","permalink":"https://gmaya.top/tags/SpringBoot-Admin/"}]},{"title":"有关Druid的一些配置","slug":"20200507","date":"2020-05-07T06:07:14.000Z","updated":"2020-05-07T06:33:59.830Z","comments":true,"path":"2020/20200507/","link":"","permalink":"https://gmaya.top/2020/20200507/","excerpt":"","text":"简介 Druid 是 Java 语言中最好的数据库连接池。 Druid 能够提供强大的监控和扩展功能。 官方链接https://github.com/alibaba/druid 以下所有配置基于springboot2.2.6配置 怎么使用maven项目直接引用 123456&lt;!--阿里数据库连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.14&lt;/version&gt; &lt;/dependency&gt; Druid的一些常用配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465spring: datasource: type: com.alibaba.druid.pool.DruidDataSource druid: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://127.0.0.1:3306/gmaya?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai username: root password: root # 初始化时建立物理连接的个数 initial-size: 5 # 最大连接池数量，并不是连接池越大越好。 max-active: 10 # 最小连接池数量 min-idle: 5 # 获取连接时最大等待时间，单位毫秒。 max-wait: 60000 # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大. pool-prepared-statements: true # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 max-pool-prepared-statement-per-connection-size: 20 # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能.官方写的默认true，但是看源码里面好像是默认false test-on-borrow: false # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为false test-on-return: false # 合并多个DruidDataSource的监控数据 # 设置为true会和time-between-log-stats-millis冲突，启动项目失败 use-global-data-source-stat: false # 配置扩展插件 #监控统计用的filter:stat #日志用的filter:log4j #防御sql注入的filter:wall filters: stat,wall,slf4j # 用来检测连接是否有效的sql 必须是一个查询语句 # mysql中为 select 'x' # oracle中为 select 1 from dual validation-query: select 'x' # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 # 定时输出统计信息到日志中，并每次输出日志会导致清零（reset）连接池相关的计数器。 time-between-log-stats-millis: 300000 #验证连接的有效性,建议配置为true，不影响性能，并且保证安全性。 test-while-idle: true #1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。 #2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 time-between-eviction-runs-millis: 60000 # 连接保持空闲而不被驱逐的最小时间(连接池空闲连接的有效时间) min-evictable-idle-time-millis: 300000 # 浏览器监控页面 stat-view-servlet: # 是否启用监控页面，启用建议设置密码或白名单以保障安全 enabled: true url-pattern: '/druid/*' # IP白名单(没有配置或者为空，则允许所有访问) allow: 127.0.0.1,192.168.0.1 # IP黑名单 (存在共同时，deny优先于allow) deny: 192.168.0.1 login-username: gmaya login-password: gmaya # 配置DruidStatFilter web-stat-filter: enabled: true url-pattern: '/*' # 排除一些不必要的url，比如.js,/css/等等 exclusions: '*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*' 注意：建议配置白名单，密码访问。test-on-borrow默认值问题：官方文档解释：然而自己查看实际效果却不一样，不知道是不是我的问题。在源码中发现 12dataMap.put(\"TestOnBorrow\", this.isTestOnBorrow()); dataMap.put(\"TestOnReturn\", this.isTestOnReturn()); 12this.testOnBorrow = false;this.testOnReturn = false; 12public static final boolean DEFAULT_TEST_ON_BORROW = false;public static final boolean DEFAULT_TEST_ON_RETURN = false; 或者把这两个参数注释。启动查看页面 数据库密码加密找到maven仓库中druid 的jar包 1D:\\maven-repository\\com\\alibaba\\druid\\1.1.14 然后打开cmd输入 1java -cp druid-1.1.14.jar com.alibaba.druid.filter.config.ConfigTools 你的密码 然后得到 123privateKey:MIIBVgIBADANBgkqhkiG9w0BAQEFAASCAUAwggE8AgEAAkEAty+xzmC/4596DAoD+OI0zThfJq6P5ZdcBx+iTrBisD9ViQSwOUktzYi1o4ZiJ+Akv2rR9Q47+CpEvjH123nvQIDAQABAkEAj+IycrujfRKCNnqXbCGg/6BLfIKYG+mrKx05yzzYBz4e8R1/c1HCOn8D5YWDtKEXX5o1FKmJPHFyd0/OL8MhsQIhAP/P35Vitx7jN1B8gmgcmRhKYTgc6bVrkwNG8oLZaYr/AiEAt1IobJLPTOZffLkAY9K365IsK9Ky7a7uq4KniN8yOUMCIHWMbP41PVZ5LHrUrAvxUDxEOYZSauZNx2FTIa8U/pW7AiEArQv47MSIuuacLHfWTmSTCOQqnhN+o68FzRDAZQuLtVECIQCdBeUAddQSBtT7n32N36PWZS3oKnQ1sGVY2xCRC8o5Iw==publicKey:MFwwDQYJKoZIhvcNAQEBBQADS32sc5gv+OfegwKA/jiNM04Xyauj+WXXAcfok6wYrA/VYkEsDlJLc2ItaOGYifgJL9q0fUOO/gqRL4x0K1gJ70CAwEAAQ==password:FsnBV+3RyPMUBHjG4unvXV21Z1tC+xi19Xy5f/JSm0ktb5m17+B5fOzyDNTcFACmhx3zg/lMaFOIy0UfOA== 然后更改配置将明文密码替换 1password: gMs08dqeyRQC3fsgEvb4pgmr2W/xVDgewGJLOJFZZOm8wfsVI0397uXGIe1W0rXJQl/meyB/GhqLt82fD8kiZw== 新增密码解密，同时config.decrypt.key=上面生成的publicKey. 123456# ConfigFilter,开启密码加密功能filter: config: enabled: true# 配置参数，让ConfigFilter解密密码connection-properties: config.decrypt=true;config.decrypt.key=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAK23puqpHZjqJ7+DQkJBWKIYdc0nkSqZeLVrQtwMvRwXCRgtG5+/IKO8xhMTSGwhjglloiTiVnJ9IynvpyFVpgUCAwEAAQ==","categories":[{"name":"Java","slug":"Java","permalink":"https://gmaya.top/categories/Java/"}],"tags":[{"name":"Druid","slug":"Druid","permalink":"https://gmaya.top/tags/Druid/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://gmaya.top/tags/SpringBoot/"}]},{"title":"给个人博客添加腾讯cos存储","slug":"20200426","date":"2020-04-26T03:10:14.000Z","updated":"2020-04-26T03:13:03.275Z","comments":true,"path":"2020/20200426/","link":"","permalink":"https://gmaya.top/2020/20200426/","excerpt":"","text":"前言图片，视频等一些静态资源放到自己网站会有一定的访问延迟。 开通存储桶在控制台找到对象存储,选择和云服务器一个地方的对象存储。按照步骤一步一步创建即可。 创建用户一般都是专门创建一个用户来操作的，当然至高无上的主账号也没啥毛病。将新建的用户加上几个策略 123QcloudCOSGetServiceAccess 对象存储（COS）存储桶列表访问权限QcloudCOSFullAccess 对象存储（COS）全读写访问权限QcloudCOSDataFullControl 对象存储（COS）数据读、写、删除、列出的访问权限 然后在列表中权限管理设置上， 公有读私有写。数据读取、数据写入权限。 域名管理默认的链接一般都是https://blog-xxx.cos.ap-shanghai.myqcloud.com/imgs/MegellanicCloud_ZH-CN5132305226_1920x1080.jpg如果想要使用自己的子域名，比如：https://cos.gmaya.top/imgs/MegellanicCloud_ZH-CN5132305226_1920x1080.jpg 添加自定义域名 设置nginx的https代理 首先在DNS 解析 中 解析一个 cos 指向自己服务器ip的子域名，然后去申请一个免费的证书。 然后在域名管理里面添加自定义域名 之后修改nginx配置。因为我全站都是https的，不想因为几个图片没有https，导致全站又变成不安全的了。强迫症 12345678910111213141516171819202122232425server &#123; listen 443 ssl; server_name cos.gmaya.top; ssl on; ssl_certificate 1_cos.gmaya.top_bundle.crt; # 你的证书 ssl_certificate_key 2_cos.gmaya.top.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / &#123; access_log off; expires 30d; # 缓存30天，自己决定 root /data/www/; # 必须 proxy_pass https://blog-xxx.cos.ap-shanghai.myqcloud.com; # 你的桶路径 proxy_set_header Host $http_host; &#125; error_page 404 /404.html; &#125; 防盗链设置如果不开启防盗链，那么哪个网站都可以引用你的图片。 客户端工具在控制台直接进行下载在用户管理里面找到刚才新开的账户，然后根据API 密钥登录接口。以后上传图片就可以直接拖拽了","categories":[{"name":"cos","slug":"cos","permalink":"https://gmaya.top/categories/cos/"}],"tags":[{"name":"cos","slug":"cos","permalink":"https://gmaya.top/tags/cos/"},{"name":"存储","slug":"存储","permalink":"https://gmaya.top/tags/%E5%AD%98%E5%82%A8/"}]},{"title":"添加feign熔断降级之后启动报错","slug":"20200425","date":"2020-04-25T08:16:14.000Z","updated":"2020-04-26T03:22:39.564Z","comments":true,"path":"2020/20200425/","link":"","permalink":"https://gmaya.top/2020/20200425/","excerpt":"","text":"问题在springcloud中，我使用feign自带的Hystrix实现熔断降级，但是却报错了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.[2020-04-25 15:49:59 ERROR main] org.springframework.boot.SpringApplication - Application run failedorg.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userController': Unsatisfied dependency expressed through field 'userFacade'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'gmaya.service.admin.api.facade.UserFacade': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: No fallbackFactory instance of type class gmaya.service.admin.api.facade.factory.UserFallbackFactory found for feign client gmaya-service-admin at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:882) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) ~[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE] at top.gmaya.gmayawepapiadmin.GmayaWepapiAdminApplication.main(GmayaWepapiAdminApplication.java:15) [classes/:na]Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'gmaya.service.admin.api.facade.UserFacade': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: No fallbackFactory instance of type class gmaya.service.admin.api.facade.factory.UserFallbackFactory found for feign client gmaya-service-admin at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:178) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:101) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1818) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getObjectForBeanInstance(AbstractAutowireCapableBeanFactory.java:1266) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:260) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1515) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1472) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1253) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] ... 19 common frames omittedCaused by: java.lang.IllegalStateException: No fallbackFactory instance of type class gmaya.service.admin.api.facade.factory.UserFallbackFactory found for feign client gmaya-service-admin at org.springframework.cloud.openfeign.HystrixTargeter.getFromContext(HystrixTargeter.java:81) ~[spring-cloud-openfeign-core-2.2.2.RELEASE.jar:2.2.2.RELEASE] at org.springframework.cloud.openfeign.HystrixTargeter.targetWithFallbackFactory(HystrixTargeter.java:63) ~[spring-cloud-openfeign-core-2.2.2.RELEASE.jar:2.2.2.RELEASE] at org.springframework.cloud.openfeign.HystrixTargeter.target(HystrixTargeter.java:53) ~[spring-cloud-openfeign-core-2.2.2.RELEASE.jar:2.2.2.RELEASE] at org.springframework.cloud.openfeign.FeignClientFactoryBean.loadBalance(FeignClientFactoryBean.java:253) ~[spring-cloud-openfeign-core-2.2.2.RELEASE.jar:2.2.2.RELEASE] at org.springframework.cloud.openfeign.FeignClientFactoryBean.getTarget(FeignClientFactoryBean.java:282) ~[spring-cloud-openfeign-core-2.2.2.RELEASE.jar:2.2.2.RELEASE] at org.springframework.cloud.openfeign.FeignClientFactoryBean.getObject(FeignClientFactoryBean.java:262) ~[spring-cloud-openfeign-core-2.2.2.RELEASE.jar:2.2.2.RELEASE] at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:171) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] ... 30 common frames omittedProcess finished with exit code 1 首先先去看了几个点： 降级实现类是否加注解@Component 是否开启了Hystrix熔断支持 123feign: hystrix: enabled: true 发现都没问题。 反正是知道加上UserFallbackFactory才报错的，之前没加就没报错。 觉得是spring注入不了这个bean。然后突然想起来，之前说项目的所有包都要在springboot启动类下面或者同级。 然后我就去看了一下我的项目结构这包名不一样啊，那么我启动web项目能发现在api项目中注册的bean？注解 springbootapplication源码中解释： 自动扫描所在包及其子包，会将有注解的加入到spring容器中。 然后就在web暴露接口项目的启动类中添加 1@SpringBootApplication(scanBasePackages = &#123; \"top.gmaya.gmayawepapiadmin\", \"gmaya.service.admin.api\"&#125;) 第一个扫描自己的包，第二个扫描feign接口包 然后就启动成功了，奇怪之前不加为什么可以呢。然后看了一下，之前是@EnableFeignClients已经将接口扫描注册了。 1@EnableFeignClients(basePackages = &#123;\"gmaya.service.admin.api.facade\"&#125;) 测试启动，访问，没问题。关闭impl实现项目，访问，出现熔断，降级。 顺便测测负载均衡，默认是开启的。刚才启动的impl实现项目端口是9001，然后使用 1java -Dserver.port=9003 -jar gmaya-service-admin-impl-0.0.1-SNAPSHOT.jar server.port=9003 再次启动一个9003端口的项目。这个时候再次访问接口，发现这两个impl实现项目交替打印。因为默认负载均衡方式是轮询。","categories":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://gmaya.top/categories/SpringCloud/"}],"tags":[{"name":"问题","slug":"问题","permalink":"https://gmaya.top/tags/%E9%97%AE%E9%A2%98/"},{"name":"熔断","slug":"熔断","permalink":"https://gmaya.top/tags/%E7%86%94%E6%96%AD/"}]},{"title":"撞库、脱库和洗库","slug":"20200424","date":"2020-04-24T02:55:14.000Z","updated":"2020-04-24T02:57:58.081Z","comments":true,"path":"2020/20200424/","link":"","permalink":"https://gmaya.top/2020/20200424/","excerpt":"","text":"撞库“撞库”一般就是指黑客拿到已经泄露的用户信息，然后去各个网站进行登录，一旦你的账号密码在各个网站都一样，那么就相当于撞库成功。建议：各个网站的登录账号和密码不要一样。 脱库“拖库”就是黑客通过技术手段，盗取数据库信息的过程。建议：做防sql注入，文件上传漏洞等。 洗库“洗库”就是将得到的数据信息进行贩卖。变现。","categories":[{"name":"自我抒写","slug":"自我抒写","permalink":"https://gmaya.top/categories/%E8%87%AA%E6%88%91%E6%8A%92%E5%86%99/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://gmaya.top/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"泰山版《Java开发手册》","slug":"20200422","date":"2020-04-22T05:49:14.000Z","updated":"2020-04-22T07:27:38.865Z","comments":true,"path":"2020/20200422/","link":"","permalink":"https://gmaya.top/2020/20200422/","excerpt":"","text":"每次阿里推出最新的开发手册，自己都会去喵一眼，看一下。养成好习惯泰山版：新增5条日期时间规约；新增2条表别名sql规约；新增统一错误码规约。 官网地址：https://developer.aliyun.com/topic/java2020","categories":[{"name":"工具","slug":"工具","permalink":"https://gmaya.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://gmaya.top/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"分布式雪花算法工具类","slug":"20200421","date":"2020-04-21T03:30:14.000Z","updated":"2020-04-21T03:33:32.772Z","comments":true,"path":"2020/20200421/","link":"","permalink":"https://gmaya.top/2020/20200421/","excerpt":"","text":"SnowFlake 算法，是 Twitter 开源的分布式 id 生成算法。 SnowFlake算法的优点： 高性能高可用：生成时不依赖于数据库，完全在内存中生成。 容量大：每秒中能生成数百万的自增ID。 ID自增：存入数据库中，索引效率高。 SnowFlake算法的缺点：依赖与系统时间的一致性，如果系统时间被回调，或者改变，可能会造成id冲突或者重复。 SnowFlakeUtil工具类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137package com.gmaya.springbootrabbitmq.utils;import lombok.extern.slf4j.Slf4j;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;/** * 雪花算法 分布式 id生成工具类 * @author GMaya * @dateTime 2020/4/21 9:36 */@Slf4jpublic class SnowFlakeUtil &#123; private final long id; /** * 时间起始标记点，作为基准，一般取系统的最近时间 */ private final long epoch = 1587433423721L; /** * 机器标识位数 */ private final long workerIdBits = 10L; /** * 机器ID最大值: 1023 */ private final long maxWorkerId = -1L ^ -1L &lt;&lt; this.workerIdBits; /** * 0，并发控制 */ private long sequence = 0L; /** * 毫秒内自增位 */ private final long sequenceBits = 12L; /** * 12 */ private final long workerIdShift = this.sequenceBits; /** * 22 */ private final long timestampLeftShift = this.sequenceBits + this.workerIdBits; /** * 4095,111111111111,12位 */ private final long sequenceMask = -1L ^ -1L &lt;&lt; this.sequenceBits; /** * 记录产生时间毫秒数，判断是否是同1毫秒 */ private long lastTimestamp = -1L; /** * 传入机器id * @param id */ private SnowFlakeUtil(long id) &#123; if (id &gt; this.maxWorkerId || id &lt; 0) &#123; throw new IllegalArgumentException(String.format(\"机器id不能大于%d或小于0\", this.maxWorkerId)); &#125; this.id = id; &#125; public synchronized long nextId() &#123; // 获取当前时间毫秒数 long timestamp = timeGen(); if (this.lastTimestamp == timestamp) &#123; //如果上一个timestamp与新产生的相等，则sequence加一(最大4095) this.sequence = this.sequence + 1 &amp; this.sequenceMask; if (this.sequence == 0) &#123; // 超过最大值进行按位与，结果为0，也就是当这一毫秒序号超过最大值，就会循环等待下一毫秒 timestamp = this.tilNextMillis(this.lastTimestamp); &#125; &#125; else &#123; this.sequence = 0; &#125; // 如果时间回退，则报错或者返回-1，调用端进行判断 if (timestamp &lt; this.lastTimestamp) &#123; log.error(String.format(\"时钟回退，拒绝 %d 毫秒内生成雪花id\", (this.lastTimestamp - timestamp))); return -1; &#125; this.lastTimestamp = timestamp; // 当前时间-初始时间，然后左移timestampLeftShift。 // 将机器id左移workerIdShift // | 是按位或运算符，例如：x | y，只有当x，y都为0的时候结果才为0，其它情况结果都为1。 return timestamp - this.epoch &lt;&lt; this.timestampLeftShift | this.id &lt;&lt; this.workerIdShift | this.sequence; &#125; /** * 如果说几十年后id重复了，把机器id加1，再用几十年 */ private static SnowFlakeUtil flowIdWorker = new SnowFlakeUtil(1); public static long getSnowFlakeId() &#123; return flowIdWorker.nextId(); &#125; /** * 等待下一个毫秒的到来, 保证返回的毫秒数在参数lastTimestamp之后 */ private long tilNextMillis(long lastTimestamp) &#123; long timestamp = timeGen(); while (timestamp &lt;= lastTimestamp) &#123; timestamp = timeGen(); &#125; return timestamp; &#125; /** * 获得系统当前毫秒数 */ private static long timeGen() &#123; return System.currentTimeMillis(); &#125; public static void main(String[] args) &#123; //判断生成的记录是否有重复记录 final Map&lt;Long, Integer&gt; map = new ConcurrentHashMap(); for (int i = 0; i &lt; 100; i++) &#123; new Thread(() -&gt; &#123; for (int s = 0; s &lt; 2000; s++) &#123; long snowFlakeId = SnowFlakeUtil.getSnowFlakeId(); log.info(\"生成雪花ID=&#123;&#125;\",snowFlakeId); Integer put = map.put(snowFlakeId, 1); if (put != null) &#123; throw new RuntimeException(\"主键重复\"); &#125; &#125; &#125;).start(); &#125; &#125;&#125;","categories":[{"name":"工具","slug":"工具","permalink":"https://gmaya.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://gmaya.top/tags/%E5%B7%A5%E5%85%B7/"},{"name":"雪花算法","slug":"雪花算法","permalink":"https://gmaya.top/tags/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/"}]},{"title":"SpringBoot+RabbitMQ削峰入门","slug":"20200420","date":"2020-04-20T10:06:14.000Z","updated":"2020-04-20T10:10:44.720Z","comments":true,"path":"2020/20200420/","link":"","permalink":"https://gmaya.top/2020/20200420/","excerpt":"","text":"前言当大量的客户访问请求打到后端，去访问数据库等，瞬间会爆炸的。经过前端或者其他的方案进行限流外。还是有大量的请求，这个时候需要削峰了。 简单的削峰例子先设置小一点，然后循环往队列里面放消息，消费的时候延迟2秒 12345678910111213spring: rabbitmq: host: 192.168.21.129 port: 5672 username: guest password: guest virtual-host: / listener: type: simple simple: prefetch: 1 # 消费者每次从队列获取的消息数量 concurrency: 1 # 消费者数量 max-concurrency: 1 # 启动消费者最大数量 调用生产者 1234for (int i=0;i&lt;10;i++)&#123; // 调用消息生产者 sender.sender(msg+i);&#125; 消费者 12345@RabbitListener(queues = MQConfig.QUEUE) public void receiver(String msg) throws InterruptedException &#123; Thread.sleep(2000L); // 模拟处理需要2秒 log.info(\"消费者消费。。。。。。&#123;&#125;\", msg); &#125; 页面访问： http://localhost:8088/hello?msg=GMaya 此时消息会全部放到列队，但是会一条一条消费。简单的实现了削峰处理 调整消费者的数量 123prefetch: 1 # 消费者每次从队列获取的消息数量concurrency: 2 # 消费者数量max-concurrency: 10 # 启动消费者最大数量 此时就会有两个消费者同时去消费队列中的消息。所以这个消费者数量需要根据实际的情况去设置所能承受的一个值，也就是峰值。 重试策略如果说消费者在消费的过程中失败了，那么会一直消费，一直到成功为止。 但是也可以添加重试策略，比如失败三次就不在消费了。 1234567891011listener: type: simple simple: prefetch: 1 # 消费者每次从队列获取的消息数量 concurrency: 2 # 消费者数量 max-concurrency: 10 # 启动消费者最大数量 # 重试策略相关配置 retry: enabled: true #开启消费者重试 max-attempts: 2 #最大重试次数 initial-interval: 2000 #重试间隔时间 模拟异常 12345678@RabbitListener(queues = MQConfig.QUEUE) public void receiver(String msg) throws InterruptedException &#123; Thread.sleep(2000L); // 模拟处理需要2秒 if(\"GMaya8\".equals(msg))&#123; System.out.println(1/0); &#125; log.info(\"消费者消费。。。。。。&#123;&#125;\", msg); &#125; 此时的结果就是其他的消息被消费，但是这个GMaya8没了，失败三次之后就没了。队列中也消失了。 如何保证rabbitmq消息不丢失丢失数据场景： 生产者没有生产成功，即生产者丢失 rabbitmq丢失了 消费端丢失，即消费端没消费成功。 开启confirm回调，启动手动确定消息消费。 12345678910111213141516171819202122232425262728293031server: port: 8088spring: rabbitmq: host: 192.168.21.129 port: 5672 username: guest password: guest virtual-host: / publisher-returns: true # 实现ReturnCallback接口，如果消息从交换器发送到对应队列失败时触发 publisher-confirm-type: correlated listener: type: simple simple: acknowledge-mode: manual # 消息消费确认，可以手动确认 prefetch: 1 # 消费者每次从队列获取的消息数量 concurrency: 2 # 消费者数量 max-concurrency: 10 # 启动消费者最大数量 # 重试策略相关配置 retry: enabled: true #开启消费者重试 max-attempts: 3 #最大重试次数 initial-interval: 2000 #重试间隔时间 template: #在消息没有被路由到合适队列情况下会将消息返还给消息发布者 #当mandatory标志位设置为true时，如果exchange根据自身类型和消息routingKey无法找到一个合适的queue存储消息， # 那么broker会调用basic.return方法将消息返还给生产者;当mandatory设置为false时， # 出现上述情况broker会直接将消息丢弃;通俗的讲，mandatory标志告诉broker代理服务器至少将消息route到一个队列中， # 否则就将消息return给发送者; #: true # 启用强制信息 mandatory: true 使用交换机模式生产者 12345678910111213141516171819202122232425262728293031@Component@Slf4jpublic class Sender implements RabbitTemplate.ConfirmCallback&#123; @Autowired private RabbitTemplate rabbitTemplate; public Sender(RabbitTemplate rabbitTemplate)&#123; rabbitTemplate.setConfirmCallback(this); &#125; /** * fanout 模式 * @param msg */ public void fanoutSender(String msg) &#123; log.info(\"fanout生产者生产消息。。。。。&#123;&#125;\", msg); // 会把消息发送给 所有绑定到此交换机的全部列队；routing_key会被忽略。 CorrelationData correlationData = new CorrelationData(UUID.randomUUID().toString()); this.rabbitTemplate.convertAndSend(MQConfig.FANOUT_EXCHANGE, \"\", msg, correlationData); &#125; @Override public void confirm(CorrelationData correlationData, boolean b, String s) &#123; if(b)&#123; log.info(\"消息生产成功\"); &#125;else&#123; log.info(\"消息生产失败\"); // 可以自己写重新发送消息 &#125; &#125;&#125; 消费者 1234567891011@RabbitListener(queues = MQConfig.QUEUE_A)public void receiverA(String msg,Message message, Channel channel) throws IOException &#123; log.info(\"QUEUE_A消费者消费。。。。。。&#123;&#125;\", msg); channel.basicAck(message.getMessageProperties().getDeliveryTag(),false);&#125;@RabbitListener(queues = MQConfig.QUEUE_B)public void receiverB(String msg,Message message, Channel channel) throws IOException &#123; log.info(\"QUEUE_B消费者消费。。。。。。&#123;&#125;\", msg); channel.basicAck(message.getMessageProperties().getDeliveryTag(),false);&#125; 这个时候已经解决出现问题，倒是消息消失的情况。当处理好问题之后，重启就会重新消费","categories":[{"name":"RabbitMQ","slug":"RabbitMQ","permalink":"https://gmaya.top/categories/RabbitMQ/"}],"tags":[{"name":"RabbitMQ","slug":"RabbitMQ","permalink":"https://gmaya.top/tags/RabbitMQ/"},{"name":"削峰","slug":"削峰","permalink":"https://gmaya.top/tags/%E5%89%8A%E5%B3%B0/"}]},{"title":"给hexo博客加404公益页面","slug":"20200419","date":"2020-04-19T10:24:14.000Z","updated":"2020-04-19T10:25:25.671Z","comments":true,"path":"2020/20200419/","link":"","permalink":"https://gmaya.top/2020/20200419/","excerpt":"","text":"腾讯公益404页面，寻找丢失儿童，让大家一起关注此项公益事业！效果如：https://gmaya.top/404.html 目的：如果访问网站不存在的页面，则返回腾讯公益404页面 使用方法，新建 404.html 页面，放到主题的 source 目录下，内容如下： 123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /&gt; &lt;meta name=\"robots\" content=\"all\" /&gt; &lt;meta name=\"robots\" content=\"index,follow\"/&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\"&gt;&lt;/head&gt;&lt;body&gt; &lt;script type=\"text/plain\" src=\"https://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\"&gt; &lt;/script&gt; &lt;script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 修改nginx配置，只要访问的页面不存在则跳转到404公益页面。 在nginx.conf的443端口下添加 1error_page 404 /404.html; 重启即可","categories":[{"name":"优化","slug":"优化","permalink":"https://gmaya.top/categories/%E4%BC%98%E5%8C%96/"}],"tags":[{"name":"优化","slug":"优化","permalink":"https://gmaya.top/tags/%E4%BC%98%E5%8C%96/"}]},{"title":"win10系统hexo博客自动发布自动拉取","slug":"20200417-2","date":"2020-04-17T09:34:14.000Z","updated":"2020-04-17T09:37:35.166Z","comments":true,"path":"2020/20200417-2/","link":"","permalink":"https://gmaya.top/2020/20200417-2/","excerpt":"","text":"我之前的流程是这样发布个人博客的。 本地(win10)编写博客 本地上传博客到github 服务器（win10）通过git拉取最新代码 因为是nginx代理的，所以这个时候直接域名访问就是最新的了。 问题：每次本地上传完都需要远程控制服务器，然后手动拉取代码。 更改后实现的效果： 本地(win10)编写博客 本地上传博客到github 其实就是 本地编写完，然后 hexo s 查看没问题，然后 hexo g hexo d ，完事！ 本地（win）无需做任何修改，hexo d 只要吧博客上传到github就行。 服务器（win）做以下更改：存放博客根目录新建文件 pull.bat 名称随意里面加上一句命令 1git pull 对，就是这么简单粗暴的一个命令。 然后win系统新增任务计划点击创建任务 常规设置触发器设置看自己想法设置间隔时间，博客没那么频繁，所以一个小时拉取一次操作设置 保存！哈哈。 我服务器有点东西必须用win，没办法。 等到时候用linux在弄一个，原理应该都是这样！","categories":[{"name":"工具","slug":"工具","permalink":"https://gmaya.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"自动拉取git","slug":"自动拉取git","permalink":"https://gmaya.top/tags/%E8%87%AA%E5%8A%A8%E6%8B%89%E5%8F%96git/"},{"name":"win10","slug":"win10","permalink":"https://gmaya.top/tags/win10/"}]},{"title":"Linux下RabbitMQ另外一种延迟功能实现","slug":"20200417","date":"2020-04-17T07:00:14.000Z","updated":"2020-04-17T09:03:09.315Z","comments":true,"path":"2020/20200417/","link":"","permalink":"https://gmaya.top/2020/20200417/","excerpt":"","text":"前言前面写了使用死信对列实现了：订单下单之后 30 分钟后，用户如果没有付钱，系统需要自动取消订单。今天在研究一下另外一种rabbitmq-delayed-message-exchange插件 注意：延迟插件 rabbitmq-delayed-message-exchange 是在 RabbitMQ 3.5.7 及以上的版本才支持的，依赖 Erlang/OPT 18.0 及以上运行环境。 完整代码链接https://gitee.com/GMaya/springboot-rabbitmq 安装插件首先找到RabbitMQ插件目录我的是在 1/usr/lib/rabbitmq/lib/rabbitmq_server-3.6.15/plugins 然后下载插件https://www.rabbitmq.com/community-plugins.html下载需要的版本，我下载的是3.6.x解压之后把rabbitmq_delayed_message_exchange-20171215-3.6.x.ez文件上传到plugins目录 然后开启插件 1rabbitmq-plugins enable rabbitmq_delayed_message_exchange 查看开启的插件列表 1rabbitmq-plugins list 重启服务 集成到spring boot配置类123456789101112131415161718192021222324252627282930313233343536373839/** * 使用rabbitmq-delayed-message-exchange 构建一个的延迟队列 * @author GMaya * @dateTime 2020/4/17 14:17 */@Configurationpublic class DelayMQConfig &#123; /** * 创建Queue * @return */ @Bean public Queue delayedQueue() &#123; return new Queue(\"delayedQueue\", true); &#125; /** * 创建延迟交换机 * @return */ @Bean CustomExchange customExchange() &#123; Map&lt;String, Object&gt; args = new HashMap&lt;String, Object&gt;(); args.put(\"x-delayed-type\", \"direct\"); //参数二为类型：必须是x-delayed-message return new CustomExchange(\"delayed-Exchange\", \"x-delayed-message\", true, false, args); &#125; /** * 绑定队列到交换器 * @param queue * @param exchange * @return */ @Bean Binding binding() &#123; return BindingBuilder.bind(delayedQueue()).to(customExchange()).with(\"delayedQueue\").noargs(); &#125;&#125; 生产者123456789101112131415161718192021222324252627/** * delayed消息生产着 * @author GMaya * @dateTime 2020/4/17 14:20 */@Slf4j@Componentpublic class DelaySender &#123; @Autowired private AmqpTemplate amqpTemplate; public void sendMsg(String msg) &#123; log.info(\"生产者===订单号：&#123;&#125;\", msg); // 这里把消息生产出来，指定交换机和queue amqpTemplate.convertAndSend(\"delayed-Exchange\", \"delayedQueue\", msg, new MessagePostProcessor() &#123; @Override public Message postProcessMessage(Message message) throws AmqpException &#123; MessageProperties messageProperties = message.getMessageProperties(); // 这里是延迟时间，单位ms，这里延迟10s messageProperties.setHeader(\"x-delay\",10000); return message; &#125; &#125;); &#125;&#125; 消费者12345678910111213/** * 消费者 * @author GMaya * @dateTime 2020/4/17 14:27 */@Slf4j@Componentpublic class DelayReceiver &#123; @RabbitListener(queues = \"delayedQueue\") public void orderMsg(String msg) throws IOException &#123; log.info(\"消费者===订单号：&#123;&#125;\", msg); &#125;&#125; 测试在HelloController中注入调用启动项目访问测试http://localhost:8088/hello?msg=hello,delay完美延迟！ 总结使用RabbitMQ两种延迟消息方法， 通过消息过期后进入死信交换器，再由交换器转发到延迟消费队列，实现延迟功能 使用 rabbitmq-delayed-message-exchange 插件实现延迟功能。如果版本合适，第二种方法比第一个简单点，没那么绕。。","categories":[{"name":"Java","slug":"Java","permalink":"https://gmaya.top/categories/Java/"}],"tags":[{"name":"RabbitMQ","slug":"RabbitMQ","permalink":"https://gmaya.top/tags/RabbitMQ/"},{"name":"Linux","slug":"Linux","permalink":"https://gmaya.top/tags/Linux/"}]},{"title":"记一次优化我的个人博客","slug":"20200414-2","date":"2020-04-14T06:32:14.000Z","updated":"2020-04-14T06:35:39.669Z","comments":true,"path":"2020/20200414-2/","link":"","permalink":"https://gmaya.top/2020/20200414-2/","excerpt":"","text":"前言优化一下自己的博客访问速度等！不要求画面多么炫酷，但是，必须要快！快！！我的博客：https://gmaya.top欢迎访问哟！ 效果话不多说，先看效果优化前：优化后： Hexo内部优化我的个人博客站点使用hexo搭建，使用next模板。模板配置文件搜索：motionenable：是否开启页面动画，就是刚进来有没有那个慢吞吞的特效async：是否开启异步加载，就是你的页面内容和特效是一起加载的。 Nginx优化访问我的博客静态页面是通过Nginx代理的 修改worker_connections默认是1024，相对而言扩大5倍，根据自己服务器决定 123events &#123; worker_connections 5024;&#125; 修改http配置需要哪个就加上哪个 1234567891011121314151617181920212223242526272829303132http &#123; include mime.types; default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' # '$status $body_bytes_sent \"$http_referer\" ' # '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; # 关闭日志 access_log off; # 隐藏响应头中的有关操作系统和web server（Nginx）版本号的信息，这样对于安全性是有好处的。 server_tokens off; sendfile on; # 等数据包累计到一定大小发送，启用 sendfile 生效 tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; # 开启gzip gzip on; # 启用gzip压缩的最小文件；小于设置值的文件将不会被压缩 gzip_min_length 1k; # gzip 压缩级别 1-10 gzip_comp_level 2; # 禁用IE 6 gzip gzip_disable \"MSIE [1-6]\\.\"; gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php; # 是否在http header中添加Vary: Accept-Encoding，建议开启 gzip_vary on;&#125; 开启https访问不喜欢网站一直显示不安全。如果是http请求，将转发到https 12345server &#123; listen 80; server_name gmaya.top; rewrite ^(.*)$ https://$host:443/$1 permanent;&#125; 静态资源缓存如果不是https，直接把内容加到80端口即可 1234567891011121314151617181920212223242526272829303132333435363738 server &#123; listen 443 ssl; server_name gmaya.top;# 添加自己的证书 ssl_certificate xxx.crt; ssl_certificate_key xxx.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on;location ~* \\.(css|js|ico|gif|jpg|jpeg|png)$ &#123; # 同上，通配所有以.css/.js/...结尾的请求 access_log off; #忽略头部禁止缓存申明，类似与CDN的强制缓存功能 proxy_ignore_headers \"Cache-Control\" \"Expires\" \"Set-Cookie\"; # 开启缓存，时间864000秒， add_header Cache-Control \"public,max-age=864000\"; root C:\\dev\\blog; index index.html index.htm;&#125;location ~* \\.(html|xml)$ &#123; access_log off; # max-age&lt;=0 时向server发送http请求确认 ,该资源是否有修改, 有的话 返回200 , 无的话 返回304。 add_header Cache-Control no-cache; root C:\\dev\\blog; index index.html index.htm; &#125; location / &#123; access_log off; root C:\\dev\\blog; index index.html index.htm; &#125; &#125; 我博客上还有很多外链，哎，懒得换咯！（如果有一天外链挂了，再迁移过来。） 虽然一天到晚，总浏览量还不到20，哈哈。","categories":[{"name":"优化","slug":"优化","permalink":"https://gmaya.top/categories/%E4%BC%98%E5%8C%96/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://gmaya.top/tags/Nginx/"},{"name":"优化","slug":"优化","permalink":"https://gmaya.top/tags/%E4%BC%98%E5%8C%96/"}]},{"title":"Linux下Nginx的入门学习记录","slug":"20200414","date":"2020-04-14T01:00:00.000Z","updated":"2020-04-14T01:03:23.379Z","comments":true,"path":"2020/20200414/","link":"","permalink":"https://gmaya.top/2020/20200414/","excerpt":"","text":"前言前两篇文章已经把环境等都安装完了。 反向代理demo1进入tomcat/webapps新建java文件夹，里面放入一个html访问效果http://192.168.21.129:8080/java/index.html一般情况下都是直接访问域名+路径，没有端口号的。这就该nginx上场了修改nginx配置进入conf文件夹 1vi nginx.conf 123456server &#123; listen 80; server_name localhost; location / &#123; proxy_pass http://127.0.0.1:8080; &#125; 然后重启nginx 1./nginx -s reload 访问http://192.168.21.129/java/index.html完美实现！ 反向代理demo2复制一个tomcat，然后修改端口为8081 1cp -r tomcat tomcat8081 修改tomcat8081的端口，进入conf文件夹 1vi server.xml 直接输入/8080搜索将8080 修改为8081关闭端口 8005 修改为 8006.修改一下此tomcat/webapps的文件将之前的java/inde.html,修改为gmaya，内容也修改一下，用于区别。访问不了，不要忘记开启8081端口哟最终为：http://192.168.21.129:8080/java/index.htmlhttp://192.168.21.129:8081/gmaya/index.html 修改nginx配置重启，访问看效果 Nginx 配置-负载均衡修改配置还是上面的两个tomcat，直接修改nginx 123456789101112http &#123; upstream myserver &#123; server 127.0.0.1:8080; server 127.0.0.1:8081; &#125; server &#123; listen 80; location / &#123; proxy_pass http://myserver; &#125; &#125;&#125; 默认轮询的方式，每次打开新窗口，8080和8081会交替出现。提示：修改webapps/ROOR下index文件会看的效果更明显 Nginx 分配策略： 轮询（默认） 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除 权重，默认1，权重越高被分配的客户端越多 指定轮询几率，weight 和访问比率成正比。比如一台服务器性能好，一台不好，那就分配性能好的多一点 ip_hash 每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。 fair（第三方） 按后端服务器的响应时间来分配请求，响应时间短的优先分配。 Nginx 高可用tomcat搞了多个，也就是咱们web服务器搞了集群，不用担心某个tomcat挂了。但是现在只有一台Nginx，如果Nginx挂了，也是gg所以我们需要两台以上Nginx来实现故障转移和高可用。 keepalived简介 Keepalived的作用是检测服务器的状态，如果有一台web服务器宕机，或工作出现故障，Keepalived将检测到，并将有故障的服务器从系统中剔除，同时使用其他服务器代替该服务器的工作，当服务器工作正常后Keepalived自动将服务器加入到服务器群中，这些工作全部自动完成，不需要人工干涉，需要人工做的只是修复故障的服务器。 安装keepalived 1yum install keepalived -y 查看网卡ifconfig如果ifconfig使用不了 1yum install net-tools CentOS7里面的网卡名称默认不再是eth0，而是ens33 我没有那么多服务器，所以我是使用的虚拟机。做到这一步，然后克隆一个一模一样的。一个主机为：192.168.21.129一个从机为：192.168.21.130 修改主从keepalived配置主机1234567891011121314151617181920212223242526#主机#检测脚本vrrp_script chk_http_port &#123; script \"/usr/local/src/check_nginx.sh\" #心跳执行的脚本，检测nginx是否启动 interval 2 #（检测脚本执行的间隔，单位是秒） weight 2 #权重&#125;#vrrp 实例定义部分vrrp_instance VI_1 &#123; state MASTER # 指定keepalived的角色，MASTER为主，BACKUP为从 interface ens33 # 当前进行vrrp通讯的网络接口卡(当前centos的网卡) 用ifconfig查看你具体的网卡 virtual_router_id 52 # 虚拟路由编号，主从要一直 priority 100 # 优先级，数值越大，获取处理请求的优先级越高 advert_int 1 # 检查间隔，默认为1s(vrrp组播周期秒数) #授权访问 authentication &#123; auth_type PASS #设置验证类型和密码，MASTER和BACKUP必须使用相同的密码才能正常通信 auth_pass 1111 &#125; track_script &#123; chk_http_port #（调用检测脚本） &#125; virtual_ipaddress &#123; 192.168.21.133 # 定义虚拟ip(VIP)，可多设，每行一个 &#125;&#125; 从机1234567891011121314151617181920212223242526#从机#检测脚本vrrp_script chk_http_port &#123; script \"/usr/local/src/check_nginx.sh\" #心跳执行的脚本，检测nginx是否启动 interval 2 #（检测脚本执行的间隔，单位是秒） weight 2 #权重&#125;#vrrp 实例定义部分vrrp_instance VI_1 &#123; state BACKUP # 指定keepalived的角色，MASTER为主，BACKUP为从 interface ens33 # 当前进行vrrp通讯的网络接口卡(当前centos的网卡) 用ifconfig查看你具体的网卡 virtual_router_id 52 # 虚拟路由编号，主从要一直 priority 99 # 优先级，数值越大，获取处理请求的优先级越高 advert_int 1 # 检查间隔，默认为1s(vrrp组播周期秒数) #授权访问 authentication &#123; auth_type PASS #设置验证类型和密码，MASTER和BACKUP必须使用相同的密码才能正常通信 auth_pass 1111 &#125; track_script &#123; chk_http_port #（调用检测脚本） &#125; virtual_ipaddress &#123; 192.168.21.133 # 定义虚拟ip(VIP)，可多设，每行一个 &#125;&#125; 检测nginx脚本在/usr/local/src/check_nginx.sh路径创建 123456789#!/bin/bash#检测nginx是否启动了A=`ps -C nginx --no-header |wc -l`if [ $A -eq 0 ];then #如果nginx没有启动就启动nginx systemctl start nginx #重启nginx if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then #nginx重启失败，则停掉keepalived服务，进行VIP转移 killall keepalived fifi 修改文件访问权限 1chmod 775 check_nginx.sh 启动主从tomcat，nginx启动主从keepalived 1systemctl start keepalived.service 重启keepalived命令 1service keepalived restart 问题如果启动http://192.168.21.133/ 发现访问不了，可能影响的原因有 默认的global_defs配置中 ，将vrrp_strict注释！ 定义的virtual_ipaddress虚拟ip，要和自己本身的虚拟机ip段一样，比如：我的虚拟机ip为：http://192.168.21.130/ ，http://192.168.21.129/ ； 那么我的虚拟ip 也在http://192.168.21.*/ 范围内，我刚开始配置的192.168.200.100，就一直ping不通，改成192.168.21.133，解决。 virtual_router_id 默认的是51， 可以修改成52，然后重启一下看看。 priority 主从的优先级不一样。 测试现在已经能通过虚拟ip访问了， 现在直接把主机关闭。再次访问，发现还是可以访问。说明咱们的高可用ok了。 如果发现检测nginx脚本，中的启动命令不能够直接启动Nginx，所以还要把自己服务器上的systemctl start nginx 配置一下。 Nginx优化 Nginx默认采用多进程工作方式，Nginx启动后，会运行一个master进程和多个worker进程。其中master充当整个进程组与用户的交互接口，同时对进程进行监护，管理worker进程来实现重启服务、平滑升级、更换日志文件、配置文件实时生效等功能。worker用来处理基本的网络事件，worker之间是平等的，他们共同竞争来处理来自客户端的请求 调整worker_processesworker 数和服务器的 cpu 数相等是最为适宜 12默认：worker_processes: 1调大：worker_processes: CPU核心数，(双核4线程，可以设置为4) 最大化worker_connectionsworker_processes与worker_connections 设置好合适大小，可以提示nginx处理性能，非常重要。数字越大，能同时处理的连接越多 12默认：worker_connections: 1024调大：worker_connections: 100000，（调大到10万连接） connections不是随便设置的，而是与两个指标有重要关联，一是内存，二是操作系统级别的“进程最大可打开文件数”。具体可以翻阅资料查看。不再絮叨了。 启用Gzip压缩压缩文件大小，减少了客户端http的传输带宽，因此提高了页面加载速度 为静态文件启用缓存根据具体情况区别要不要开启 禁用access_logs访问日志记录，它记录每个nginx请求，因此消耗了大量CPU资源，从而降低了nginx性能","categories":[{"name":"Linux","slug":"Linux","permalink":"https://gmaya.top/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://gmaya.top/tags/Linux/"},{"name":"Nginx","slug":"Nginx","permalink":"https://gmaya.top/tags/Nginx/"}]},{"title":"Linux安装Nginx","slug":"20200413-3","date":"2020-04-13T06:20:11.000Z","updated":"2020-04-13T06:28:53.390Z","comments":true,"path":"2020/20200413-3/","link":"","permalink":"https://gmaya.top/2020/20200413-3/","excerpt":"","text":"前言上篇安装完jdk，tomcat 就在来一个Nginx。 安装Nginx进入你想要安装的目录 1cd /usr/local/ 创建nginx文件夹 1mkdir nginx 进入nginx目录下 1cd nginx/ 下载nginx在线下载或者自己下载好然后上传过来。 1wget http://nginx.org/download/nginx-1.16.1.tar.gz 提示: 如果你没有wget,请先安装wget 1yum -y install wget 安装所需的插件 1234yum install gcc c++yum install -y pcre pcre-develyum install -y zlib zlib-develyum install -y openssl openssl-devel 用于编译c、c++代码的GCC；用c语言编写的正则表达式函数库Pcre(使用rewrite模块)；用于数据压缩的函式库的Zlib；安全套接字层密码库OpenSSL（启用SSL支持） 解压，编译按照顺序执行 1tar -zxvf nginx-1.16.1.tar.gz 1cd nginx-1.16.1 1./configure 1make &amp;&amp; sudo make install 启动nginx启动 1cd sbin/ 1./nginx 停用 1./nginx -s stop 重启 1./nginx -s reload 检查修改的nginx.conf配置是否正确 1./nginx -t 启动完之后，浏览器访问http://192.168.21.129/如果没有开启80端口，是不行的开启80端口我使用的是centos7加入80规则–permanent #永久生效，没有此参数设置，重启后会失效。 1firewall-cmd --zone=public --add-port=80/tcp --permanent 重启防火墙 1firewall-cmd --reload 刷新页面http://192.168.21.129/","categories":[{"name":"Linux","slug":"Linux","permalink":"https://gmaya.top/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://gmaya.top/tags/Linux/"},{"name":"Nginx","slug":"Nginx","permalink":"https://gmaya.top/tags/Nginx/"}]},{"title":"Linux安装Tomcat","slug":"20200413-2","date":"2020-04-13T05:45:11.000Z","updated":"2020-04-13T05:47:11.558Z","comments":true,"path":"2020/20200413-2/","link":"","permalink":"https://gmaya.top/2020/20200413-2/","excerpt":"","text":"前言上篇安装完jdk，就在来一个Tomcat。 安装Tomcat进入你想要安装的目录 1cd /usr/local/ 创建tomcat文件夹 1mkdir tomcat 进入tomcat目录下 1cd tomcat/ 下载tomcat 8在线下载或者自己下载好然后上传过来。 1wget https://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.54/bin/apache-tomcat-8.5.54.tar.gz 提示: 如果你没有wget,请先安装wget 1yum -y install wget 解压 1tar -zxvf apache-tomcat-8.5.54.tar.gz 开启默认8080端口我使用的是centos7加入8080 规则–permanent #永久生效，没有此参数设置，重启后会失效。 1firewall-cmd --zone=public --add-port=8080/tcp --permanent 重启防火墙 1firewall-cmd --reload 启动 1./bin/startup.sh 浏览器访问： http://192.168.21.129:8080/","categories":[{"name":"Linux","slug":"Linux","permalink":"https://gmaya.top/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://gmaya.top/tags/Linux/"},{"name":"Tomcat","slug":"Tomcat","permalink":"https://gmaya.top/tags/Tomcat/"}]},{"title":"Linux安装jdk1.8","slug":"20200413","date":"2020-04-13T05:09:11.000Z","updated":"2020-04-13T05:44:59.674Z","comments":true,"path":"2020/20200413/","link":"","permalink":"https://gmaya.top/2020/20200413/","excerpt":"","text":"前言一直都想写一遍这个，虽然不是经常用到。这次准备搞一下Nginx,所以就从0开始，记录一下。 安装jdk1.8进入你想要安装的目录 1cd /usr/local/ 创建jdk文件夹 1mkdir jdk1.8 进入jdk目录下 1cd jdk1.8/ 下载jdk1.8 在线下载或者自己下载好然后上传过来。 1wget --no-check-certificate --no-cookies --header \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz 耐心等待。。。解压 1tar -zxvf jdk-8u131-linux-x64.tar.gz 配置环境变量先找到你的jdk安装目录记录一下 1/usr/local/jdk1.8/jdk1.8.0_131 添加环境变量 1vi /etc/profile 输入a，在文本最后面加上 123export JAVA_HOME=/usr/local/jdk1.8/jdk1.8.0_131export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$PATH:$JAVA_HOME/bin 按 esc，然后：wq 保存退出。加载环境变量 1source /etc/profile 查看版本号，看是否安装成功！ 1java -version","categories":[{"name":"Linux","slug":"Linux","permalink":"https://gmaya.top/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://gmaya.top/tags/Linux/"},{"name":"jdk","slug":"jdk","permalink":"https://gmaya.top/tags/jdk/"}]},{"title":"分享一下Typora工具","slug":"20200411","date":"2020-04-11T13:11:11.000Z","updated":"2020-04-11T13:14:30.833Z","comments":true,"path":"2020/20200411/","link":"","permalink":"https://gmaya.top/2020/20200411/","excerpt":"","text":"分享 一个自己正在使用的工具 Typora 是一款支持实时预览的 Markdown 文本编辑器。 Typora官网https://www.typora.io/简直是编辑博客的不二之选！免费免费免费！！！同时你也可以编写文档，编写简历，支持导出多种模式。太香了","categories":[{"name":"工具","slug":"工具","permalink":"https://gmaya.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://gmaya.top/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"Spring Boot整合RabbitMQ入门","slug":"20200410","date":"2020-04-10T09:22:31.000Z","updated":"2020-04-11T12:39:23.878Z","comments":true,"path":"2020/20200410/","link":"","permalink":"https://gmaya.top/2020/20200410/","excerpt":"","text":"前言 RabbitMQ 即一个消息队列，主要是用来实现应用程序的异步和解耦，同时也能起到消息缓冲，消息分发的作用。 安装完MQ，就该写个例子研究研究了。新建Spring Boot 项目。 修改pom文件新增RabbitMQ 支持 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;&lt;/dependency&gt; 修改配置文件默认网页guest用户是不允许访问的，需要修改一下权限。上篇有写 123456789server: port: 8088spring: rabbitmq: host: 192.168.21.129 port: 5672 username: guest password: guest virtual-host: / 四种交换机交换机的功能主要是接收消息并且转发到绑定的队列，交换机不存储消息。 交换机有四种类型：Direct, topic, Headers and Fanout Direct是RabbitMQ默认的交换机模式,也是最简单的模式.即创建消息队列的时候,指定一个BindingKey.当发送者发送消息的时候,指定对应的Key.当Key和消息队列的BindingKey一致的时候,消息将会被发送到该消息队列中. topic转发信息主要是依据通配符,队列和交换机的绑定主要是依据一种模式(通配符+字符串),而当发送消息的时候,只有指定的Key和该模式相匹配的时候,消息才会被发送到该消息队列中. headers也是根据一个规则进行匹配,在消息队列和交换机绑定的时候会指定一组键值对规则,而发送消息的时候也会指定一组键值对规则,当两组键值对规则相匹配的时候,消息会被发送到匹配的消息队列中. Fanout是路由广播的形式,将会把消息发给绑定它的全部队列,即便设置了key,也会被忽略. Direct创建配置类123456789101112131415161718192021/** * 消息队列配置类 * @author GMaya * @dateTime 2020/4/9 16:02 */@Configurationpublic class MQConfig &#123; public static final String QUEUE = \"hello-top-gmaya\"; /** * Direct Exchange（交换机最简单的方式） */ @Bean public Queue queue() &#123; // durable = true 开启持久化 return new Queue(QUEUE, true); &#125;&#125; 创建生产者用来提供消息产生的 1234567891011121314151617181920/** * 消息队列生产者,比如订单下完,需要生产一个邮件推送的消息 * @author GMaya * @dateTime 2020/4/9 15:42 */@Component@Slf4jpublic class Sender &#123; @Autowired private AmqpTemplate amqpTemplate; public void sender(String msg) &#123; log.info(\"生产者生产消息。。。。。&#123;&#125;\", msg); // 向key = MQConfig.QUEUE 中发送消息 this.amqpTemplate.convertAndSend(MQConfig.QUEUE, msg); &#125;&#125; 创建消费者用来消费消息的 12345678910111213141516/** * 消息列队 , 消费者, 用来消费队列中的消息 * @author GMaya * @dateTime 2020/4/9 15:58 */@Component@Slf4jpublic class Receiver &#123; // 接收key = MQConfig.QUEUE 中消息 @RabbitListener(queues = MQConfig.QUEUE) public void receiver(String msg) &#123; log.info(\"消费者消费。。。。。。&#123;&#125;\", msg); &#125;&#125; 测试写个hello，然后调用。 123456789101112131415@RestController@Slf4jpublic class HelloController &#123; @Autowired private Sender sender; @RequestMapping(\"hello\") public String getHello(@RequestParam String msg) &#123; log.info(\"hello自己的业务。。。\"); sender.sender(msg); return \"hello rabbitmq!!!\"; &#125;&#125; 浏览器访问 http://localhost:8088/hello?msg=你好啊 topic修改配置类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/** * 消息队列配置类 * @author GMaya * @dateTime 2020/4/9 16:02 */@Configurationpublic class MQConfig &#123; public static final String QUEUE = \"hello-top-gmaya\"; public static final String QUEUE_A = \"topic-a\"; public static final String QUEUE_B = \"topic-b\"; public static final String ROUTING_KEYA = \"topic.gmaya\"; public static final String ROUTING_KEYB = \"topic.#\"; public static final String TOPIC_EXCHANGE = \"TOPIC_EXCHANGE\"; // topic 交换机名称 // Direct Exchange（交换机最简单的方式）----begin @Bean public Queue queue() &#123; // durable = true 开启持久化 return new Queue(QUEUE, true); &#125; // Direct Exchange（交换机最简单的方式）----end // Topic Exchange 可以用通配符 ---begin @Bean public Queue topicQueueA() &#123; return new Queue(QUEUE_A, true); &#125; @Bean public Queue topicQueueB() &#123; return new Queue(QUEUE_B, true); &#125; // 定义topic交换机 @Bean public TopicExchange topicExchange()&#123; return new TopicExchange(TOPIC_EXCHANGE); &#125; // routing_key为topic.gmaya,就是完全匹配 // 其实就相当于，你发送的时候 routing_key 和我的一样， 我就进入我的队列中，不然就不进 @Bean public Binding topicBindingA()&#123; return BindingBuilder.bind(topicQueueA()).to(topicExchange()).with(ROUTING_KEYA); &#125; // routing_key为topic.#,就是模糊匹配 // 其实就相当于，你发送的时候 routing_key 满足我的routing_key， 就进入我的队列中，不然就不进 @Bean public Binding topicBindingB()&#123; return BindingBuilder.bind(topicQueueB()).to(topicExchange()).with(ROUTING_KEYB); &#125; // Topic Exchange 可以用通配符 ---begin&#125; 修改生产者1234567891011121314151617181920212223242526272829303132/** * 消息队列生产者,比如订单下完,需要生产一个邮件推送的消息 * @author GMaya * @dateTime 2020/4/9 15:42 */@Component@Slf4jpublic class Sender &#123; @Autowired private AmqpTemplate amqpTemplate; public void sender(String msg) &#123; log.info(\"生产者生产消息。。。。。&#123;&#125;\", msg); // 向key = MQConfig.QUEUE 中发送消息 this.amqpTemplate.convertAndSend(MQConfig.QUEUE, msg); &#125; public void topicSender(String msg) &#123; log.info(\"topic生产者生产消息。。。。。&#123;&#125;\", msg); // 交换机中发送消息 // 这次是完全匹配， 结果应该a和b都能接收到 // 因为b是模糊， 此条件满足模糊的条件，所有b会接收 this.amqpTemplate.convertAndSend(MQConfig.TOPIC_EXCHANGE,MQConfig.ROUTING_KEYA, msg + \"完全匹配\"); // 这次是模糊匹配，不满足a的条件，所以只有b模糊可以接收// this.amqpTemplate.convertAndSend(MQConfig.TOPIC_EXCHANGE,\"topic.xixihaha\", msg + \"模糊匹配\"); // 这次是routing_key 不满足a，也不满足b。所以两个都接收不到。// this.amqpTemplate.convertAndSend(MQConfig.TOPIC_EXCHANGE,\"gmaya.top\", msg + \"不存在\"); &#125;&#125; 修改消费者123456789101112131415161718192021222324/** * 消息列队 , 消费者, 用来消费队列中的消息 * @author GMaya * @dateTime 2020/4/9 15:58 */@Component@Slf4jpublic class Receiver &#123; // 接收key = MQConfig.QUEUE 中消息 @RabbitListener(queues = MQConfig.QUEUE) public void receiver(String msg) &#123; log.info(\"消费者消费。。。。。。&#123;&#125;\", msg); &#125; @RabbitListener(queues = MQConfig.QUEUE_A) public void receiverA(String msg) &#123; log.info(\"QUEUE_A消费者消费。。。。。。&#123;&#125;\", msg); &#125; @RabbitListener(queues = MQConfig.QUEUE_B) public void receiverB(String msg) &#123; log.info(\"QUEUE_B消费者消费。。。。。。&#123;&#125;\", msg); &#125;&#125; 测试完全匹配模糊匹配 Fanout修改配置类在topic配置类基础上新增代码 12345678910111213141516171819// Fanout Exchange 消息广播的模式 ---begin// 定义Fanout交换机名称// 不管路由键或者是路由模式，会把消息发给绑定给它的全部队列，如果配置了routing_key会被忽略。@Beanpublic FanoutExchange fanoutExchange()&#123; return new FanoutExchange(FANOUT_EXCHANGE);&#125;@Beanpublic Binding fanoutBindingA()&#123; return BindingBuilder.bind(topicQueueA()).to(fanoutExchange());&#125;@Beanpublic Binding fanoutBindingB()&#123; return BindingBuilder.bind(topicQueueB()).to(fanoutExchange());&#125;// Fanout Exchange 消息广播的模式 ---end 消费者不需要更改（因为是使用的topic中的两个，已经写过了） 修改生产者123456789/** * fanout 模式 * @param msg */public void fanoutSender(String msg) &#123; log.info(\"fanout生产者生产消息。。。。。&#123;&#125;\", msg); // 会把消息发送给 所有绑定到此交换机的全部列队；routing_key会被忽略。 this.amqpTemplate.convertAndSend(MQConfig.FANOUT_EXCHANGE, \"\", msg);&#125; 测试1234567891011121314151617@RestController@Slf4jpublic class HelloController &#123; @Autowired private Sender sender; @RequestMapping(\"hello\") public String getHello(@RequestParam String msg) &#123; log.info(\"hello自己的业务。。。\");// sender.sender(msg);// sender.topicSender(msg); sender.fanoutSender(msg); return \"hello rabbitmq!!!\"; &#125;&#125; 延迟队列（死信队列）模拟订单创建完，如果30分钟后还没有支付，则取消订单。要实现的办法很多， 使用RabbitMQ延迟队列是其中一个办法！ 使用死信队列大致思路： 订单MQ配置类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071/** * 订单业务配置 * 死信对列使用的 orderTTLExchange，orderTTLQueue，orderTTLKey * 正常对列使用的 orderExchange，orderQueue，orderKey * 在orderTTLQueue中设置，当消息设置的时间到了，消失了，那么我就去调用orderQueue，orderKey，通知它。 * 其实没有对应的rderTTLQueue消费类，肯定到期就没了，然后就实现了一定时间后把消息传给某个队列。 * @author GMaya * @dateTime 2020/4/10 15:37 */@Configurationpublic class OrderMQConfig &#123; /** * 创建延迟队列(死信对列)交换机orderTTLExchange * @return */ @Bean public DirectExchange orderTTLExchange() &#123; return new DirectExchange(\"orderTTLExchange\", true, false); &#125; /** * 创建实际消费交换机orderExchange * @return */ @Bean public DirectExchange orderExchange() &#123; return new DirectExchange(\"orderExchange\", true, false); &#125; /** * 创建延迟队列(死信对列)orderTTLQueue * @return */ @Bean public Queue orderTTLQueue() &#123; Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(\"x-dead-letter-exchange\", \"orderExchange\"); // 到期后转发的交换机 map.put(\"x-dead-letter-routing-key\", \"orderKey\"); // 到期后转发的路由key return QueueBuilder.durable(\"orderTTLQueue\").withArguments(map).build(); &#125; /** * 创建实际orderQueue * @return */ @Bean public Queue orderQueue() &#123; return new Queue(\"orderQueue\", true); &#125; /** * 将（延迟队列orderTTLQueue）和（交换机orderTTLExchange）绑定 * @return */ @Bean public Binding orderTTLBinding() &#123; return BindingBuilder.bind(orderTTLQueue()).to(orderTTLExchange()).with(\"orderTTLKey\"); &#125; /** * 将（延迟队列orderQueue）和（交换机orderExchange）绑定 * @return */ @Bean public Binding orderBinding() &#123; return BindingBuilder.bind(orderQueue()).to(orderExchange()).with(\"orderKey\"); &#125;&#125; 订单生产者123456789101112131415161718192021222324252627282930/** * 订单消息生产着 * @author GMaya * @dateTime 2020/4/10 15:48 */@Slf4j@Componentpublic class OrderSender &#123; @Autowired private AmqpTemplate amqpTemplate; public void sendMsg(String msg) &#123; log.info(\"生产者===订单号：&#123;&#125;\", msg); // 这里把消息生产出来，传到TTL的队列中去，那么到期还没有被消费，就认为死信息，就会调用设置好的队列了 amqpTemplate.convertAndSend(\"orderTTLExchange\", \"orderTTLKey\", msg, new MessagePostProcessor() &#123; @Override public Message postProcessMessage(Message message) throws AmqpException &#123; // 设置失效时间，毫秒，一般订单设置30分钟,30*60*1000 // 过期直接转发到指定的路由 // 由于模拟设置20秒 MessageProperties messageProperties = message.getMessageProperties(); messageProperties.setContentEncoding(\"utf-8\"); messageProperties.setExpiration(\"20000\"); return message; &#125; &#125;); &#125;&#125; 订单消费者12345678910111213141516/** * 订单消息消费者 * 主要用于检查订单状态是否支付 * @author GMaya * @dateTime 2020/4/10 15:54 */@Slf4j@Componentpublic class OrderReceiver &#123; // 这里只是消费了orderQueue。没有人去消费orderTTLQueue.一旦写了TTL那么就是实时消费了，不叫死信了。 @RabbitListener(queues = \"orderQueue\") public void orderMsg(String msg) throws IOException &#123; log.info(\"消费者===订单号：&#123;&#125;\", msg); // TODO 处理判断此订单状态是否支付，如果没有支付则取消订单！ &#125;&#125; 调用测试1234567891011121314151617181920/** * * @author GMaya * @dateTime 2020/4/9 15:37 */@RestController@Slf4jpublic class OrderController &#123; @Autowired private OrderSender orderSender; @RequestMapping(\"order\") public String getOrder(@RequestParam String msg) &#123; log.info(\"Order创建成功。。。\"); orderSender.sendMsg(msg); return \"order创建成功！\"; &#125;&#125; 模拟20秒后进行实际调用处理将20秒换成30分钟，实现超过30分钟还未支付的订单处理上述代码全部上传到gitee。项目地址：https://gitee.com/GMaya/springboot-rabbitmq欢迎star","categories":[{"name":"Java","slug":"Java","permalink":"https://gmaya.top/categories/Java/"}],"tags":[{"name":"RabbitMQ","slug":"RabbitMQ","permalink":"https://gmaya.top/tags/RabbitMQ/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://gmaya.top/tags/Spring-Boot/"}]},{"title":"Linux下安装RabbitMQ入门级别","slug":"20200409","date":"2020-04-09T12:18:12.000Z","updated":"2020-04-11T12:31:45.312Z","comments":true,"path":"2020/20200409/","link":"","permalink":"https://gmaya.top/2020/20200409/","excerpt":"","text":"Linux安装RabbitMQ安装erlang环境 由于RabbitMQ是基于Erlang（面向高并发的语言）语言开发，所以在安装RabbitMQ之前，需要先安装Erlang。 123yum -y install epel-releaseyum -y updateyum -y install erlang socat 查看erlang版本 1erl -version 安装RabbitMQ下载RabbitMQ 1wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.15/rabbitmq-server-3.6.15-1.el7.noarch.rpm 提示: 如果你没有wget,请先安装wget 1yum -y install wget 安装RabbitMQ 1yum install rabbitmq-server-3.6.15-1.el7.noarch.rpm 配置添加开机启动RabbitMQ服务 1systemctl enable rabbitmq-server.service 启动web控制台 1rabbitmq-plugins enable rabbitmq_management 防火墙开放15672和5672端口 12/sbin/iptables -I INPUT -p tcp --dport 15672 -j ACCEPT/sbin/iptables -I INPUT -p tcp --dport 5672 -j ACCEPT 默认网页guest用户是不允许访问的，需要修改一下权限 修改配置文件 1vi /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app 启动, 停止 , 重启 123service rabbitmq-server startservice rabbitmq-server stopservice rabbitmq-server restart 注：有可能起不来 。。。 进入 1cd /usr/lib/rabbitmq/bin 启动 加 -detached 后台启动 1./rabbitmq-server start -detached 浏览器输入ip:15672输入guest guest 服气，各种版本不一致问题，提不起来，项目访问不到，端口不通，这个安装感觉比oracle都麻烦！！！","categories":[{"name":"Java","slug":"Java","permalink":"https://gmaya.top/categories/Java/"}],"tags":[{"name":"RabbitMQ","slug":"RabbitMQ","permalink":"https://gmaya.top/tags/RabbitMQ/"}]},{"title":"Java中的多重for循环怎么跳出最外层","slug":"20200408","date":"2020-04-08T06:01:12.000Z","updated":"2020-04-11T12:31:42.200Z","comments":true,"path":"2020/20200408/","link":"","permalink":"https://gmaya.top/2020/20200408/","excerpt":"","text":"笔记记录不加任何代码,最里层的break,只能跳出最内层的循环, 如果想要跳出最外面的,就要新增一个标记.在想要跳出循环的地方加标记,然后break标记. 同理换成continue 标记; 效果一样. 12345678910111213141516/** * 测试多重for循环 break */public static void forTest() &#123; int a = 3; tab: for (int i = 0; i &lt; a; i++) &#123; System.out.println(\"我是i....\" + i); for (int j = 0; j &lt; a; j++) &#123; System.out.println(\"我是j....\" + j); if (j == 1) &#123; break tab; &#125; &#125; &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://gmaya.top/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://gmaya.top/tags/Java/"}]},{"title":"Python一键获取所有高清无码王者皮肤图片","slug":"20200406","date":"2020-04-06T08:20:33.000Z","updated":"2020-04-11T12:31:39.637Z","comments":true,"path":"2020/20200406/","link":"","permalink":"https://gmaya.top/2020/20200406/","excerpt":"","text":"前言突然看到王者荣耀每个英雄的图片很不错,所有就一张一张保存了. 分析1.打开王者荣耀官方英雄列表2.分析接口3.实际操作4.调整代码5.开始启动程序 开始其中中间发现,获取的页面中并没有直接找到图片的地址, 所以先拿到皮肤名称拼接成图片链接,然后真正拿到高清无码皮肤图片 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283# -*- coding: gbk -*-## -------------------------------------------------------# Name: WZRYImpageDemo# Description: 多线程获取王者荣耀所有英雄高清皮肤# Author: GMaya# Date: 2020/4/6 14:56# -------------------------------------------------------import threadingimport requests, json, re# 创建会话对象session = requests.session()headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36', 'origin': 'https://pvp.qq.com'&#125;# 获取所有英雄列表def get_hero_list(): # 请求接口 result = session.get('https://pvp.qq.com/web201605/js/herolist.json', headers=headers) # 解析json结果 resJson = json.loads(result.text) for res in resJson: # 英雄名称 cname = res.get('cname') # 英雄详情页id ename = res.get('ename') # 多线程获取详细页 myThread(cname, ename).start()# 获取英雄详情页面信息def get_hero_tail(ename, cname): # 请求接口 result = session.get('https://pvp.qq.com/web201605/herodetail/%s.shtml' % ename, headers=headers) result.encoding = 'gbk' zz = \"\"\"&lt;ul class=\"pic-pf-list pic-pf-list3\" data-imgname=\"(.*?)\"&gt;\"\"\" # 由于爬取的页面和网页上看到的实际效果不一致,所以这里拿取所有皮肤名称,直接去皮肤服务器拿取 res_tail = re.findall(zz, result.text)[0] res_tail_list = res_tail.split('|') count = 1 for tail in res_tail_list: imgName = cname + '-' + tail # 下载具体图片 get_hero_skin(ename, count, imgName) count += 1# 保存下载图片def get_hero_skin(ename, i, imgName): url = \"http://game.gtimg.cn/images/yxzj/img201606/skin/hero-info/%s/%s-bigskin-%d.jpg\" % (ename, ename, i) # 拼接最后的图片地址,然后保存 res_skin = session.get(url) file = 'D:\\download\\爬虫图片目录\\王者荣耀图片\\%s.jpg' % imgName # wb : 以二进制格式打开一个文件只用于写入。一般用于非文本文件如图片等。 with open(file, 'wb') as f: f.write(res_skin.content)# 创建线程类class myThread(threading.Thread): def __init__(self, cname, ename): threading.Thread.__init__(self) self.cname = cname self.ename = ename def run(self): print(\"开始线程：\" + self.cname) try: get_hero_tail(self.ename, self.cname) except Exception: print('线程出现意外....' + self.name) print(\"退出线程：\" + self.cname)if __name__ == '__main__': # 开始 get_hero_list() 也没有具体的计算, 这三百多个将近四百个, 其中包含英雄本身的图片,所以真正的皮肤应该是200多个.应该是全了.说实话,300kb左右的图片, 已经很清楚了","categories":[{"name":"Python","slug":"Python","permalink":"https://gmaya.top/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://gmaya.top/tags/Python/"}]},{"title":"Python听说网易云音乐的评论很有意思","slug":"20200405","date":"2020-04-05T15:22:33.000Z","updated":"2020-04-11T12:31:26.543Z","comments":true,"path":"2020/20200405/","link":"","permalink":"https://gmaya.top/2020/20200405/","excerpt":"","text":"前言听歌哪个平台好不知道， 但是要说评论，那就是网易云音乐。看看云音乐热歌榜所有歌曲的评论吧。 分析其实重点是分析各个页面和接口， 只要分析到位，没有拿不到的信息。 代码其中headers和data 的信息自己从浏览器拿一下就好了. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071# -*- coding: utf-8 -*-## -------------------------------------------------------# Name: Music163# Description: 获取网易云音乐精彩评论# Author: GMaya# Date: 2020/4/5 21:45# -------------------------------------------------------import requests, re, json, datetime# 1.创建会话对象session = requests.session()headers = &#123; 'User-Agent': 'xxx'&#125;data = &#123; \"params\": \"xxx\" , \"encSecKey\": \"xxx\"&#125;# 文件保存位置file = 'D:\\download\\music163.txt'# 根据歌曲id 获取所有精彩评论def get_music_comment(songid): url = \"https://music.163.com/weapi/v1/resource/comments/R_SO_4_%d?csrf_token=\" % songid result = session.post(url, headers=headers, data=data) res = json.loads(result.text) hotComments = res.get('hotComments') for hot in hotComments: # 热评内容 content = hot.get('content').replace('\\n', '') # 昵称 nickname = hot.get('user').get('nickname') # 评论时间 hottime = int(hot.get('time')) / 1000 hottime = datetime.datetime.fromtimestamp(hottime).strftime('%Y-%m-%d %H:%M:%S') # 点赞人数 likedCount = hot.get('likedCount') consequence = '[昵称:]%s,[评论时间:]%s,[点赞人数:]%d,[热评内容:]%s' % (nickname, hottime, likedCount, content) # 保存评论信息 with open(file, 'a+', encoding='utf-8') as f: f.write(consequence + '\\n') # 加\\n换行显示# 获取热歌排行榜所有歌曲iddef get_song(): url = \"https://music.163.com/m/discover/toplist?id=3778678\" result = session.get(url, headers=headers) res = \"\"\"&lt;ul class=\"f-hide\"&gt;(.*?)&lt;/ul&gt;\"\"\" resul = re.findall(res, result.text) print(resul) for ress in resul: res2 = \"\"\"&lt;li&gt;&lt;a href=\"\\/song\\?id=(.*?)\"&gt;(.*?)&lt;/a&gt;&lt;/li&gt;\"\"\" resul2 = re.findall(res2, ress) # print(resul2) for r in resul2: songid = int(r[0]) songname = r[1] print(\"开始下载[%s]歌曲评论\" % songname) consequence = '===========歌曲名称: %s===============' % songname with open(file, 'a+', encoding='utf-8') as f: f.write(consequence + '\\n') # 加\\n换行显示 # 开始下载评论 get_music_comment(songid)if __name__ == '__main__': get_song() 最后文件是保存到本地磁盘, 还是数据库,根据自己的方式决定 思路:我之前写过获取qq音乐分享链接可以根据歌名 获得到歌曲id等链接, 这个网易云根据歌名获取歌曲id也不难,这个时候应该可以做一个对接qq或者微信的机器人, 用户在qq群输入歌名,直接返回最热的一条评论!","categories":[{"name":"Python","slug":"Python","permalink":"https://gmaya.top/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://gmaya.top/tags/Python/"}]},{"title":"Python一键珍藏我的动漫妹子们","slug":"20200404","date":"2020-04-04T10:02:31.000Z","updated":"2020-04-11T12:31:29.642Z","comments":true,"path":"2020/20200404/","link":"","permalink":"https://gmaya.top/2020/20200404/","excerpt":"","text":"前言获取点动漫图片,还要一张一张保存,这多难受.话不多说,练练手 分析获取图片步骤: 找到图片来源网站 分析网站页面数据结构 分析下一页结果 分析数据处理 保存 本次找到的图片来源是http://pic.netbian.com/4kdongman/index.html都是高清4k动漫大妹子 然后F12找到图片位置的标签等,然后使用正则匹配 点击下一个看到,后缀 index_2 index_3 所以,下一页数据只需要下划线加本页页数即可 开鲁代码 展示真正的技术12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576# -*- coding=gbk -*-# @Author: GMaya# 爬取动漫图片,嘎嘎import requests, time, re# 1.创建会话对象session = requests.session()# 获取目标网页结果def get_result(url): # 请求接口 result = session.get(url) # 编码格式 result.encoding = 'gbk' \"\"\" 正则表达式,匹配对应数据 注意:href=\"(.*?)\" , 如果 .*? 被括号包裹, 则输出括号内的内容 如果没有括号, 则输出整个匹配的内容 \"\"\" res = \"\"\"&lt;a href=\"(.*?)\" target=\"_blank\"&gt;&lt;img src=\".*?\" alt=\".*?\" /&gt;&lt;b&gt;.*?&lt;/b&gt;&lt;/a&gt;\"\"\" # 匹配符合正则内容 return re.findall(res, result.text)# 解析详情页数据def two_result(contents): for con in contents: # 去第详情页,获取清晰度比较高的图片 result2 = session.get('http://pic.netbian.com/' + con) result2.encoding = 'gbk' res2 = \"\"\"&lt;a href=\"\" id=\"img\"&gt;&lt;img src=\"(.*?)\" data-pic=\".*?\" alt=\"(.*?)\" title=\".*?\"&gt;&lt;/a&gt;\"\"\" # 匹配符合正则内容 contents2 = re.findall(res2, result2.text) # 真正处理数据并保存 save_result(contents2)# 真正处理数据并保存def save_result(contents2): for con2 in contents2: path = con2[0] # 图片真正的高清图片地址 name = con2[1] # 图片名称 # 拼接最后的图片地址,然后保存 result3 = session.get('http://pic.netbian.com/' + path) file = 'D:\\download\\dongmanImg\\%s.jpg' % name # wb : 以二进制格式打开一个文件只用于写入。一般用于非文本文件如图片等。 with open(file, 'wb') as f: f.write(result3.content) # 安全点就等待0.5秒再次爬取 time.sleep(0.5)if __name__ == '__main__': print('下载动漫图片开始--------------') # 爬取前一百页内容 pageno = 100 # 1.请求网页,获取结果 for i in range(1, pageno): print('解析处理第%d页数据 请稍等...' % i) # 第一个和其他页有点不同,所以分开处理 url = '' if i == 1: url = \"http://pic.netbian.com/4kdongman/index.html\" else: url = \"http://pic.netbian.com/4kdongman/index_%d.html\" % i # 得到网页响应结果 result = get_result(url) # 处理详情页数据 two_result(result) print('第%d页数据共%d个,处理完毕.' % (i, len(result))) # 每次请求间隔0.5秒 time.sleep(0.5) print('下载动漫图片结束--------------') 喝陪咖啡,静等一会 说明: 只是用作技术练习.请勿恶意使用 多线程爬取上面单线程爬取了两杯咖啡时间, 到30页的时候,我停止了,太慢了,咋办,多线程搞上! 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394# -*- coding=gbk -*-# @Author: GMaya# 爬取动漫图片,多线程例子import requests, time, reimport threading# 1.创建会话对象session = requests.session()# 获取目标网页结果def get_result(url): # 请求接口 result = session.get(url) # 编码格式 result.encoding = 'gbk' \"\"\" 正则表达式,匹配对应数据 注意:href=\"(.*?)\" , 如果 .*? 被括号包裹, 则输出括号内的内容 如果没有括号, 则输出整个匹配的内容 \"\"\" res = \"\"\"&lt;a href=\"(.*?)\" target=\"_blank\"&gt;&lt;img src=\".*?\" alt=\".*?\" /&gt;&lt;b&gt;.*?&lt;/b&gt;&lt;/a&gt;\"\"\" # 匹配符合正则内容 return re.findall(res, result.text)# 解析详情页数据def two_result(contents): for con in contents: # 去第详情页,获取清晰度比较高的图片 result2 = session.get('http://pic.netbian.com/' + con) result2.encoding = 'gbk' res2 = \"\"\"&lt;a href=\"\" id=\"img\"&gt;&lt;img src=\"(.*?)\" data-pic=\".*?\" alt=\"(.*?)\" title=\".*?\"&gt;&lt;/a&gt;\"\"\" # 匹配符合正则内容 contents2 = re.findall(res2, result2.text) # 真正处理数据并保存 save_result(contents2)# 真正处理数据并保存def save_result(contents2): for con2 in contents2: path = con2[0] # 图片真正的高清图片地址 name = con2[1] # 图片名称 # 拼接最后的图片地址,然后保存 result3 = session.get('http://pic.netbian.com/' + path) file = 'D:\\download\\dongmanThreadImg\\%s.jpg' % name # wb : 以二进制格式打开一个文件只用于写入。一般用于非文本文件如图片等。 with open(file, 'wb') as f: f.write(result3.content) # 安全点就等待0.5秒再次爬取 time.sleep(0.5)# 创建线程类class myThread(threading.Thread): def __init__(self, threadID, name, url): threading.Thread.__init__(self) self.threadID = threadID self.name = name self.url = url def run(self): print(\"开始线程：\" + self.name) try: # 得到网页响应结果 result = get_result(self.url) # 处理详情页数据 two_result(result) except Exception: print('线程出现意外....' + self.name) print(\"退出线程：\" + self.name)if __name__ == '__main__': print('下载动漫图片开始--------------') # 爬取前一百页内容 pageno = 100 # 1.请求网页,获取结果 for i in range(1, pageno): print('解析处理第%d页数据 请稍等...' % i) # 第一个和其他页有点不同,所以分开处理 url = '' if i == 1: url = \"http://pic.netbian.com/4kdongman/index.html\" else: url = \"http://pic.netbian.com/4kdongman/index_%d.html\" % i # 开启线程,爬取几页就开启几个线程,量力而行 myThread(i, \"thread-\" + str(i), url).start() # 每次请求间隔0.5秒 time.sleep(0.5)print('下载动漫图片结束--------------') 秒开100线程,每个线程独自爬取,这还没反应过来, 就结束了,我只能说好快 提示:最好还是把代码try 一下, 如果中间有意外,可以忽略,","categories":[{"name":"Python","slug":"Python","permalink":"https://gmaya.top/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://gmaya.top/tags/Python/"}]},{"title":"Python的第一个web项目","slug":"20200403-2","date":"2020-04-03T13:15:12.000Z","updated":"2020-04-11T12:31:32.875Z","comments":true,"path":"2020/20200403-2/","link":"","permalink":"https://gmaya.top/2020/20200403-2/","excerpt":"","text":"前言来一个hello python 吧 创建项目项目名称: pythonwebdemo应用名称: webdemo 完成之后,二话不多说,启动!!! 然后点击默认地址 ,访问 成功! hello页面urls.py 文件修改页面请求hello路径, 找到views中的hello接口 12345678from django.contrib import adminfrom django.urls import pathfrom webdemo import viewsurlpatterns = [ path('admin/', admin.site.urls), path(r'hello/', views.hello)] views.py 文件修改 1234567from django.shortcuts import render# Create your views here.# 将请求定位到hello.html中def hello(request): return render(request, 'hello.html') templates 文件夹下新增hello.heml页面 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;hello&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Hello Pyhton!!!&lt;/h1&gt;&lt;h2&gt;Hello Pyhton!!!&lt;/h2&gt;&lt;h3&gt;Hello Pyhton!!!&lt;/h3&gt;&lt;h4&gt;Hello Pyhton!!!&lt;/h4&gt;&lt;h5&gt;Hello Pyhton!!!&lt;/h5&gt;&lt;/body&gt;&lt;/html&gt; 启动,访问http://127.0.0.1:8000/hello/ 加上数据库操作settings.py 文件修改数据库默认的sqlite,其实这个数据库也不错,简单的保存也不需要密码啥的,就是性能不中当初在写epl插件的时候,一般都是使用的sqlite,客户不需要安装数据库,直接本地生成了一个.db文件,简单了好多 下面时区和语言在下面搜索一下即可 1234567891011121314DATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.mysql', 'NAME': 'python', 'USER': 'root', 'PASSWORD': 'root', 'HOST': '127.0.0.1', 'PORT': 3306 &#125;&#125;LANGUAGE_CODE = 'zh-hans'TIME_ZONE = 'Asia/Shanghai' urls.py 文件修改 1path(r'helloMysql/', views.helloMysql) views.py 文件修改简简单单来个返回结果封装 12345678910def helloMysql(request): data = &#123;&#125; # '-createtime' 前面加-为倒序 userList = models.User.objects.all().order_by('-createtime').values() data['code'] = 200 # 方式一 # data['result'] = json.loads(serializers.serialize('json', userList)) # 方式二 data['result'] = list(userList) return JsonResponse(data, safe=False, json_dumps_params=&#123;'ensure_ascii': False&#125;) 项目路径找到models.py,修改 12345678910111213from django.db import models# Create your models here.class User(models.Model): id = models.AutoField(primary_key=True) name = models.CharField(max_length=32) age = models.IntegerField() sex = models.IntegerField() createtime = models.DateTimeField() # 指定数据库表名称 class Meta(): db_table = \"tb_user\" 启动!!! 访问 http://127.0.0.1:8000/helloMysql/查看结果","categories":[{"name":"Python","slug":"Python","permalink":"https://gmaya.top/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://gmaya.top/tags/Python/"}]},{"title":"Python连接Mysql数据库Demo","slug":"20200403","date":"2020-04-03T05:29:41.000Z","updated":"2020-04-11T12:30:20.104Z","comments":true,"path":"2020/20200403/","link":"","permalink":"https://gmaya.top/2020/20200403/","excerpt":"","text":"前言这个必须要了解一下,老保存到本地根本不是办法简单的查询,新增,先了解基本写法 创建数据库就算使用java也不会在代码创建数据库啥啥的,所以这里都不去了解怎么在代码创建数据库,表之类的直接手动去创建 123456789DROP TABLE IF EXISTS `tb_user`;CREATE TABLE `tb_user` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键', `name` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '名字', `age` int(3) NULL DEFAULT NULL COMMENT '年龄', `sex` int(1) NULL DEFAULT 0 COMMENT '性别,0未知,1男,2女', `createtime` datetime NOT NULL COMMENT '创建时间', PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '用户测试表' ROW_FORMAT = Compact; 简简单单搞点数据 1234INSERT INTO `tb_user` VALUES (1, '张三', 12, 1, '2020-04-03 11:03:03');INSERT INTO `tb_user` VALUES (2, '李四', 34, 0, '2020-04-03 11:03:13');INSERT INTO `tb_user` VALUES (3, '王五', 45, 2, '2020-04-03 11:03:24');INSERT INTO `tb_user` VALUES (5, '小红', 12, 1, '2020-04-03 13:39:44'); 编写代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152# @Author: GMayaimport pymysqlimport datetime# 打开数据库连接db = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='root', db='python', charset='utf8')# 查询方法def seleteUser(): # 使用cursor方法创建一个游标 cursor = db.cursor() sql = \"select * from tb_user\" cursor.execute(sql) data = cursor.fetchall() for d in data: id = d[0] name = d[1] age = d[2] sex = d[3] createtime = d[4] print(id, name, age, sex, createtime) cursor.close() db.close() return datadef insertUser(name, age, sex, createTime): # 使用cursor方法创建一个游标 cursor = db.cursor() sql = \"insert into tb_user(name,age,sex,createtime) values (%s,%s,%s,%s) \" try: # 执行sql语句;使用构造参数防止sql注入! row = cursor.execute(sql, (name, age, sex, createTime)) print(\"影响条数:%s\" % row) # 提交到数据库执行 db.commit() except: # 发生错误时回滚 db.rollback() # 关闭 cursor.close() db.close()if __name__ == '__main__': # 查询 # data = seleteUser() # 新增 insertUser('小红', 12, 1, datetime.datetime.now()) 总结datetime 模块 获取当前时间年月日时分秒now(…)：返回当前日期时间的datetime对象 1datetime.datetime.now() pymysql模块获取新增主键id 1cursor.lastrowid 获取查询全部结果 1cursor.fetchall() 获取查询结果第一条 1cursor.fetchone()","categories":[{"name":"Python","slug":"Python","permalink":"https://gmaya.top/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://gmaya.top/tags/Python/"}]},{"title":"Python爬取全球疫情Demo","slug":"20200402-2","date":"2020-04-02T14:09:11.000Z","updated":"2020-04-11T12:25:54.722Z","comments":true,"path":"2020/20200402-2/","link":"","permalink":"https://gmaya.top/2020/20200402-2/","excerpt":"","text":"前言仅仅学习而已,不做其他非法操作.习惯用小demo来熟练各种方法与技巧 分析进入腾讯新闻找到疫情入口https://news.qq.com/zt2020/page/feiyan.htm#/global然后F12分析接口.这对于java老鸟来说,分分钟找到. 1https://api.inews.qq.com/newsqa/v1/automation/foreign/country/ranklist 然后分析json,取什么值, 用什么. 撸代码装工具由于是从0开始学的python,所以什么也没有,只有一个python环境,所以直接来到jb家jetbrains,撸一个pycharm, 用过idea的都知道,直接和idea安装方式一样,一毛一样!!! hello进来不多说, 一个hello例子必须要有 12# @Author: GMayaprint('hello word!') 右键执行 导包想要访问互联网, 你不得一个requests请求么?刚好,导入这个在python安装目录 –&gt; Scripts 包下,进入cmd输入 1pip install requests 等待安装完成!然后在ide里面设置引入 访问接口123456789# @Author: GMayaimport requests# 创建会话对象session = requests.session()# 请求接口result = session.get('https://api.inews.qq.com/newsqa/v1/automation/foreign/country/ranklist')# 打印结果print(result.text) 握草,真是方便快捷狠啊 走一步学一部,看下这个requests包是啥 Requests为Python处理了所有HTTP/1.1操作， 与Web服务的无缝集成。不需要为URL手动添加查询字符串或POST数据进行表单处理。基于urllib3, 能自动处理Keep-alive和HTTP连接池。 此处 自行百度学习了小半个小时,以后用到复杂的再说. 处理结果12345678910111213141516171819# @Author: GMayaimport requests, json, jsonpath# 创建会话对象session = requests.session()# 请求接口result = session.get('https://api.inews.qq.com/newsqa/v1/automation/foreign/country/ranklist')# 打印结果print(result.text)# 解析json结果resJson = json.loads(result.text)data = jsonpath.jsonpath(resJson, '$.data.*')for d in data: res = '日期:' + d['date'] + '--' + d['continent'] + '--' + d['name'] + '--' + '新增确诊:' + str( d['confirmAdd']) + '累计确诊:' + str(d['confirm']) + '治愈:' + str(d['heal']) + '死亡:' + str(d['dead']) # 保存数据到我的d盘 file = 'D:\\download\\global-yq.txt' with open(file, 'a+',encoding='utf-8') as f: f.write(res + '\\n') # 加\\n换行显示 结果已经保存到本地文本里面了.有不懂的命令直接文档里面找,还是很容易的文档连接","categories":[{"name":"Python","slug":"Python","permalink":"https://gmaya.top/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://gmaya.top/tags/Python/"}]},{"title":"Python你好!","slug":"20200402","date":"2020-04-02T11:32:11.000Z","updated":"2020-04-11T12:24:26.237Z","comments":true,"path":"2020/20200402/","link":"","permalink":"https://gmaya.top/2020/20200402/","excerpt":"","text":"前言这年头,谁不是熟悉好几个语言!HTML是不是语言! 超文本标记语言&lt;/邪笑&gt; 下载百度搜索Python进入官网https://www.python.org/ 安装双击打开安装包, 注意选择第二个,自定义安装, 谁吧我的软件安装到c盘,我跟谁急下面还有一个add python 勾上! 这样就不需要配置环境变量了.其他的都默认,go!完成! 测试cmd进入,输入python输入 1print(\"hello python!!\") 退出按ctrl+z,回车","categories":[{"name":"Python","slug":"Python","permalink":"https://gmaya.top/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://gmaya.top/tags/Python/"}]},{"title":"定时任务@Scheduled入门","slug":"20200330","date":"2020-03-30T06:12:11.000Z","updated":"2020-04-11T12:24:23.449Z","comments":true,"path":"2020/20200330/","link":"","permalink":"https://gmaya.top/2020/20200330/","excerpt":"","text":"一个最简单的例子:启动类添加注解 1@EnableScheduling // 开启定时任务 编写单线程demo cron 表达式1234567891011/** * cron 表达式 * 每2秒执行一次 * @throws InterruptedException */ @Scheduled(cron = \"0/2 * * * * *\") public void test() throws InterruptedException &#123; // 经过测试,使用cron表达式,定时任务第二次会等待第一次执行完毕再开始! Thread.sleep(5000L); log.info(\"定时任务测试cron:\" + new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date())); &#125; fixedDelay12345678910/** * fixedDelay: * 第一次执行完毕才会执行第二次，时间间隔变为了7秒 * @throws InterruptedException */ @Scheduled(fixedDelay = 2000L) public void test2() throws InterruptedException &#123; Thread.sleep(5000L); log.info(\"定时任务测试fixedDelay:\" + new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date())); &#125; fixedRate12345678910/** * fixedRate: * 每隔2秒就会执行, 但是因为单线程,所以在5秒后会输出,间隔就是5秒 * @throws InterruptedException */ @Scheduled(fixedRate = 2000L) public void test3() throws InterruptedException &#123; Thread.sleep(5000L); log.info(\"定时任务测试fixedRate:\" + new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date())); &#125; 如果是一起执行这三个定时任务,那么会一个一个的来, 因为只有一个线程. 多线程1234567891011121314/** * * @author GMaya */@Configuration@EnableAsyncpublic class ScheduleConfig &#123; @Bean public TaskScheduler taskScheduler() &#123; ThreadPoolTaskScheduler taskScheduler = new ThreadPoolTaskScheduler(); taskScheduler.setPoolSize(50); // 设置线程池大小 return taskScheduler; &#125;&#125; 如果只是加这一个配置类, 确实是使用了多线程, 每个定时任务都互相不影响.但是一个线程第一次阻塞了,第二次就不行了,所以在定时任务上再加 1@Async 就是说你这次失败了, 不要影响我下次的运行","categories":[{"name":"Java","slug":"Java","permalink":"https://gmaya.top/categories/Java/"}],"tags":[{"name":"定时任务","slug":"定时任务","permalink":"https://gmaya.top/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"}]},{"title":"Spring Cloud 整合最新版seata分布式事务 (六)","slug":"20200327-2","date":"2020-03-27T07:12:11.000Z","updated":"2020-04-11T12:24:20.065Z","comments":true,"path":"2020/20200327-2/","link":"","permalink":"https://gmaya.top/2020/20200327-2/","excerpt":"","text":"前言现在我有 订单系统, 支付系统.注册中心每个系统都是单独的,事务也都是本地事务,也是独立的.那么问题来了.我—&gt;订单系统–&gt;支付系统.–&gt;订单系统—&gt;我支付系统成功了 ,自己的事务也提交了.到订单系统结果失败了.(结果就是钱付了,订单还未支付.)这样就存在了问题呀.更多的问题也存在库存系统,加库存,改订单状态,支付等等,每个单独的模块事务怎么保持统一呢!! seata 介绍 Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案. seata各种官方例子连接:https://github.com/seata/seata-samplesseata服务端下载链接:https://github.com/seata/seata/releases 根据例子,我搞了好久好久好久好久好久才把例子跑起来.我也是服了,中间各种问题,网上的答案都尼玛一模一样!,人家都能成功,我就失败.郁闷死了. 思路1.下载官方的服务端seata-server2.下载官方客户端例子(我选的是springcloud-eureka-feign-mybatis-seata)3.修改配置.4.启动.5.哪里错改哪里!前4步也就半个小时,顶多俩小时,ok了.第5步鬼知道多长时间. 我结合官方demo,整合到自己的项目中去.以及中间遇到的问题记录 seata服务端下载seata服务端seata服务端下载链接:https://github.com/seata/seata/releases我选的是最新的v1.1.0版本,下载到本地即可 修改seata配置我这里就说win下怎么启动:首先修改目录下的conf中的配置file.conf其中我没有使用db方式, 使用的默认file方式,应该不需要修改 12345678910111213141516171819202122232425262728293031323334353637383940## transaction log store, only used in seata-serverstore &#123; ## store mode: file、db mode = \"file\" ## file store property file &#123; ## store location dir dir = \"sessionStore\" # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions maxBranchSessionSize = 16384 # globe session size , if exceeded throws exceptions maxGlobalSessionSize = 512 # file buffer size , if exceeded allocate new buffer fileWriteBufferCacheSize = 16384 # when recover batch read size sessionReloadReadSize = 100 # async, sync flushDiskMode = async &#125; ## database store property db &#123; ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc. datasource = \"dbcp\" ## mysql/oracle/h2/oceanbase etc. dbType = \"mysql\" driverClassName = \"com.mysql.jdbc.Driver\" url = \"jdbc:mysql://127.0.0.1:3306/seata\" user = \"mysql\" password = \"mysql\" minConn = 1 maxConn = 10 globalTable = \"global_table\" branchTable = \"branch_table\" lockTable = \"lock_table\" queryLimit = 100 &#125;&#125; registry.conf我使用的类型是eureka,配置上之前的注册中心地址 1234567891011121314151617registry &#123; # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa type = \"eureka\" eureka &#123; serviceUrl = \"http://server01:8761/eureka/\" application = \"default\" weight = \"1\" &#125;&#125;config &#123; # file、nacos 、apollo、zk、consul、etcd3 type = \"file\" file &#123; name = \"file.conf\" &#125;&#125; 启动seata服务端修改完毕,首先启动你的注册中心eureka,然后启动这个seata服务端首先进入bin目录seata-server.bat 这个是win命令,在这个目录进入cmd, 将这个文件拖进窗口,输入 1-h 127.0.0.1 -p 8091 -m file 最终效果:脚本参数:-p:指定启动seata server的端口号。-h:指定seata server所绑定的主机-m:指定事务日志、事务执行信息存储的方式，目前支持file（文件方式）、db（数据库方式) 这个地方我遇到的问题:第一个:我没有指定主机,然后和后面的配置里面对应不上,显示连接不上seata server服务. 导入jar123456&lt;!--seata--&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-alibaba-seata&lt;/artifactId&gt; &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;&lt;/dependency&gt; 修改自己项目的配置新增两个配置文件,每个模块里面都需要,先修改一个,然后拷贝过去就行了 file.conf 文件其中大部分是默认的,只需要修改一个地方 12345678910service &#123; #transaction service group mapping vgroup_mapping.tx = \"default\" #only support when registry.type=file, please don't set multiple addresses default.grouplist = \"127.0.0.1:8091\" #degrade, current not support enableDegrade = false #disable seata disableGlobalTransaction = false&#125; 注意,这个tx这个名字可以自己改,但是application.yml中一定要与之对应,往下看 完整的file.conf 文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566transport &#123; # tcp udt unix-domain-socket type = \"TCP\" #NIO NATIVE server = \"NIO\" #enable heartbeat heartbeat = true # the client batch send request enable enableClientBatchSendRequest = true #thread factory for netty threadFactory &#123; bossThreadPrefix = \"NettyBoss\" workerThreadPrefix = \"NettyServerNIOWorker\" serverExecutorThread-prefix = \"NettyServerBizHandler\" shareBossWorker = false clientSelectorThreadPrefix = \"NettyClientSelector\" clientSelectorThreadSize = 1 clientWorkerThreadPrefix = \"NettyClientWorkerThread\" # netty boss thread size,will not be used for UDT bossThreadSize = 1 #auto default pin or 8 workerThreadSize = \"default\" &#125; shutdown &#123; # when destroy server, wait seconds wait = 3 &#125; serialization = \"seata\" compressor = \"none\"&#125;service &#123; #transaction service group mapping vgroup_mapping.tx = \"default\" #only support when registry.type=file, please don't set multiple addresses default.grouplist = \"127.0.0.1:8091\" #degrade, current not support enableDegrade = false #disable seata disableGlobalTransaction = false&#125;client &#123; rm &#123; asyncCommitBufferLimit = 10000 lock &#123; retryInterval = 10 retryTimes = 30 retryPolicyBranchRollbackOnConflict = true &#125; reportRetryCount = 5 tableMetaCheckEnable = false reportSuccessEnable = false &#125; tm &#123; commitRetryCount = 5 rollbackRetryCount = 5 &#125; undo &#123; dataValidation = true logSerialization = \"jackson\" logTable = \"undo_log\" &#125; log &#123; exceptionRate = 100 &#125;&#125; registry.conf文件注册选择type = eureka,然后配置eureka地址即可 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182registry &#123; # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa type = \"eureka\" nacos &#123; serverAddr = \"localhost\" namespace = \"\" cluster = \"default\" &#125; eureka &#123; serviceUrl = \"http://server01:8761/eureka/\" application = \"default\" weight = \"1\" &#125; redis &#123; serverAddr = \"localhost:6379\" db = \"0\" password = \"\" cluster = \"default\" timeout = \"0\" &#125; zk &#123; cluster = \"default\" serverAddr = \"127.0.0.1:2181\" session.timeout = 6000 connect.timeout = 2000 username = \"\" password = \"\" &#125; consul &#123; cluster = \"default\" serverAddr = \"127.0.0.1:8500\" &#125; etcd3 &#123; cluster = \"default\" serverAddr = \"http://localhost:2379\" &#125; sofa &#123; serverAddr = \"127.0.0.1:9603\" application = \"default\" region = \"DEFAULT_ZONE\" datacenter = \"DefaultDataCenter\" cluster = \"default\" group = \"SEATA_GROUP\" addressWaitTime = \"3000\" &#125; file &#123; name = \"file.conf\" &#125;&#125;config &#123; # file、nacos 、apollo、zk、consul、etcd3、springCloudConfig type = \"file\" nacos &#123; serverAddr = \"localhost\" namespace = \"\" group = \"SEATA_GROUP\" &#125; consul &#123; serverAddr = \"127.0.0.1:8500\" &#125; apollo &#123; app.id = \"seata-server\" apollo.meta = \"http://192.168.1.204:8801\" namespace = \"application\" &#125; zk &#123; serverAddr = \"127.0.0.1:2181\" session.timeout = 6000 connect.timeout = 2000 username = \"\" password = \"\" &#125; etcd3 &#123; serverAddr = \"http://localhost:2379\" &#125; file &#123; name = \"file.conf\" &#125;&#125; 修改application.yml第一个方式:注意,这个tx-service-group: 后面的tx一定要和上面配置中的tx一样.一定一定要一样 12345spring: cloud: alibaba: seata: tx-service-group: tx 第二个方式: application.yml这个文件不指定tx-service-group,那么file.conf这个文件的vgroup_mapping.tx就必须修改为seata默认的形式在这个源码中可以看到,如果你没有定义,那么你这个file.conf配置中必须设置为applicationName + “-fescar-service-group”举例:我这个项目就必须设置为order-fescar-service-group 123spring: application: name: order 都是坑踩出来的………….. 新增数据源配置一开始我最下面的mybatis的配置没有注释,就会发生添加语句执行找不到mapper注释掉就可以了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.gmaya.order.config;import com.alibaba.druid.pool.DruidDataSource;import io.seata.rm.datasource.DataSourceProxy;import javax.sql.DataSource;import org.apache.ibatis.session.SqlSessionFactory;import org.mybatis.spring.SqlSessionFactoryBean;import org.mybatis.spring.transaction.SpringManagedTransactionFactory;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.core.io.support.PathMatchingResourcePatternResolver;/** * 数据源代理 * @author GMaya */@Configurationpublic class DataSourceConfiguration &#123; @Bean @ConfigurationProperties(prefix = \"spring.datasource\") public DataSource druidDataSource()&#123; DruidDataSource druidDataSource = new DruidDataSource(); return druidDataSource; &#125; @Primary @Bean(\"dataSource\") public DataSourceProxy dataSource(DataSource druidDataSource)&#123; return new DataSourceProxy(druidDataSource); &#125; /* @Bean public SqlSessionFactory sqlSessionFactory(DataSourceProxy dataSourceProxy)throws Exception&#123; SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean(); sqlSessionFactoryBean.setDataSource(dataSourceProxy); sqlSessionFactoryBean.setMapperLocations(new PathMatchingResourcePatternResolver() .getResources(\"classpath*:/mapper/*.xml\")); sqlSessionFactoryBean.setTransactionFactory(new SpringManagedTransactionFactory()); return sqlSessionFactoryBean.getObject(); &#125;*/&#125; 修改启动类1@SpringBootApplication(exclude = DataSourceAutoConfiguration.class) 修改完将以上操作在pay中复制. 数据库新增表因为我是模拟的, 所以,只要是操作数据库就行了,就没弄多个库,在一个数据库,一个表tb_user此时在加一个seata需要的表undo_log 1234567891011121314151617181920212223-- ------------------------------ Table structure for undo_log-- ----------------------------DROP TABLE IF EXISTS `undo_log`;CREATE TABLE `undo_log` ( `id` bigint(20) NOT NULL AUTO_INCREMENT, `branch_id` bigint(20) NOT NULL, `xid` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, `context` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, `rollback_info` longblob NOT NULL, `log_status` int(11) NOT NULL, `log_created` datetime NOT NULL, `log_modified` datetime NOT NULL, `ext` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE, UNIQUE INDEX `ux_undo_log`(`xid`, `branch_id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;-- ------------------------------ Records of undo_log-- ----------------------------SET FOREIGN_KEY_CHECKS = 1; 测试order中调用pay创建一条数据,然后自己在创建一条语句.在order方法上加上注解 1@GlobalTransactional 启动order 启动pay,测试! pay日志:添加数据成功没错,但是结果回滚了order日志:最终数据库还是没有添加进去 再测:调用订单–&gt;先本地添加数据, 然后在调用支付,让支付失败,看订单是否回滚测试结果还是回滚.自己一步一步一步一步敲出来的,希望我下次不要遇到这些问题.","categories":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://gmaya.top/categories/SpringCloud/"}],"tags":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://gmaya.top/tags/SpringCloud/"},{"name":"Eureka","slug":"Eureka","permalink":"https://gmaya.top/tags/Eureka/"},{"name":"seata","slug":"seata","permalink":"https://gmaya.top/tags/seata/"}]},{"title":"Spring Cloud 整合mybatis-plus (五)","slug":"20200327","date":"2020-03-27T04:26:43.000Z","updated":"2020-04-11T12:24:17.117Z","comments":true,"path":"2020/20200327/","link":"","permalink":"https://gmaya.top/2020/20200327/","excerpt":"","text":"前言其实这个整合,和spring 或者 spring boot 整合一样的其实都是一键生成的,自己把模板配好就行,从controller到service,dao,实体,增删改查我只是拷贝过来几个测试这个项目之前刚接触mybatis-plus的时候也写过自动生成的文章 引入jar1234567891011121314151617181920&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.0.7.1&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt; 修改配置文件我mysql数据库8.0以上的,如果你的是5.+的版本,自己该数据源即可 1234567891011121314151617181920spring: application: name: order datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/gmaya?allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8 username: root password: admin#mybatis-plusmybatis-plus: mapper-locations: classpath:/mapper/*.xml typeAliasesPackage: com.gmaya.order.entity global-config: db-config: id-type: AUTO field-strategy: NOT_NULL column-underline: true logic-delete-value: 1 # 数据库删除字段,1代表删除 logic-not-delete-value: 0 # 0代表没删除 banner: false 新增配置类123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.gmaya.order.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import com.baomidou.mybatisplus.core.injector.ISqlInjector;import com.baomidou.mybatisplus.extension.injector.LogicSqlInjector;import com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor;import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;/** * mybatis-plus配置 * * @author GMaya */@Configurationpublic class MybatisPlusConfig &#123; /** * 分页插件 */ @Bean public PaginationInterceptor paginationInterceptor() &#123; return new PaginationInterceptor(); &#125; /** * 控制逻辑删除 * @return */ @Bean public ISqlInjector sqlInjector() &#123; return new LogicSqlInjector(); &#125; /** * 控制版本号 * @return */ @Bean public OptimisticLockerInterceptor optimisticLockerInterceptor() &#123; return new OptimisticLockerInterceptor(); &#125;&#125; 实体类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package com.gmaya.order.entity;import java.io.Serializable;import com.baomidou.mybatisplus.annotation.TableId;import com.baomidou.mybatisplus.annotation.TableLogic;import com.baomidou.mybatisplus.annotation.TableName;import com.baomidou.mybatisplus.annotation.Version;import lombok.Data;/** * DO * * @author GMaya */@Data@TableName(\"tb_user\")public class UserEntity implements Serializable &#123; private static final long serialVersionUID = 1L; /** * 用户id */ @TableId(value = \"id\") private Integer id; /** * 用户名称 */ private String name; /** * 用户年龄 */ private Integer age; /** * 是否删除。0未删除，1删除 */ @TableLogic private Integer isDtl; /** * 版本号 */ @Version private Integer version;&#125; dao1234567891011package com.gmaya.order.dao;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import com.gmaya.order.entity.UserEntity;import org.apache.ibatis.annotations.Mapper;import org.springframework.stereotype.Component;@Mapperpublic interface UserDao extends BaseMapper&lt;UserEntity&gt; &#123;&#125; service1234567891011121314package com.gmaya.order.service;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.extension.service.IService;import com.gmaya.order.entity.UserEntity;/** * 服务类 * @author GMaya */public interface UserService extends IService&lt;UserEntity&gt; &#123; int add(JSONObject jsonObject);&#125; impl12345678910111213141516171819202122232425262728293031323334353637package com.gmaya.order.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.gmaya.order.dao.UserDao;import com.gmaya.order.entity.UserEntity;import com.gmaya.order.service.UserService;import lombok.extern.slf4j.Slf4j;/** * * @author GMaya */@Service(\"userService\")@Slf4jpublic class UserServiceImpl extends ServiceImpl&lt;UserDao, UserEntity&gt; implements UserService &#123; @Override public int add(JSONObject jsonObject) &#123; log.info(\"log...订单开始......\"); UserEntity userEntity = new UserEntity(); userEntity.setAge(1); userEntity.setIsDtl(0); userEntity.setVersion(1); userEntity.setName(\"订单模拟\"); int insert = baseMapper.insert(userEntity); log.info(\"log...订单结束......\"); return insert; &#125;&#125;","categories":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://gmaya.top/categories/SpringCloud/"}],"tags":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://gmaya.top/tags/SpringCloud/"},{"name":"mybatis-plus","slug":"mybatis-plus","permalink":"https://gmaya.top/tags/mybatis-plus/"}]},{"title":"使用redis实现序列号工具类","slug":"20200323","date":"2020-03-23T10:43:11.000Z","updated":"2020-04-11T12:24:13.545Z","comments":true,"path":"2020/20200323/","link":"","permalink":"https://gmaya.top/2020/20200323/","excerpt":"","text":"前言项目中难免会带有字符的序列号,有的是每月从1开始, 有的是每天等等.以前也使用过存表的方式,每次获取之后加1.这次又了解了一个.记录一下redis为单线程，不存在线程安全问题. 序列号工具类 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889package com.gmaya.EurekaClient.util;import java.text.SimpleDateFormat;import java.util.Date;import java.util.concurrent.TimeUnit;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.support.atomic.RedisAtomicLong;import org.springframework.stereotype.Service;/** * 序列号工具类 * @author GMaya */@Servicepublic class SequenceUtil &#123; @Autowired private RedisTemplate redisTemplate; /** * 获取序列号 * 例子：假如需要获取订单号NO20200320000001等数据，前缀NO，后面的每天从1开始自增 * 调用getCode(\"NO\") 返回 202003200000001,0的个数根据自己业务量设置 * 自己将返回的字符串再次拼接上NO即可！序列号 = 'NO'+getCode(\"NO\") * @param keyPrefix 关键词前缀 * @return 序列号 */ public String getCode(String keyPrefix) &#123; // 当前日期加填充完0的值 return new SimpleDateFormat(\"yyyyMMdd\").format(new Date()) + getSequence(keyPrefix); &#125; /** * 根据关键词前缀设置redis的key * @param keyPrefix * @return */ private String getSequence(String keyPrefix) &#123; // 如果你的序列号需要每个月从1开始计算，那么时间就变为yyyyMM。 String currentDate = new SimpleDateFormat(\"yyyyMMdd\").format(new Date()); // 得到这个key的value值 Long num = getIncrementNum(\"seq:\" + keyPrefix + currentDate); // 填充这个值，一般情况下一天的序列号3位差不多，所以前面几位需要填充0 return getSequence(num); &#125; /** * 查询redis中这个key，并且加1返回 * @param key * @return */ private Long getIncrementNum(String key) &#123; // 不存在准备创建 键值对 RedisAtomicLong entityIdCounter = new RedisAtomicLong(key, redisTemplate.getConnectionFactory()); Long counter = entityIdCounter.incrementAndGet(); // 自增加1 if ((null == counter || counter.longValue() == 1)) &#123; // 初始设置过期时间 entityIdCounter.expire(2, TimeUnit.DAYS);// 单位天 &#125; return counter; &#125; static final int DEFAULT_LENGTH = 8; // 填充0的总位数 /** * 将数值前面填充0 * @param seq * @return */ private static String getSequence(long seq) &#123; String str = String.valueOf(seq); int len = str.length(); // 一般业务量不会超过8位数 if (len &gt;= DEFAULT_LENGTH) &#123; return str; &#125; // 前面填充0，保证数值一直是8位数 int rest = DEFAULT_LENGTH - len; StringBuilder sb = new StringBuilder(); for (int i = 0; i &lt; rest; i++) &#123; sb.append('0'); &#125; sb.append(str); return sb.toString(); &#125;&#125; 测试 1234567891011121314151617181920212223242526package com.gmaya.EurekaClient;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import com.gmaya.EurekaClient.util.SequenceUtil;@SpringBootTestclass EurekaClientApplicationTests &#123; @Autowired private SequenceUtil sequenceUtil; @Test public void getCode() &#123; String no = \"NO\" + sequenceUtil.getCode(\"NO\"); String no2 = \"NO\" + sequenceUtil.getCode(\"NO\"); String no3 = \"NO\" + sequenceUtil.getCode(\"NO\"); String no4 = \"NO\" + sequenceUtil.getCode(\"NO\"); System.out.println(no); System.out.println(no2); System.out.println(no3); System.out.println(no4); &#125;&#125; 结果: 1234NO2020032300000005NO2020032300000006NO2020032300000007NO2020032300000008","categories":[{"name":"Java","slug":"Java","permalink":"https://gmaya.top/categories/Java/"}],"tags":[{"name":"工具类","slug":"工具类","permalink":"https://gmaya.top/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"},{"name":"redis","slug":"redis","permalink":"https://gmaya.top/tags/redis/"}]},{"title":"分享一下uTools工具","slug":"20200321","date":"2020-03-21T07:22:11.000Z","updated":"2020-04-11T12:23:54.948Z","comments":true,"path":"2020/20200321/","link":"","permalink":"https://gmaya.top/2020/20200321/","excerpt":"","text":"持续加班ing..分享 一个自己正在使用的工具uTools你的生产力工具集 uTools是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。 具体优点自己体会吧.","categories":[{"name":"工具","slug":"工具","permalink":"https://gmaya.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://gmaya.top/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"IDEA常用插件","slug":"20200319","date":"2020-03-19T14:32:11.000Z","updated":"2020-04-11T12:23:00.196Z","comments":true,"path":"2020/20200319/","link":"","permalink":"https://gmaya.top/2020/20200319/","excerpt":"","text":"分享自己平时常用的idea插件 1.Mybatis Log Plugin 功能:把 mybatis 输出的sql日志还原成完整的sql语句。 将日志输出的sql语句中的问号 ? 替换成真正的参数值 直接在软件Plugins中下载即可,注意下载完要重启idea 在Tools中点击 即可进入 2.Rainbow Brackets 功能:彩虹方括号 让你的括号变得魔力转圈圈 3.Free Mybatis plugin 功能:在serviceImpl直接去到mapper.xml中的该方法 选中方法名,快捷键Ctrl + T","categories":[{"name":"Java","slug":"Java","permalink":"https://gmaya.top/categories/Java/"}],"tags":[{"name":"idea","slug":"idea","permalink":"https://gmaya.top/tags/idea/"},{"name":"插件","slug":"插件","permalink":"https://gmaya.top/tags/%E6%8F%92%E4%BB%B6/"}]},{"title":"Spring Cloud Hystrix断路器（四）","slug":"20200318","date":"2020-03-18T04:54:16.000Z","updated":"2020-04-11T12:22:56.197Z","comments":true,"path":"2020/20200318/","link":"","permalink":"https://gmaya.top/2020/20200318/","excerpt":"","text":"前言 在微服务场景中，通常会有很多层的服务调用。如果一个底层服务出现问题，故障会被向上传播给用户。我们需要一种机制，当底层服务不可用时，可以阻断故障的传播。这就是断路器的作用。他是系统服务稳定性的最后一重保障。 常常会遇到正在使用某个系统，点击到某一个功能的时候显示该模块正在升级或者请稍后查看等。怎么实现呢？？ 使用Feign整合Hystrix默认是不开启的，需要修改配置文件application.yml，添加下面的代码 1234feign: hystrix: #开启Hystrix熔断，默认false enabled: true 新增支付模块熔断器 123456789101112/** * @ Description : 支付模块熔断器 * @ Author : GMaya * @ CreateDate : 2020/3/18 9:35 * @ Version : 1.0 */@Componentpublic class PayClientFallBack implements PayClient &#123; @Override public String getPay() &#123; return \"支付模块正在抢修，请稍后！\" +\" :feign演示\"; &#125;&#125; 修改PayClient接口 1@FeignClient(name = \"pay\",fallback = PayClientFallBack.class) // 服务名称 启动服务端，启动pay客户端，启动order客户端。访问http://localhost:8082/getOrder然后把pay客户端关掉！ 使用RestTemplat整合Hystrixpom添加j依赖 12345&lt;!--熔断器--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;&lt;/dependency&gt; 启动类新增注解 1@EnableCircuitBreaker 或者 @SpringBootApplication+@EnableDiscoveryClient+@EnableCircuitBreaker也可以使用@SpringCloudApplication 一个顶替仨 SpringCloudApplication注解 源码： 修改订单接口 123456789101112131415161718192021222324252627/** * @ Description : 订单接口接口 * @ Author : GMaya * @ CreateDate : 2020/3/16 11:03 * @ Version : 1.0 */@RestControllerpublic class OrderController &#123;// @Autowired// private PayClient payClient; // 注入支付模块服务 @Autowired private RestTemplate restTemplate; @RequestMapping(\"/getOrder\") @HystrixCommand(fallbackMethod = \"getRestTemplateFallBack\") public String getOrder()&#123; String pay = restTemplate.getForObject(\"http://pay/getPay\", String.class); // String pay = payClient.getPay(); return pay; &#125; private String getRestTemplateFallBack()&#123; return \"不好啦，机房着火了，restTemplate演示！\"; &#125;&#125; 当然，当接口多的时候，还可以改造 123456789101112131415161718192021222324252627282930313233/** * @ Description : 订单接口接口 * @ Author : GMaya * @ CreateDate : 2020/3/16 11:03 * @ Version : 1.0 */@RestController@DefaultProperties(defaultFallback = \"defaultFallback\")public class OrderController &#123;// @Autowired// private PayClient payClient; // 注入支付模块服务 @Autowired private RestTemplate restTemplate; @RequestMapping(\"/getOrder\")// @HystrixCommand(fallbackMethod = \"getRestTemplateFallBack\") @HystrixCommand // 使用默认熔断，加一个注解就行 public String getOrder()&#123; String pay = restTemplate.getForObject(\"http://pay/getPay\", String.class); // String pay = payClient.getPay(); return pay; &#125; private String getRestTemplateFallBack()&#123; return \"不好啦，机房着火了，restTemplate演示！\"; &#125; private String defaultFallback()&#123; return \"默认熔断！\"; &#125;&#125; 重启查看 最后：额外配置，如需更多，请查看专业解释 如果设置和默认值一样，没必要写出来配置 123456789101112131415161718feign: hystrix: #开启Hystrix熔断，默认false enabled: truehystrix: command: # 全局设置 default: execution: isolation: # 命令执行超时时间，默认1000ms，只在线程池隔离中有效。 thread: timeoutInMilliseconds: 1000 # 发生超时是是否中断，默认true，只在线程池隔离中有效。 interruptOnTimeout: true # 执行是否启用超时，默认启用true，只在线程池隔离中有效。 timeout: enabled: true","categories":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://gmaya.top/categories/SpringCloud/"}],"tags":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://gmaya.top/tags/SpringCloud/"},{"name":"Hystrix","slug":"Hystrix","permalink":"https://gmaya.top/tags/Hystrix/"}]},{"title":"Short 类型直接和数值1做对比","slug":"20200317","date":"2020-03-17T04:34:16.000Z","updated":"2020-04-11T12:22:53.325Z","comments":true,"path":"2020/20200317/","link":"","permalink":"https://gmaya.top/2020/20200317/","excerpt":"","text":"今天写项目遇到了Short 返回1 需要做个判断，所以就多想了一下，研究了一下大声的告诉我，是true还是true还是true！！！ 12345public static void main(String[] args) &#123; Short a = 1; System.out.println(a.equals(1)); System.out.println(a==1);&#125; 一开始觉得包装类型用==和equals应该都可以的，但是结果却是，false，true。第二个就不说了，都知道。所以就研究了一下第一个equals扒拉源码！ctrl + o 找到equals 方法！ 12345678910111213141516/** * Compares this object to the specified object. The result is * &#123;@code true&#125; if and only if the argument is not * &#123;@code null&#125; and is a &#123;@code Short&#125; object that * contains the same &#123;@code short&#125; value as this object. * * @param obj the object to compare with * @return &#123;@code true&#125; if the objects are the same; * &#123;@code false&#125; otherwise. */public boolean equals(Object obj) &#123; if (obj instanceof Short) &#123; return value == ((Short)obj).shortValue(); &#125; return false;&#125; 搜嘎，原来不属于Short类型的，就是false那这个直接凭空写的这个1是什么类型啊。有去查了一下java的基本类型默认值，什么四类八种的 1234int初值为0long初值为0Lbyte初值为(byte)0short初值为(short)0 所以1我觉得是int型的 同时又看了一下Short 和Integer一样，都有缓存的Short 12345678910private static class ShortCache &#123; private ShortCache()&#123;&#125; static final Short cache[] = new Short[-(-128) + 127 + 1]; static &#123; for(int i = 0; i &lt; cache.length; i++) cache[i] = new Short((short)(i - 128)); &#125; &#125; Integer 123456789101112131415161718192021222324252627282930313233private static class IntegerCache &#123; static final int low = -128; static final int high; static final Integer cache[]; static &#123; // high value may be configured by property int h = 127; String integerCacheHighPropValue = sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\"); if (integerCacheHighPropValue != null) &#123; try &#123; int i = parseInt(integerCacheHighPropValue); i = Math.max(i, 127); // Maximum array size is Integer.MAX_VALUE h = Math.min(i, Integer.MAX_VALUE - (-low) -1); &#125; catch( NumberFormatException nfe) &#123; // If the property cannot be parsed into an int, ignore it. &#125; &#125; high = h; cache = new Integer[(high - low) + 1]; int j = low; for(int k = 0; k &lt; cache.length; k++) cache[k] = new Integer(j++); // range [-128, 127] must be interned (JLS7 5.1.7) assert IntegerCache.high &gt;= 127; &#125; private IntegerCache() &#123;&#125; &#125;","categories":[{"name":"后端开发","slug":"后端开发","permalink":"https://gmaya.top/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://gmaya.top/tags/Java/"}]},{"title":"Spring Cloud Eureka服务通信Ribbon/Feign（三）","slug":"20200316-2","date":"2020-03-16T14:12:12.000Z","updated":"2020-04-11T12:22:49.251Z","comments":true,"path":"2020/20200316-2/","link":"","permalink":"https://gmaya.top/2020/20200316-2/","excerpt":"","text":"问题每一个客户端就是一个完整的项目，是一个模块，假如我有订单模块，支付模块，用户模块，等等，那么我这些模块之间怎么相互调用呢？采用HttpClient工具类访问？ Ribbon 和 Feign 简介Ribbon 简介 Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将Netflix的中间层服务连接在一起。Ribbon 客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出 Load Balancer 后面所有的机器，Ribbon 会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们也很容易使用Ribbon实现自定义的负载均衡算法。简单地说，Ribbon 是一个客户端负载均衡器。 Feign 简介 Feign 是一个声明式的 web service 客户端，它使得编写 web service 客户端更为容易。创建接口，为接口添加注解，即可使用Feign。Feign可以使用Feign注解或者JAX-RS注解，还支持热插拔的编码器和解码器。Spring Cloud 为Feign添加了Spring MVC的注解支持，并整合了Ribbon和Eureka来为使用 Feign 时提供负载均衡。 创建支付模块（客户端）起名pay项目，也可以去spring官网 https://start.spring.io/按照之前的办法创建再介绍一个方法，直接在idea中创建下一步填写组织和项目名称搜索添加下一步完成然后按照客户端的修改操作进行修改修改application.yml因为是小demo，所以就不使用集群了，电脑有点卡。真实情况每个服务端和客户端有可能都不在一个服务器上 1234567891011spring: application: name: payserver: port: 8081eureka: client: service-url: #注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔 #defaultZone: http://server01:8761/eureka/,http://server02:8762/eureka/ defaultZone: http://server01:8761/eureka/ 修改启动项添加注解@EnableDiscoveryClient添加一个正常情况下的最简洁支付接口 123456789101112131415/** * @ Description : 支付接口 * @ Author : GMaya * @ CreateDate : 2020/3/16 10:53 * @ Version : 1.0 */@RestControllerpublic class PayController &#123; @RequestMapping(\"/getPay\") public String getPay()&#123; // 返回支付信息 return \"this pay！！！\"; &#125;&#125; 创建订单模块（客户端）跟上面支付模块一模一样的操作。。。注意：创建订单最简洁订单的接口 123456789101112131415/** * @ Description : 订单接口 * @ Author : GMaya * @ CreateDate : 2020/3/16 11:03 * @ Version : 1.0 */@RestControllerpublic class OrderController &#123; @RequestMapping(\"/getOrder\") public String getOrder()&#123; // 返回订单信息 return \"this order！！！\"; &#125;&#125; 此时两个正常的项目已经创建完毕，那么我订单模块怎么去调用支付模块呢？ 方式一：RestTemplate调用修改订单模块接口 123456@RequestMapping(\"/getOrder\") public String getOrder()&#123; RestTemplate restTemplate = new RestTemplate(); String forObject = restTemplate.getForObject(\"http://localhost:8081/getPay\", String.class); return forObject; &#125; 启动服务端，启动支付端，启动订单端调用支付接口调用订单接口可以看出调用成功，但是缺点也很明显，必须要知道对方的url地址，对于多个实例那就难受了，所以是不可取的。 方式二：通过 @LoadBalanced添加RestTemplateConfig配置 1234567891011121314/** * @ Description : RestTemplate配置类 * @ Author : GMaya * @ CreateDate : 2020/3/16 11:24 * @ Version : 1.0 */@Componentpublic class RestTemplateConfig &#123; @Bean @LoadBalanced public RestTemplate restTemplate()&#123; return new RestTemplate(); &#125;&#125; 修改订单接口此时只需要填写调用的项目名就好了，跟ip无关。 123456789101112131415161718/** * @ Description : 订单接口接口 * @ Author : GMaya * @ CreateDate : 2020/3/16 11:03 * @ Version : 1.0 */@RestControllerpublic class OrderController &#123; @Autowired private RestTemplate restTemplate; @RequestMapping(\"/getOrder\") public String getOrder()&#123; String forObject = restTemplate.getForObject(\"http://PAY/getPay\", String.class); return forObject; &#125;&#125; 重启订单项目查看 @LoadBalanced 源码注解源码注释中说，用来标记restTemplate使之配置使用LoadBalancerClient 12345678910111213/** * Annotation to mark a RestTemplate or WebClient bean to be configured to use a * LoadBalancerClient. * @author Spencer Gibb */@Target(&#123; ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD &#125;)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@Qualifierpublic @interface LoadBalanced &#123;&#125; LoadBalancerClient则表示客户端负载均衡器。所以使用@LoadBalanced就代表使用ribbon实现客户端的负载均衡负载均衡的策略默认使用的是轮询算法 负载均衡是在同一个功能的微服务中根据不同的策略选择不同的微服务，因此这些微服务对外暴露的实例名称要相同（spring.application.name）ribbon是一个客户端的负载均衡，必须要连接eureka，才能在指定的微服务实例中按照策略选择 假设支付模块（pay）部署在两台或者多台服务器，只有端口号不一样，其他的都一样，那么我订单模块按照轮询算法去调用支付模块。 方式三：通过 Feign第一步：添加Feign依赖打开订单模块pom文件 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;&lt;/dependency&gt; 第二步：修改订单模块启动类OrderApplication添加注解@EnableFeignClients第三步：声明需要调用的接口创建PayClient接口 123456789101112/** * @ Description : 支付接口声明 * @ Author : GMaya * @ CreateDate : 2020/3/16 14:28 * @ Version : 1.0 */@FeignClient(name = \"pay\") // 服务名称public interface PayClient &#123; @RequestMapping(\"/getPay\") // 这里要和pay提供的接口一致 String getPay();&#125; 修改OrderController 123456789101112131415161718/** * @ Description : 订单接口接口 * @ Author : GMaya * @ CreateDate : 2020/3/16 11:03 * @ Version : 1.0 */@RestControllerpublic class OrderController &#123; @Autowired private PayClient payClient; // 注入支付模块服务 @RequestMapping(\"/getOrder\") public String getOrder()&#123; String pay = payClient.getPay(); return pay; &#125;&#125; 重启订单模块项目，一切正常！ 只有先入门，才能追查源码以及骚操作！","categories":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://gmaya.top/categories/SpringCloud/"}],"tags":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://gmaya.top/tags/SpringCloud/"},{"name":"Eureka","slug":"Eureka","permalink":"https://gmaya.top/tags/Eureka/"}]},{"title":"Spring Cloud Eureka高可用的服务注册中心（二）","slug":"20200316","date":"2020-03-16T04:52:12.000Z","updated":"2020-04-11T12:22:33.067Z","comments":true,"path":"2020/20200316/","link":"","permalink":"https://gmaya.top/2020/20200316/","excerpt":"","text":"集群原理图如果只有一个注册中心（服务端），一旦挂掉，就直接GG，在分布式系统中，任何地方存在单点故障，整个系统就不是高可用的。（自己手画的难看见谅） 创建服务端2在上一篇文章中写了最简单的单服务端，单客户端的例子。所以，在上一篇的基础上，继续新建一个服务端，起名字叫做服务端2登录spring官网 https://start.spring.io/保存到本地之后，导入项目服务器2（EurekaServerTwo）启动类添加注解 1@EnableEurekaServer 修改EurekaServerTwo配置文件application.yml 123456789101112131415161718server: port: 8762eureka: client: service-url: # #注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔 # 向端口8761注册(两个服务端互相注册) defaultZone: http://server01:8761/eureka/ # 指示此实例是否应将其信息注册到eureka服务器以供其他服务发现，默认为false register-with-eureka: false instance: # 该服务实例所在主机名 hostname: server02 server: # 启用自我保护机制，默认为true enable-self-preservation: falsespring: profiles: server02 修改服务器1EurekaServer修改EurekaServer项目的配置文件application.yml 123456789101112131415161718server: port: 8761eureka: client: service-url: # 注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔 # 向端口8762注册(两个服务端互相注册) defaultZone: http://server02:8762/eureka/ # 指示此实例是否应将其信息注册到eureka服务器以供其他服务发现，默认为false register-with-eureka: false instance: # 该服务实例所在主机名 hostname: server01 server: # 启用自我保护机制，默认为true enable-self-preservation: falsespring: profiles: server01 修改电脑hosts文件修改host文件添加对application.yml配置文件中hostname的映射打开电脑C:\\Windows\\System32\\drivers\\etc找到hosts，在文件最后输入 12127.0.0.1 server01127.0.0.1 server02 注意使用管理员权限，不然没办法保存 启动查看效果修改启动配置项在服务器1配置 1-Dspring.profiles.active=server01 在服务器2配置 1-Dspring.profiles.active=server02 启动服务器1，启动服务器2，启动客户端如果在启动中报错，先则是因为服务器1向服务器2注册没有连接上，等你服务器2启动完毕就不会报错了。最终在浏览器查看效果http://localhost:8761/http://localhost:8762/ 停止服务器1此时检验效果，停止服务器1，即端口号为：8761的服务器稍微等待一会，因为有默认的失效时间。查看http://localhost:8762此时客户端已经消失，这是因为客户端没有配置服务器2的注册。 修改客户端修改EurekaClient项目的配置文件application.yml将两个注册中心全部配置上去 12345678910spring: application: name: eureka-clientserver: port: 8711eureka: client: service-url: #注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔 defaultZone: http://server01:8761/eureka/,http://server02:8762/eureka/ 将server02注册进来，重新启动服务端1，服务端2，客户端，再次演示上面断掉服务端1的操作这个时候server02就能一直显示客户端的注册 这样就算一个服务器挂掉，对整体也不会有影响了。","categories":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://gmaya.top/categories/SpringCloud/"}],"tags":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://gmaya.top/tags/SpringCloud/"},{"name":"Eureka","slug":"Eureka","permalink":"https://gmaya.top/tags/Eureka/"}]},{"title":"Spring Cloud Eureka最简单的入门（一）","slug":"20200315","date":"2020-03-15T13:33:45.000Z","updated":"2020-04-11T12:21:39.168Z","comments":true,"path":"2020/20200315/","link":"","permalink":"https://gmaya.top/2020/20200315/","excerpt":"","text":"Eureka介绍 Eureka是一个基于REST的服务，主要用于AWS云中的定位服务，以实现中间层服务器的负载平衡和故障转移，在 Spring Cloud 微服务架构中通常用作注册中心，我们称这个服务为 Eureka Server，还有一个与之交互的客户端称之为 Eureka Client 创建eureka服务端登录spring官网 https://start.spring.io/写好组名称，和项目名称,搜索eureka server，点击+，选择导出到本地。将下载好的项目导入idea。 然后在eureka server项目启动类添加注解 1@EnableEurekaServer 修改配置application.yml文件其中defaultZone前后注意空格，而且这个单词是关联不出来的。 123456789101112131415server: port: 8761eureka: client: service-url: defaultZone: http://localhost:8761/eureka/ # 指示此实例是否应将其信息注册到eureka服务器以供其他服务发现，默认为false register-with-eureka: false server: # 启用自我保护机制，默认为true enable-self-preservation: falsespring: application: # 微服务名称 name: eureka 启动localhost:8761显示页面即为成功！ 创建eureka客户端登录spring官网 https://start.spring.io/修改项目名称，搜索eureka discovery client 。点击+ ，保存到本地保存到本地之后，在上一个项目中打开选择eureka客户端导入。 修改eureka客户端启动类添加注解 1@EnableDiscoveryClient pom文件添加 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; 修改配置文件application.yml 12345678910spring: application: name: eureka-clientserver: port: 8711eureka: client: service-url: #注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“,”进行分隔 defaultZone: http://localhost:8761/eureka/ 启动服务端，启动客户端最简单的一个spring cloud + eureka 服务注册到此结束。全部是采用默认形式，最简单的一个项目搭建。","categories":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://gmaya.top/categories/SpringCloud/"}],"tags":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://gmaya.top/tags/SpringCloud/"},{"name":"Eureka","slug":"Eureka","permalink":"https://gmaya.top/tags/Eureka/"}]},{"title":"浅谈 MySQL 中优化 SQL 语句查询常用的 30 种方法","slug":"20200314","date":"2020-03-14T12:08:11.000Z","updated":"2020-04-11T12:21:36.274Z","comments":true,"path":"2020/20200314/","link":"","permalink":"https://gmaya.top/2020/20200314/","excerpt":"","text":"转载于网络，作者不详。 1、对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。 2、应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。 3、应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如： 1select id from t where num is null 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询： 1select id from t where num=0 4、应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如： 1select id from t where num=10 or num=20 可以这样查询： 123select id from t where num=10 union all select id from t where num=20 5、下面的查询也将导致全表扫描： 1select id from t where name like '%abc%' 若要提高效率，可以考虑全文检索。 6、in 和 not in 也要慎用，否则会导致全表扫描，如： 1select id from t where num in(1,2,3) 对于连续的数值，能用 between 就不要用 in 了： 1select id from t where num between 1 and 3 7、如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描： 1select id from t where num=@num 可以改为强制查询使用索引： 1select id from t with(index(索引名)) where num=@num 8、应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如： 1select id from t where num/2=100 应改为: 1select id from t where num=100*2 9、应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：name以abc开头的id 1select id from t where substring(name,1,3)='abc' ‘2005-11-30’生成的id 1select id from t where datediff(day,createdate,'2005-11-30')=0 应改为: 12select id from t where name like 'abc%' select id from t where createdate&gt;='2005-11-30' and createdate&lt;'2005-12-1' 10、不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。 11、在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。 12、不要写一些没有意义的查询，如需要生成一个空表结构： 1select col1,col2 into #t from t where 1=0 这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样： 1create table #t(...) 13、很多时候用 exists 代替 in 是一个好的选择： 1select num from a where num in(select num from b) 用下面的语句替换： 1select num from a where exists(select 1 from b where num=a.num) 14、并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。 15、索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。 16、应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。 17、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。 18、尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。 19、任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。 20、尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。 21、避免频繁创建和删除临时表，以减少系统表资源的消耗。 22、临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。 23、在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。 24、如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。 25、尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。 26、使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。 27、与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。 28、在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。 29、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。 30、尽量避免大事务操作，提高系统并发能力。","categories":[{"name":"mysql","slug":"mysql","permalink":"https://gmaya.top/categories/mysql/"}],"tags":[{"name":"日常分享","slug":"日常分享","permalink":"https://gmaya.top/tags/%E6%97%A5%E5%B8%B8%E5%88%86%E4%BA%AB/"}]},{"title":"idea新建springboot项目pom文件报错","slug":"20200313","date":"2020-03-13T05:01:11.000Z","updated":"2020-04-11T12:21:32.763Z","comments":true,"path":"2020/20200313/","link":"","permalink":"https://gmaya.top/2020/20200313/","excerpt":"","text":"前言之前也有过类似的情况，只不过都是把spring-boot-starter-parent版本号改成本地仓库已经有的，然后继续开发。今天想写个demo，就新建了一个，然后版本号不一致，就一直报错，所以找了一天问题，才解决。太可怕了 新建springboot项目的问题使用idea，一路next，到最后生成项目然后pom文件报错我特意换了一个全新的maven，发现是因为jar拉不下来，就配置了国内镜像找到maven ，conf 打开 settings.xml。在mirrors里面写入 1234567891011121314151617181920212223242526272829303132&lt;!-- 阿里云镜像 --&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;central&lt;/id&gt; &lt;name&gt;Maven Repository Switchboard&lt;/name&gt; &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;&lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;repo2&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://repo2.maven.org/maven2/&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;ibiblio&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://mirrors.ibiblio.org/pub/mirrors/maven2/&lt;/url&gt; &lt;/mirror&gt;&lt;!-- 中央仓库在中国的镜像 --&gt; &lt;mirror&gt; &lt;id&gt;maven.net.cn&lt;/id&gt; &lt;name&gt;oneof the central mirrors in china&lt;/name&gt; &lt;url&gt;http://maven.net.cn/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; 然后发现还是有点问题，有些拉不下来。继续设置idea，打开设置，搜索maven将上面的勾打上然后在VM Options下面输入 123-Dmaven.wagon.http.ssl.insecure=true-Dmaven.wagon.http.ssl.allowall=true-Dmaven.wagon.http.ssl.ignore.validity.dates=true 然后点击最右面maven，重新安装一下（拉完之后再把勾去掉，还原）此时已经解决了我所有报错的问题，然后启动项目是启动不起来的，因为没有web继续在pom加入spring-boot-starter-web 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; 启动类中加入hello代码校验启动，浏览器输入http://localhost:8080/hello哎。真tm菜","categories":[{"name":"idea","slug":"idea","permalink":"https://gmaya.top/categories/idea/"}],"tags":[{"name":"java","slug":"java","permalink":"https://gmaya.top/tags/java/"}]},{"title":"hexo配置最新next主题的几个问题","slug":"20200312","date":"2020-03-12T05:01:11.000Z","updated":"2020-04-11T12:20:51.412Z","comments":true,"path":"2020/20200312/","link":"","permalink":"https://gmaya.top/2020/20200312/","excerpt":"","text":"前言截止到写这博客的时间，花费了一天左右的时间，将next主题美化了一下，以此记录。 模板我的博客使用next模板为Mist，打开主题配置文件 添加背景线条效果我是参考canvas-nest官方网站 创建文件在根目录的source 文件夹下创建_data文件夹，然后创建footer.swig注意不要将位置创建到主题里面去，然后将代码拷贝进去即可 1&lt;script color=\"0,0,0\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"&gt;&lt;/script&gt; 其中color是颜色值，opacity是透明度，zIndex是现在层级，count是线条数量。 设置路径打开主题配置文件搜索 custom_file_path 将footer注释打开然后 hexo g ， hexo s ，启动看看效果 首页文章之间周围有边框刚开始这个首页文章之间没有边框，每个文章之间没有明显的间隔。效果：打开：\\themes\\next\\source\\css_common\\components\\post\\post.styl大概35行，找到motion.transition.post_block修改前： 12345if (hexo-config('motion.transition.post_block')) &#123; .post-block, .pagination, .comments &#123; opacity: 0; &#125; &#125; 修改后： 1234567891011if (hexo-config('motion.transition.post_block')) &#123; .post-block&#123; opacity: 0; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; .pagination, .comments &#123; opacity: 0; &#125;&#125; 然后 hexo g ， hexo s ，启动看看效果 修改文章之间的间隔默认的文章间距120px，有点大。 打开：\\themes\\next\\source\\css_schemes\\Mist_posts-expand.styl大概24行，找到.post-block:not修改前： 123.post-block:not(:first-child) &#123; margin-top: 120px;&#125; 将120px，修改为你想要的间距，我改成了20px修改后： 123.post-block:not(:first-child) &#123; margin-top: 20px;&#125; 评论数显示为英文问题我使用的Valine评论，但是文章标题下面显示的评论数为英文。打开：\\themes\\next\\languages\\zh-CN.yml在post下面新增： 1comments.valine: 评论数 注意空格，和下面保持对齐","categories":[{"name":"hexo","slug":"hexo","permalink":"https://gmaya.top/categories/hexo/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://gmaya.top/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"获取qq音乐分享链接","slug":"0308","date":"2020-03-08T06:12:15.000Z","updated":"2020-04-11T12:19:36.514Z","comments":true,"path":"2020/0308/","link":"","permalink":"https://gmaya.top/2020/0308/","excerpt":"","text":"前言想要写个插件。支持qq，微信，在群里面点歌，这就要获取音乐接口的api 了。注：只允许个人学习使用。 分析通过浏览器分析音乐查询接口，分享接口，等等qq音乐搜索接口： 1https://c.y.qq.com/soso/fcgi-bin/client_search_cp?p=1&amp;n=1&amp;w=水手&amp;format=json&amp;inCharset=utf8&amp;outCharset=utf-8 其中：w=歌名，p=页数，n=条数，format=格式。剩下两个就是编码格式了 结果：得到以下几个参数：albumname：专辑albumid ： 专辑idalbummid : 专辑图片songname ：歌名singer[0].name:歌手名字songid ： 分享链接使用 音乐分享链接： 1https://i.y.qq.com/v8/playsong.html?songid= 例子： 1https://i.y.qq.com/v8/playsong.html?songid=4829638 获取专辑图片： 1https://y.gtimg.cn/music/photo_new/T002R300x300M000专辑图片.jpg 例子： 1https://y.gtimg.cn/music/photo_new/T002R300x300M000002MwneO44kDAi.jpg","categories":[{"name":"接口","slug":"接口","permalink":"https://gmaya.top/categories/%E6%8E%A5%E5%8F%A3/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://gmaya.top/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"易语言对接腾讯ai智能闲聊","slug":"0307","date":"2020-03-07T03:29:25.000Z","updated":"2020-04-11T12:19:30.564Z","comments":true,"path":"2020/0307/","link":"","permalink":"https://gmaya.top/2020/0307/","excerpt":"","text":"介绍 腾讯闲聊服务基于AI Lab领先的NLP引擎能力、数据运算能力和千亿级互联网语料数据的支持，同时集成了广泛的知识问答能力，可实现上百种自定义属性配置，以及男、女不同的语言风格及说话方式，从而让聊天变得更睿智、简单和有趣 基础闲聊接口提供基于文本的基础聊天能力，可以让您的应用快速拥有具备上下文语义理解的机器聊天功能。 注：同时我将此接口制作成插件，可以应用在QQ和微信上。再也不怕自己一个人没人聊天了。 准备首先在腾讯ai官网注册自己的账号，将智能闲聊接入。然后在控制台-应用管理，找到刚接入的智能闲聊，在应用信息里面得到APPID，APPKEY两个参数。 基础闲聊API地址： 1https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat 入参： 编写代码getAI 方法 注意： #app_id 和 #app_key 就是上面申请得到的两个参数 1234567891011121314151617181920212223242526272829303132333435363738.版本 2.子程序 getAI, , 公开.参数 msg, 文本型, , 消息内容.局部变量 入参, 文本型.局部变量 time_stamp, 文本型.局部变量 nonce_str, 文本型.局部变量 session, 文本型.局部变量 question, 文本型.局部变量 sign, 文本型.局部变量 反参, 文本型.局部变量 JSON, 类_json.局部变量 回复消息, 文本型msg ＝ 删全部空 (msg)' 限制问题字数不能超过250字节 ，官方要求：非空且长度上限300字节.如果真 (取文本长度 (msg) ＞ 250) 返回 ().如果真结束time_stamp ＝ 时间_取现行时间戳 (真)nonce_str ＝ 文本_取随机字符 (16)session ＝ nonce_strquestion ＝ 编码_URL编码 (编码_gb2312到utf8 (msg), 真, )入参 ＝ “app_id=” ＋ #app_id ＋ “&amp;nonce_str=” ＋ nonce_str ＋ “&amp;question=” ＋ question ＋ “&amp;session=” ＋ session ＋ “&amp;time_stamp=” ＋ time_stamp' 入参一定要按照字典顺序排好，不然签名不对sign ＝ getSign (入参)入参 ＝ 入参 ＋ “&amp;sign=” ＋ sign反参 ＝ 编码_utf8到gb2312 (网页_访问S (“https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat”, 1, 入参, , , , , , , , , , , , , , , , , , )).如果真 (JSON.解析 (反参)) .如果真 (JSON.取通用属性 (“ret”, ) ＝ “0”) 回复消息 ＝ JSON.取通用属性 (“data.answer”, ) .如果真 (回复消息 ≠ “”) ' 得到智能ai的回答之后，做你想做的事情 .如果真结束 .如果真结束 getSign 方法 1234567.版本 2.子程序 getSign, 文本型.参数 入参, 文本型返回 (校验_取md5 (到字节集 (入参 ＋ “&amp;app_key=” ＋ #app_key), 真, )) 结束最后还可以在腾讯ai控制台中配置多重属性的闲聊画像，并且可配置的属性会持续增加，使闲聊的风格因您的喜好而不同。可以实时观看应用概况","categories":[{"name":"易语言","slug":"易语言","permalink":"https://gmaya.top/categories/%E6%98%93%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"易语言","slug":"易语言","permalink":"https://gmaya.top/tags/%E6%98%93%E8%AF%AD%E8%A8%80/"}]},{"title":"win10安装git","slug":"0306","date":"2020-03-06T09:57:08.000Z","updated":"2020-04-11T12:18:57.799Z","comments":true,"path":"2020/0306/","link":"","permalink":"https://gmaya.top/2020/0306/","excerpt":"","text":"下载git去git官网下载win版本64位安装全部下一步到结束 下载小乌龟去tortoriseGit官网下载64位小乌龟。然后下面还有一个中文语言包（不下载也行），Language Packs 下面的 Chinese, simplified先安装小乌龟，一路暴力下一步到结束。安装语言包，一路到结束。鼠标右键打开小乌龟设置，选择语言为中文，结束！ 生成SSH密钥鼠标右键 打开 Git Bash 输入下面的命令将邮箱换成你自己的邮箱、然后回车 1ssh-keygen -o -t rsa -b 4096 -C \"email@example.com\" 然后出现提示 密钥保存的位置。记一下使用默认密钥地址，继续回车提示你对密钥设置密码，这里无需设置，直接按回车键就好，要按两次回车键。之后就会显示保存成功然后打开默认位置，看一下有没有两个文件 添加密钥到Git服务器登录进来之后点击右上角的图标，选择settings设置SSH密钥选择 SSH keys然后 new SSH keys将刚才生成的公钥放进去保存即可。 配置本地私钥在文件夹空白处右键选择TortoiseGit的设置(setting)选项一直点下一步到下面的这个页面，中间会让你输入你的名称和邮箱（名称随便写，邮箱还写你那个邮箱），然后点击 生成PuTTY密钥对选择你刚才的私钥然后点击Save private key 保存成PuTTY 格式的私钥保存成功后关闭窗口 TortoiseGit克隆项目加载私钥右键Git克隆弹出如下窗口结束。","categories":[{"name":"工具","slug":"工具","permalink":"https://gmaya.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"安装git","slug":"安装git","permalink":"https://gmaya.top/tags/%E5%AE%89%E8%A3%85git/"}]},{"title":"酷q表情使用","slug":"0119","date":"2020-01-19T12:20:52.000Z","updated":"2020-04-11T12:18:53.749Z","comments":true,"path":"2020/0119/","link":"","permalink":"https://gmaya.top/2020/0119/","excerpt":"","text":"表情1在消息内添加 [CQ:face,id=XXX] 其中XXX为下面中的编号 例如你想添加微笑表情：[CQ:face,id=14][CQ:face,id=14][CQ:face,id=14] 结果就是三个微笑表情 表情2在消息内添加 [CQ:emoji,id=XXX] 其中XXX为下面中的编号 例如你想添加雪花表情：[CQ:emoji,id=10052]","categories":[{"name":"酷q","slug":"酷q","permalink":"https://gmaya.top/categories/%E9%85%B7q/"}],"tags":[{"name":"工具类","slug":"工具类","permalink":"https://gmaya.top/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"},{"name":"酷q","slug":"酷q","permalink":"https://gmaya.top/tags/%E9%85%B7q/"}]},{"title":"Excel导出导入","slug":"0116","date":"2020-01-16T14:40:12.000Z","updated":"2020-04-11T12:18:49.969Z","comments":true,"path":"2020/0116/","link":"","permalink":"https://gmaya.top/2020/0116/","excerpt":"","text":"1. EasyExcel介绍1.1 为什么使用EasyExcel？ Java解析、生成Excel比较有名的框架有Apache poi、jxl。但他们都存在一个严重的问题就是非常的耗内存，poi有一套SAX模式的API可以一定程度的解决一些内存溢出的问题，但POI还是有一些缺陷，比如07版Excel解压缩以及解压后存储都是在内存中完成的，内存消耗依然很大。easyexcel重写了poi对07版Excel的解析，能够原本一个3M的excel用POI sax依然需要100M左右内存降低到几M，并且再大的excel不会出现内存溢出，03版依赖POI的sax模式。在上层做了模型转换的封装，让使用者更加简单方便 快速、简单避免OOM的java处理Excel工具，64M内存1分钟内读取75M(46W行25列)的Excel。 写的内容大致和阅读官方文档差不多 2. 开始使用2.1 引入jar123456789101112&lt;!--easyexcel插件 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;easyexcel&lt;/artifactId&gt; &lt;version&gt;2.1.4&lt;/version&gt;&lt;/dependency&gt;&lt;!--lombok插件--&gt;&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt; 2.2 实体类根据自己的情况自定义表格导入导出实体类 12345678910111213141516171819202122232425262728293031323334353637package top.gmaya.demo.excelentity;import com.alibaba.excel.annotation.ExcelIgnore;import com.alibaba.excel.annotation.ExcelProperty;import com.alibaba.excel.annotation.format.DateTimeFormat;import com.alibaba.excel.annotation.write.style.ColumnWidth;import lombok.Data;import java.util.Date;/** * @ Description : 用户表格专用实体 * @ Author : GMaya * @ CreateDate : 2020/1/16 9:13 * @ Version : 1.0 */@Datapublic class UserExcel&#123; /** 生成报表时忽略，不生成次字段 */ @ExcelIgnore private Long id; /** 定义表头名称和位置,0代表第一列 */ @ExcelProperty(value = \"用户名称\",index = 0) private String userName; @ExcelProperty(value = \"用户年龄\",index = 1) private int userAge; @ExcelProperty(value = \"用户昵称\",index = 2) private String userNick; @ExcelProperty(value = \"用户地址\",index = 3) private String userAddress; /** 指定列宽 */ @ColumnWidth(20) /** 转化时间 */ @DateTimeFormat(value = \"yyyy-MM-dd\") @ExcelProperty(value = \"用户生日\",index = 4) private Date userBrithday;&#125; 2.3 ExcelUtil工具类根据实际情况封装成工具类，我就写了俩 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package top.gmaya.demo.util;import com.alibaba.excel.EasyExcel;import com.alibaba.excel.read.listener.ReadListener;import com.alibaba.excel.support.ExcelTypeEnum;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.net.URLEncoder;import java.util.List;/** * @ Description : excel工具类 * @ Author : GMaya * @ CreateDate : 2020/1/16 9:35 * @ Version : 1.0 */public class ExcelUtil &#123; /** * 导出文件 到浏览器 * @param response 响应请求 * @param excelName excel名称 * @param sheetName sheet页面名称 * @param clazz 要转换的实体类类型 * @param data 要导出的数据 * @throws Exception 异常 */ public static void export2Web(HttpServletResponse response, String excelName, String sheetName, Class clazz, List data) throws Exception &#123; response.setContentType(\"application/vnd.ms-excel\"); response.setCharacterEncoding(\"utf-8\"); // 这里URLEncoder.encode可以防止中文乱码 excelName = URLEncoder.encode(excelName, \"UTF-8\"); response.setHeader(\"Content-disposition\", \"attachment;filename=\" + excelName + ExcelTypeEnum.XLSX.getValue()); EasyExcel.write(response.getOutputStream(), clazz).sheet(sheetName).doWrite(data); &#125; /** * 读取Excel表格 * @param excel 文件 * @param head 实体类映射 * @param readListener 模板的读取类 * @throws Exception */ public static void readExcel(MultipartFile excel, Class head,ReadListener readListener) throws Exception&#123; EasyExcel.read(excel.getInputStream(),head,readListener).sheet().doRead(); &#125;&#125; 2.4 模板读取类创建模板读取类， 这个是表格导入的时候需要的，表格中的数据将在这个类里面单独处理，根据类里面设置的数值进行存库，也就是10w条数据，每当1000条就存一下表，方便内存回收。 不然一次性读10w，要占多少。。。实际情况将下面的构造方法注释打开，相当于你在controller中调用，然后将Service传进来就ok了。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374package top.gmaya.demo.excelentity;import com.alibaba.excel.context.AnalysisContext;import com.alibaba.excel.event.AnalysisEventListener;import lombok.extern.slf4j.Slf4j;import java.util.ArrayList;import java.util.List;/** * @ Description : 模板的读取类 * @ Author : GMaya * @ CreateDate : 2020/1/16 10:43 * @ Version : 1.0 */// 有个很重要的点 UserListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去@Slf4j public class UserListener extends AnalysisEventListener&lt;UserExcel&gt; &#123; /** * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收 */ private static final int BATCH_COUNT = 5; List&lt;UserExcel&gt; list = new ArrayList&lt;&gt;(); /** * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。 */ // private UserService userService; /* public UserListener()&#123; // 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数 userService = new UserService(); &#125;*/ /** * 如果使用了spring,请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来 * * @param userService */ /* public UserListener(UserService userService) &#123; this.userService = userService; &#125;*/ /** * 这个每一条数据解析都会来调用 * @param data * @param context * */ @Override public void invoke(UserExcel data, AnalysisContext context) &#123; log.info(\"解析到一条数据:&#123;&#125;\", data.getUserName()); list.add(data); if (list.size() &gt;= BATCH_COUNT) &#123; // 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM saveData(); // 存储完成清理 list list.clear(); &#125; &#125; @Override public void doAfterAllAnalysed(AnalysisContext context) &#123; saveData(); log.info(\"所有数据解析完成！\"); &#125; /** * 加上存储数据库 */ private void saveData() &#123; log.info(\"&#123;&#125;条数据，开始存储数据库！\", list.size()); // userService.saveBatch(list); log.info(\"存储数据库成功！\"); &#125;&#125; 2.5 controller测试12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package top.gmaya.demo.controller;import com.alibaba.excel.EasyExcel;import com.alibaba.excel.ExcelReader;import lombok.extern.slf4j.Slf4j;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.multipart.MultipartFile;import top.gmaya.demo.entity.User;import top.gmaya.demo.excelentity.UserExcel;import top.gmaya.demo.excelentity.UserListener;import top.gmaya.demo.util.ExcelUtil;import javax.servlet.http.HttpServletResponse;import java.util.ArrayList;import java.util.Date;import java.util.List;/** * @ Description : 测试 * @ Author : GMaya * @ CreateDate : 2020/1/15 16:55 * @ Version : 1.0 */@Slf4j @RestController public class DemoController &#123; /** * 导出excel * @param response */ @GetMapping(\"/export2Web\") public void export2Web(HttpServletResponse response, String id) &#123; // 模拟数据 List&lt;User&gt; list = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; 10; i++) &#123; User user = new User((long) i, \"张三\" + i, i, \"小三\" + i, \"杭州\" + i, new Date()); list.add(user); &#125; try &#123; ExcelUtil.export2Web(response, \"用户表\", \"用户信息\", UserExcel.class, list); &#125; catch (Exception e) &#123; log.error(\"报表导出异常:\", e); &#125; &#125; /** * 导入excel * @param file * @return */ @PostMapping(\"/exportImport\") public String exportImport(MultipartFile file) &#123; try &#123; ExcelUtil.readExcel(file, UserExcel.class, new UserListener()); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return \"succeed\"; &#125;&#125; 3. 测试3.1 导出测试启动项目，浏览器访问接口直接弹框提示保存位置。保存查看里面内容 3.2 导入测试使用postman测试文件导入key：Content-Typevalue：multipart/form-data","categories":[{"name":"后端开发","slug":"后端开发","permalink":"https://gmaya.top/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://gmaya.top/tags/Java/"},{"name":"工具类","slug":"工具类","permalink":"https://gmaya.top/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"}]},{"title":"建站心得","slug":"0110","date":"2020-01-10T13:20:33.000Z","updated":"2020-04-11T12:18:44.566Z","comments":true,"path":"2020/0110/","link":"","permalink":"https://gmaya.top/2020/0110/","excerpt":"","text":"从偶然发现个人博客开始，就开始着手搭建一个自己的博客网站，也许写不出什么有技术含量的东西，但是也图个新鲜，练练手，记录一下自己的成长经历！但是就是这个随手开始弄得网站，前前后后花了将近一个月，SO,我要将自己的过程记录下来！ 1. 买服务器&lt;此步骤可以省略&gt;我是购买的腾讯云，首次大幅度优惠，99/年。当然，博客如果都是静态页面，也可以不需要服务器，直接部署到github，或者码云上，都是可以的（免费）。如果你只需要搭建博客不需要其他的，可以不买服务器，忽略即可。我是因为还要用服务器干点其他的。 2. 买域名&lt;此步骤可以省略&gt;我是在腾讯云打折5块钱买了一年的域名，虽然不买也行，用github自动生成的也中，但我不想要！ 2.1 备案使用国内服务器，域名不管是哪里的，都需要备案！反正我资料啥的一顿填，大概半个月备案成功！我刚开始买了之后大概一星期左右网站使用域名已经进不去了，一直让我去备案。 2.2 域名解析将域名解析到我的服务器 2.3 nginx代理我是使用的nginx代理的静态页面，然后将我生成好的博客页面直接放到服务器，配置好nginx的配置就ok，然后直接访问域名。当然也可以搞个tomcat放到里面。 2.4 SSL证书弄完之后我的访问域名是不安全的链接，所以我又免费申请了一个SSL证书，配置到nginx中，然后博客就可以https访问了。 3. hexo建站3.1 配置环境首先根据hexo官方网站将本地环境搭建起来，对于经常使用git提交拉取公司项目的人，很快都搞定了。 3.2 挑选模板直接在hexo官方网站挑选自己中意的博客模板，我默默挑了好多，中间改过好几次，总之挑一个自己喜欢的。 3.3 修改模板一般都是根据模板的博主介绍，一步一步一步一步一步一步修改成为自己的博客。总之我感觉这一步是最长的。 4. 写博客不积跬步，无以至千里；不积小流，无以成江海。在接下来的岁月写你想写的东西吧。","categories":[{"name":"自我抒写","slug":"自我抒写","permalink":"https://gmaya.top/categories/%E8%87%AA%E6%88%91%E6%8A%92%E5%86%99/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://gmaya.top/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"认识酷q","slug":"kuq-know","date":"2019-12-30T13:41:04.000Z","updated":"2020-04-11T12:38:44.717Z","comments":true,"path":"2019/kuq-know/","link":"","permalink":"https://gmaya.top/2019/kuq-know/","excerpt":"","text":"##酷q是干嘛的 酷Q Air 是一个轻巧、免费、高效的机器人核心，功能需要安装“应用”实现。登录酷Q，完成教程后，建议 访问 酷Q应用发布板块，下载安装您所需要的应用，创造让大家喜爱并且属于你自己的专属机器人。 官网：酷q社区 通俗的讲就是，打造一个属于自己的qq机器人，有点类似于现在的q群管家，qq小冰。但是你可以把他的功能再次扩大！（活跃群气氛必不可少）。主要有：入群欢迎，问答，便民（查天气，查快递等），各种小游戏娱乐，关键词禁言等等，需要看代码功底，当然你也可以去社区下载别人分享的插件，直接使用。 我也是在偶然的机会认识到了酷q，然后就爱不释手，从0开始学习了易语言，然后写出了第一个酷q插件猜拳签到游戏，当然我并不满足，然后又写出了查电影，问答，查运势，查天气，查新闻，随机笑话等，当然这些我并没有发布出来， 因为这些第三方接口我是免费用的，每天有限制几百条， 所以不适合分享，只是在自己的群里面使用而已。 如果你和我一样刚刚认识酷q，那么你不妨看一下这个快速入门使用sdk进行酷q开发。由于教程很多，我就没得写了，如果有不懂的可以留言评论或者到关于我页面查看联系方式。 但是我是java开发者，使用易语言难免有所不习惯，所以参考了南荒喵大佬的教程，使用支持java的sdk进行开发。 到了最后我在此demo上又加上mybatis-plus，springboot，连接数据库，等一系列操作。 有的时候思路是个好东西，当我弄完之后，我不知道写什么东西了，整天都是配环境，搭建环境，但是到最后写插件内容的时候，迷茫了，写什么呢，写什么好呢，写什么会有人用呢，看社区里面，那都是人家写出来的，你再写一遍干嘛呢。 好多东西都是 从简单，到复杂，到迷茫，到不知所措。（服务器自己买了一个，酷q是用的免费的） 然后我就认识了jsoup，百度百科是这样说的 jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。 然后我就又陷入了进去，忘记了游戏，忘记了时间。 希望前进的路上不再迷茫！","categories":[{"name":"酷q","slug":"酷q","permalink":"https://gmaya.top/categories/%E9%85%B7q/"}],"tags":[{"name":"酷q","slug":"酷q","permalink":"https://gmaya.top/tags/%E9%85%B7q/"}]},{"title":"idea在jdk1.8情况下使用反编译插件","slug":"idea-decompilation","date":"2019-12-30T05:41:01.000Z","updated":"2020-04-11T12:38:47.928Z","comments":true,"path":"2019/idea-decompilation/","link":"","permalink":"https://gmaya.top/2019/idea-decompilation/","excerpt":"","text":"前言使用JD-GUI在jdk1.8情况下失效，我也查找了好多办法，最后看到idea有默认的，只是没有打开，瞬间搞定，记录一下！ 没有反编译是显示compiled code 123public static void debug(java.lang.String... messages) &#123; /* compiled code */ &#125;public static void debug(java.lang.Object... messages) &#123; /* compiled code */ &#125; idea不需要安装任何插件， 比如JD-GUI（这个在jdk1.8还是打不开） 因为，安装idea默认有，只是没有打开罢了 打开setting –&gt;plugings 搜索 Java Bytecode Decompiler 勾选，然后重启idea （注意：你的其他反编译插件就不要开了，关掉） 重启之后会让你选择 是否同意使用此插件， 点击最左面accept，同意即可！","categories":[{"name":"自我抒写","slug":"自我抒写","permalink":"https://gmaya.top/categories/%E8%87%AA%E6%88%91%E6%8A%92%E5%86%99/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://gmaya.top/tags/Java/"},{"name":"idea插件","slug":"idea插件","permalink":"https://gmaya.top/tags/idea%E6%8F%92%E4%BB%B6/"}]},{"title":"Java性能测试大比拼","slug":"property-compare","date":"2019-12-28T15:23:56.000Z","updated":"2020-04-11T12:38:38.129Z","comments":true,"path":"2019/property-compare/","link":"","permalink":"https://gmaya.top/2019/property-compare/","excerpt":"","text":"实体类转换哪个快？Map循环遍历哪个快？转换为字符串哪个快？测试，分析，看源码，看底层知识。 dao和vo实体转换比拼参与比拼的两个选手: org.springframework.beans.BeanUtils org.springframework.cglib.beans.BeanCopier 测试方式: 1234567891011121314151617181920public static void main(String[] args) &#123; int leng = 10000000; Stu stu = new Stu(); stu.setStuId(\"id\"); stu.setStuName(\"name\"); stu.setStuAge(12); stu.setStuClassId(\"ClassId\"); StuVO stuVO = new StuVO(); long l = System.currentTimeMillis(); for (int i = 0; i &lt; leng; i++) &#123; BeanCopier beanCopier = BeanCopier.create(stu.getClass(), stuVO.getClass(), false); beanCopier.copy(stu,stuVO,null); &#125; System.out.println(\"beanCopier.copy:\"+(System.currentTimeMillis()-l)); l = System.currentTimeMillis(); for (int i = 0; i &lt; leng; i++) &#123; BeanUtils.copyProperties(stu,stuVO); &#125; System.out.println(\"BeanUtils.copyProperties:\"+(System.currentTimeMillis()-l)); &#125; 比拼结果: 备注: 如果把BeanCopier.create放到循环外,效率还可以加快!!! 可能由于各方面原因,次数较少时测试不准 Map遍历几种方式比拼参与比拼的四个选手: keySet的for循环方式 keySet的iterator迭代器方式 entrySet的for循环方式 entrySet的iterator迭代器方式 测试方式: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667public static void main(String[] args) &#123; Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); for (int i = 0; i &lt; 1; i++) &#123; map.put(i + \"\", i + \"AA\"); &#125; keySet(map); keySetIterator(map); entrySet(map); entrySetIterator(map); &#125; /** * keySet的for循环方式 * @param map */ public static void keySet(Map&lt;String, String&gt; map)&#123; long startTime = System.currentTimeMillis(); for (String key : map.keySet()) &#123; String value = map.get(key); &#125; long endTime = System.currentTimeMillis(); System.out.println(\"keySet运行时间\" + (endTime - startTime)); &#125; /** * keySet的iterator迭代器方式 * @param map */ public static void keySetIterator(Map&lt;String, String&gt; map)&#123; long startTime = System.currentTimeMillis(); Iterator&lt;String&gt; iterator = map.keySet().iterator(); while (iterator.hasNext()) &#123; String key = iterator.next(); String value = map.get(key); &#125; long endTime = System.currentTimeMillis(); System.out.println(\"keySetIterator运行时间\" + (endTime - startTime)); &#125; /** * entrySet的for循环方式 * @param map */ public static void entrySet(Map&lt;String, String&gt; map)&#123; long startTime = System.currentTimeMillis(); for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123; String key = entry.getKey(); String value = entry.getValue(); &#125; long endTime = System.currentTimeMillis(); System.out.println(\"entrySet运行时间\" + (endTime - startTime)); &#125; /** * entrySet的iterator迭代器方式 * @param map */ public static void entrySetIterator(Map&lt;String, String&gt; map)&#123; long startTime = System.currentTimeMillis(); Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator(); while (iterator.hasNext()) &#123; Map.Entry&lt;String, String&gt; entry = iterator.next(); String key = entry.getKey(); String value = entry.getValue(); &#125; long endTime = System.currentTimeMillis(); System.out.println(\"entrySetIterator运行时间\" + (endTime - startTime)); &#125; 比拼结果: 备注:可能由于各方面原因,次数较少时测试不准 基本数据类型转为字符串方法比拼参与比拼的三个选手: 基本数据类型.toString() String.valueOf(数据) 数据+”” 测试方法: 12345678910111213141516171819public static void main(String[] args) &#123; int end = 1000000000; Integer t = 1; long startTime = System.currentTimeMillis(); for (int i = 0; i &lt; end; i++)&#123; String str = t.toString(); &#125; System.out.println(\"Integer.toString()：\" + (System.currentTimeMillis() - startTime) + \"ms\"); startTime = System.currentTimeMillis(); for (int i = 0; i &lt; end; i++)&#123; String str = String.valueOf(t); &#125; System.out.println(\"String.valueOf()：\" + (System.currentTimeMillis() - startTime) + \"ms\"); startTime = System.currentTimeMillis(); for (int i = 0; i &lt; end; i++)&#123; String str = t + \"\"; &#125; System.out.println(\"t + '' :\" + (System.currentTimeMillis() - startTime) + \"ms\"); &#125; 比拼结果: 备注:可能由于各方面原因,次数较少时测试不准 123451.String.valueOf()方法底层调用了Integer.toString()方法，但是会在调用前做空判断2.Integer.toString()方法，直接调用3.t + \"\"底层使用了StringBuilder实现，先用append方法拼接，再用toString()方法获取字符串","categories":[{"name":"后端开发","slug":"后端开发","permalink":"https://gmaya.top/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://gmaya.top/tags/Java/"},{"name":"性能比较","slug":"性能比较","permalink":"https://gmaya.top/tags/%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/"}]},{"title":"Mybatis-plus之自动生成","slug":"Mybatis-plus","date":"2019-12-27T14:16:25.000Z","updated":"2020-04-11T12:38:40.895Z","comments":true,"path":"2019/Mybatis-plus/","link":"","permalink":"https://gmaya.top/2019/Mybatis-plus/","excerpt":"","text":"1. 前言本文章首次是在csdn上写的，本次发布到自己的博客中，增添一点色彩。 点击查看Mybatis-plus官方文档 MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。 2. 创建spring boot 项目使用idea默认生成即可 … 3. 修改pom文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt;&lt;/dependency&gt;&lt;!--mybatis-plus自动生成代码--&gt;&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt;&lt;/dependency&gt;&lt;!-- velocity 模版引擎 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt; &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt; &lt;version&gt;2.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;!--lombok--&gt;&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.16.16&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;&lt;!--swagger2--&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt; 4. 修改application.yml文件123456789101112131415161718server: port: 8080spring: datasource: url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8 username: root password: admin driver-class-name: com.mysql.jdbc.Drivermybatis-plus: mapperLocations: classpath*:mapper/*.xml typeAliasesPackage: com.mybatis.plus.demo.model # mybatis 别名包扫描路径 global-config: db-config: logic-delete-value: 1 #逻辑已删除值(默认为 1) logic-not-delete-value: 0 # 逻辑未删除值(默认为 0) configuration: log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #线上关闭sql日志打印 5. 修改启动类 6. 创建Mybatis-plus配置新建文件MyBatisPlusConfiguration 注意 : 如果使用mp自带的控制逻辑删除和控制版本号还有分页功能,则需要添加这个配置 12345678910111213141516171819202122232425262728293031323334353637package com.plus.demo.util;import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import com.baomidou.mybatisplus.core.injector.ISqlInjector;import com.baomidou.mybatisplus.extension.injector.LogicSqlInjector;import com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor;@Configurationpublic class MyBatisPlusConfiguration &#123; /** * 控制逻辑删除 * @return */ @Bean public ISqlInjector sqlInjector() &#123; return new LogicSqlInjector(); &#125; /** * 控制版本号 * @return */ @Bean public OptimisticLockerInterceptor optimisticLockerInterceptor() &#123; return new OptimisticLockerInterceptor(); &#125; /** * 分页插件 */ @Bean public PaginationInterceptor paginationInterceptor() &#123; return new PaginationInterceptor(); &#125;&#125; 7. 编写自动生成工具类注 : 直接把Controller/service/serviceImpl/dao/mapper/form/vo全部生成 此处使用默认velocity 模版引擎 则没有常用的crud方法,使用自己的模板则可以生成常用的crud方法 其中自定义模板中有工具类是公司自己的jar包,所以只推荐参考 拷贝mybatis-plus-generator jar包中的模板到自己项目resources下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133package com.mybatis.plus.demo.util;import com.baomidou.mybatisplus.annotation.DbType;import com.baomidou.mybatisplus.annotation.IdType;import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;import com.baomidou.mybatisplus.core.toolkit.StringPool;import com.baomidou.mybatisplus.core.toolkit.StringUtils;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.InjectionConfig;import com.baomidou.mybatisplus.generator.config.*;import com.baomidou.mybatisplus.generator.config.converts.MySqlTypeConvert;import com.baomidou.mybatisplus.generator.config.po.TableInfo;import com.baomidou.mybatisplus.generator.config.rules.DbColumnType;import com.baomidou.mybatisplus.generator.config.rules.IColumnType;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;import java.util.ArrayList;import java.util.List;import java.util.Scanner;/** * 代码生成器 * */public class MabatisPlusGenerator &#123; private static String path = \"E:\\\\idea\\\\springboot-mybatis-plus\"; //文件路径 private static String table = \"tm_user\"; //table名字 public static void main(String[] args) &#123; //1. 全局配置 GlobalConfig config = new GlobalConfig(); config.setActiveRecord(false) // 是否支持AR模式 .setAuthor(\"GMaya\") // 作者 .setSwagger2(true) // 使用Swagger .setOutputDir(path + \"/src/main/java\") // 生成路径 .setFileOverride(true) // 文件覆盖 .setIdType(IdType.AUTO) // 主键策略 // 自定义文件命名，注意 %s 会自动填充表实体属性！ .setServiceName(\"%sService\").setServiceImplName(\"%sServiceImpl\") .setControllerName(\"%sController\").setMapperName(\"%sDao\").setXmlName(\"%sMapper\") .setOpen(false) // 生成文件后 不打开文件夹 .setBaseResultMap(true) // XML ResultMap .setBaseColumnList(true); // XML columList //2. 数据源配置 DataSourceConfig dsConfig = new DataSourceConfig(); dsConfig.setDbType(DbType.MYSQL) // 设置数据库类型 .setDriverName(\"com.mysql.jdbc.Driver\") .setUrl( \"jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8\") .setUsername(\"root\").setPassword(\"admin\").setTypeConvert(new MySqlTypeConvert() &#123; @Override public IColumnType processTypeConvert(GlobalConfig globalConfig, String fieldType) &#123; if (fieldType.toLowerCase().contains(\"tinyint\")) &#123; return DbColumnType.BOOLEAN; &#125; //将数据库中datetime转换成date if (fieldType.toLowerCase().contains(\"datetime\")) &#123; return DbColumnType.DATE; &#125; return super.processTypeConvert(globalConfig, fieldType); &#125; &#125;); //3. 策略配置 StrategyConfig stConfig = new StrategyConfig(); stConfig.setColumnNaming(NamingStrategy.underline_to_camel) .setNaming(NamingStrategy.underline_to_camel) // 数据库表映射到实体的命名策略 .setEntityLombokModel(true) // 使用Lombok .setVersionFieldName(\"version\") // 数据库版本控制字段 .setLogicDeleteFieldName(\"status\") // 数据库逻辑删除字段 .setRestControllerStyle(true) .setSuperServiceClass(\"com.baomidou.mybatisplus.extension.service.IService\") .setInclude(new String[]&#123;table&#125;); // 生成的表 //4. 包名策略配置 PackageConfig pkConfig = new PackageConfig(); pkConfig.setParent(\"com.mybatis.plus.demo\").setMapper(\"dao\").setService(\"service\") .setServiceImpl(\"service.impl\").setController(\"controller\").setEntity(\"model\"); //5.自定义配置 InjectionConfig cfg = new InjectionConfig() &#123; @Override public void initMap() &#123; // to do nothing &#125; &#125;; String templatePath = \"/templates/mapper.xml.vm\"; // 如果模板引擎是 velocity List&lt;FileOutConfig&gt; focList = new ArrayList&lt;&gt;(); // 自定义输出配置 focList.add(new FileOutConfig(templatePath) &#123; // 自定义配置会被优先输出 @Override public String outputFile(TableInfo tableInfo) &#123; // mapper自定义输出文件名 return path + \"/src/main/resources/mapper/\" + tableInfo.getEntityName() + \"Mapper\" + StringPool.DOT_XML; &#125; &#125;); // ------------form vo 使用默认模板请注释-begin----------- templatePath = \"/templates/entityForm.java.vm\"; focList.add(new FileOutConfig(templatePath) &#123; // 自定义配置会被优先输出 @Override public String outputFile(TableInfo tableInfo) &#123; // form自定义输出文件名 return path + \"/src/main/java/com/mybatis/plus/demo/pojo/\" + tableInfo.getEntityName() + \"Form\" + StringPool.DOT_JAVA; &#125; &#125;); templatePath = \"/templates/entityVO.java.vm\"; focList.add(new FileOutConfig(templatePath) &#123; // 自定义配置会被优先输出 @Override public String outputFile(TableInfo tableInfo) &#123; // VO自定义输出文件名 return path + \"/src/main/java/com/mybatis/plus/demo/pojo/\" + tableInfo.getEntityName() + \"VO\" + StringPool.DOT_JAVA; &#125; &#125;); // ------------form vo 使用默认模板请注释-end----------- cfg.setFileOutConfigList(focList); // 6 配置模板 自定义模板/在resources/templates 可以编辑 TemplateConfig templateConfig = new TemplateConfig(); // 关闭默认 xml 生成，调整生成 至 根目录 templateConfig.setEntity(\"/templates/entity.java\").setService(\"/templates/service.java\") .setController(\"/templates/controller.java\").setMapper(\"/templates/mapper.java\") .setServiceImpl(\"/templates/serviceImpl.java\").setXml(null); //7. 整合配置 AutoGenerator ag = new AutoGenerator(); ag.setGlobalConfig(config).setDataSource(dsConfig).setStrategy(stConfig).setCfg(cfg) .setPackageInfo(pkConfig).setTemplate(templateConfig); //8. 执行 ag.execute(); &#125;&#125; 注 : 如果是使用自定义模板,请注意修改模板中的form,vo引入包路径等 使用默认模板请注释代码中生成form/vo代码 第一次运行可能有以下错误,如果没有请忽略 问题1 : The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or represents 解决 : set global time_zone=’+8:00’ 问题2 : 使用Lombok插件,Idea,Eclipse必须安装改插件,否则找不到get/set方法 解决 : IDEA安装Lombok步骤 Eclipse的自行百度 /滑稽 修改文件路径表名之后运行 生成结构图如下 perfect ! ! !","categories":[{"name":"后端开发","slug":"后端开发","permalink":"https://gmaya.top/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://gmaya.top/tags/Java/"},{"name":"Mybatis-plus","slug":"Mybatis-plus","permalink":"https://gmaya.top/tags/Mybatis-plus/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-12-16T14:16:00.000Z","updated":"2020-04-11T12:38:51.986Z","comments":true,"path":"2019/hello-world/","link":"","permalink":"https://gmaya.top/2019/hello-world/","excerpt":"","text":"各种语言的Hello WorldJava1$ System.out.println(\"Hello,World!\"); 我说Java天下第一,你信么! C1$ printf(\"Hello,World!\"); C++1$ std::cout &lt;&lt; \"Hello,World!\" &lt;&lt; std::endl; Python1$ &gt;&gt;&gt; print(\"Hello,World!\") C#1$ Console.WriteLine(\"Hello,World!\"); PHP1$ echo \"Hello,World!\"; JavaScript12$ var sys = require(\"sys\"); sys.puts(\"Hello,World!\"); Ruby1$ puts \"Hello,World!\" R1$ print(\"Hello,World!\") SQL1$ select 'Hello,World!' from dual; HTML1$ &lt;p&gt;Hello,World!&lt;/p&gt; VB1$ MsgBox(\"Hello,World!\") Shell1$ echo \"Hello,World!\" Delphi1$ label1.Caption := 'Hello,World!'; TCL1$ % puts \"Hello,World!\" Pascal1$ writeln('Hello, world!') 我认输了, 我是菜鸟! 一个Hello, world! 打败我了","categories":[{"name":"后端开发","slug":"后端开发","permalink":"https://gmaya.top/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://gmaya.top/tags/Java/"}]}]}