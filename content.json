{"meta":{"title":"GMaya","subtitle":"博客","description":"JAVA/数据库/linux","author":"GMaya","url":"https://gmaya.gitee.io","root":"/"},"pages":[{"title":"简单却不平凡","date":"2019-12-26T07:35:07.000Z","updated":"2019-12-30T07:56:23.645Z","comments":false,"path":"about/index.html","permalink":"https://gmaya.gitee.io/about/index.html","excerpt":"","text":"个人介绍昵称： GMaya年龄： 95后职业： Java软件工程师爱好： 苦逼的后端开发，唯一的爱好就是别让我掉头发！扣扣： 1427097103邮箱： gmaya@qq.com 博客介绍博客的存在，就是道理。 记录平时工作上遇到的问题以及解决办法，希望能够帮助到遇到同样问题的伙伴。 博客的主要内容就是Java方面，数据库方面，以及各种开发工具等等。。。"}],"posts":[{"title":"认识酷q","slug":"kuq-know","date":"2019-12-30T13:41:04.000Z","updated":"2019-12-30T13:43:57.942Z","comments":true,"path":"2019/12/30/kuq-know/","link":"","permalink":"https://gmaya.gitee.io/2019/12/30/kuq-know/","excerpt":"酷Q Air 是一个轻巧、免费、高效的机器人核心，功能需要安装“应用”实现。登录酷Q，完成教程后，建议 访问 酷Q应用发布板块，下载安装您所需要的应用，创造让大家喜爱并且属于你自己的专属机器人。","text":"酷Q Air 是一个轻巧、免费、高效的机器人核心，功能需要安装“应用”实现。登录酷Q，完成教程后，建议 访问 酷Q应用发布板块，下载安装您所需要的应用，创造让大家喜爱并且属于你自己的专属机器人。 酷q是干嘛的 酷Q Air 是一个轻巧、免费、高效的机器人核心，功能需要安装“应用”实现。登录酷Q，完成教程后，建议 访问 酷Q应用发布板块，下载安装您所需要的应用，创造让大家喜爱并且属于你自己的专属机器人。 官网：酷q社区 通俗的讲就是，打造一个属于自己的qq机器人，有点类似于现在的q群管家，qq小冰。但是你可以把他的功能再次扩大！（活跃群气氛必不可少）。主要有：入群欢迎，问答，便民（查天气，查快递等），各种小游戏娱乐，关键词禁言等等，需要看代码功底，当然你也可以去社区下载别人分享的插件，直接使用。 我也是在偶然的机会认识到了酷q，然后就爱不释手，从0开始学习了易语言，然后写出了第一个酷q插件猜拳签到游戏，当然我并不满足，然后又写出了查电影，问答，查运势，查天气，查新闻，随机笑话等，当然这些我并没有发布出来， 因为这些第三方接口我是免费用的，每天有限制几百条， 所以不适合分享，只是在自己的群里面使用而已。 如果你和我一样刚刚认识酷q，那么你不妨看一下这个快速入门使用sdk进行酷q开发。由于教程很多，我就没得写了，如果有不懂的可以留言评论或者到关于我页面查看联系方式。 但是我是java开发者，使用易语言难免有所不习惯，所以参考了南荒喵大佬的教程，使用支持java的sdk进行开发。 到了最后我在此demo上又加上mybatis-plus，springboot，连接数据库，等一系列操作。 有的时候思路是个好东西，当我弄完之后，我不知道写什么东西了，整天都是配环境，搭建环境，但是到最后写插件内容的时候，迷茫了，写什么呢，写什么好呢，写什么会有人用呢，看社区里面，那都是人家写出来的，你再写一遍干嘛呢。 好多东西都是 从简单，到复杂，到迷茫，到不知所措。（服务器自己买了一个，酷q是用的免费的） 然后我就认识了jsoup，百度百科是这样说的 jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。 然后我就又陷入了进去，忘记了游戏，忘记了时间。 希望前进的路上不再迷茫！","categories":[{"name":"自我抒写","slug":"自我抒写","permalink":"https://gmaya.gitee.io/categories/%E8%87%AA%E6%88%91%E6%8A%92%E5%86%99/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://gmaya.gitee.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"idea在jdk1.8情况下使用反编译插件","slug":"idea-decompilation","date":"2019-12-30T05:41:01.000Z","updated":"2019-12-30T05:47:22.550Z","comments":true,"path":"2019/12/30/idea-decompilation/","link":"","permalink":"https://gmaya.gitee.io/2019/12/30/idea-decompilation/","excerpt":"使用JD-GUI在jdk1.8情况下失效，我也查找了好多办法，最后看到idea有默认的，只是没有打开，瞬间搞定，记录一下！","text":"使用JD-GUI在jdk1.8情况下失效，我也查找了好多办法，最后看到idea有默认的，只是没有打开，瞬间搞定，记录一下！ 没有反编译是显示compiled code 123public static void debug(java.lang.String... messages) &#123; /* compiled code */ &#125;public static void debug(java.lang.Object... messages) &#123; /* compiled code */ &#125; idea不需要安装任何插件， 比如JD-GUI（这个在jdk1.8还是打不开） 因为，安装idea默认有，只是没有打开罢了 打开setting –&gt;plugings 搜索 Java Bytecode Decompiler 勾选，然后重启idea （注意：你的其他反编译插件就不要开了，关掉） 重启之后会让你选择 是否同意使用此插件， 点击最左面accept，同意即可！","categories":[{"name":"后端开发","slug":"后端开发","permalink":"https://gmaya.gitee.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://gmaya.gitee.io/tags/Java/"},{"name":"idea插件","slug":"idea插件","permalink":"https://gmaya.gitee.io/tags/idea%E6%8F%92%E4%BB%B6/"}]},{"title":"Java性能测试大比拼","slug":"property-compare","date":"2019-12-28T15:23:56.000Z","updated":"2019-12-30T06:10:56.770Z","comments":true,"path":"2019/12/28/property-compare/","link":"","permalink":"https://gmaya.gitee.io/2019/12/28/property-compare/","excerpt":"实体类转换哪个快？Map循环遍历哪个快？转换为字符串哪个快？测试，分析，看源码，看底层知识。","text":"实体类转换哪个快？Map循环遍历哪个快？转换为字符串哪个快？测试，分析，看源码，看底层知识。 dao和vo实体转换比拼参与比拼的两个选手: org.springframework.beans.BeanUtils org.springframework.cglib.beans.BeanCopier 测试方式: 1234567891011121314151617181920public static void main(String[] args) &#123; int leng = 10000000; Stu stu = new Stu(); stu.setStuId(\"id\"); stu.setStuName(\"name\"); stu.setStuAge(12); stu.setStuClassId(\"ClassId\"); StuVO stuVO = new StuVO(); long l = System.currentTimeMillis(); for (int i = 0; i &lt; leng; i++) &#123; BeanCopier beanCopier = BeanCopier.create(stu.getClass(), stuVO.getClass(), false); beanCopier.copy(stu,stuVO,null); &#125; System.out.println(\"beanCopier.copy:\"+(System.currentTimeMillis()-l)); l = System.currentTimeMillis(); for (int i = 0; i &lt; leng; i++) &#123; BeanUtils.copyProperties(stu,stuVO); &#125; System.out.println(\"BeanUtils.copyProperties:\"+(System.currentTimeMillis()-l)); &#125; 比拼结果: 备注: 如果把BeanCopier.create放到循环外,效率还可以加快!!! 可能由于各方面原因,次数较少时测试不准 Map遍历几种方式比拼参与比拼的四个选手: keySet的for循环方式 keySet的iterator迭代器方式 entrySet的for循环方式 entrySet的iterator迭代器方式 测试方式: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667public static void main(String[] args) &#123; Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); for (int i = 0; i &lt; 1; i++) &#123; map.put(i + \"\", i + \"AA\"); &#125; keySet(map); keySetIterator(map); entrySet(map); entrySetIterator(map); &#125; /** * keySet的for循环方式 * @param map */ public static void keySet(Map&lt;String, String&gt; map)&#123; long startTime = System.currentTimeMillis(); for (String key : map.keySet()) &#123; String value = map.get(key); &#125; long endTime = System.currentTimeMillis(); System.out.println(\"keySet运行时间\" + (endTime - startTime)); &#125; /** * keySet的iterator迭代器方式 * @param map */ public static void keySetIterator(Map&lt;String, String&gt; map)&#123; long startTime = System.currentTimeMillis(); Iterator&lt;String&gt; iterator = map.keySet().iterator(); while (iterator.hasNext()) &#123; String key = iterator.next(); String value = map.get(key); &#125; long endTime = System.currentTimeMillis(); System.out.println(\"keySetIterator运行时间\" + (endTime - startTime)); &#125; /** * entrySet的for循环方式 * @param map */ public static void entrySet(Map&lt;String, String&gt; map)&#123; long startTime = System.currentTimeMillis(); for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123; String key = entry.getKey(); String value = entry.getValue(); &#125; long endTime = System.currentTimeMillis(); System.out.println(\"entrySet运行时间\" + (endTime - startTime)); &#125; /** * entrySet的iterator迭代器方式 * @param map */ public static void entrySetIterator(Map&lt;String, String&gt; map)&#123; long startTime = System.currentTimeMillis(); Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator(); while (iterator.hasNext()) &#123; Map.Entry&lt;String, String&gt; entry = iterator.next(); String key = entry.getKey(); String value = entry.getValue(); &#125; long endTime = System.currentTimeMillis(); System.out.println(\"entrySetIterator运行时间\" + (endTime - startTime)); &#125; 比拼结果: 备注:可能由于各方面原因,次数较少时测试不准 基本数据类型转为字符串方法比拼参与比拼的三个选手: 基本数据类型.toString() String.valueOf(数据) 数据+”” 测试方法: 12345678910111213141516171819public static void main(String[] args) &#123; int end = 1000000000; Integer t = 1; long startTime = System.currentTimeMillis(); for (int i = 0; i &lt; end; i++)&#123; String str = t.toString(); &#125; System.out.println(\"Integer.toString()：\" + (System.currentTimeMillis() - startTime) + \"ms\"); startTime = System.currentTimeMillis(); for (int i = 0; i &lt; end; i++)&#123; String str = String.valueOf(t); &#125; System.out.println(\"String.valueOf()：\" + (System.currentTimeMillis() - startTime) + \"ms\"); startTime = System.currentTimeMillis(); for (int i = 0; i &lt; end; i++)&#123; String str = t + \"\"; &#125; System.out.println(\"t + '' :\" + (System.currentTimeMillis() - startTime) + \"ms\"); &#125; 比拼结果: 备注:可能由于各方面原因,次数较少时测试不准 123451.String.valueOf()方法底层调用了Integer.toString()方法，但是会在调用前做空判断2.Integer.toString()方法，直接调用3.t + \"\"底层使用了StringBuilder实现，先用append方法拼接，再用toString()方法获取字符串","categories":[{"name":"后端开发","slug":"后端开发","permalink":"https://gmaya.gitee.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://gmaya.gitee.io/tags/Java/"},{"name":"性能比较","slug":"性能比较","permalink":"https://gmaya.gitee.io/tags/%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/"}]},{"title":"Mybatis-plus之自动生成","slug":"Mybatis-plus","date":"2019-12-27T14:16:25.000Z","updated":"2019-12-30T06:17:47.707Z","comments":true,"path":"2019/12/27/Mybatis-plus/","link":"","permalink":"https://gmaya.gitee.io/2019/12/27/Mybatis-plus/","excerpt":"MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。","text":"MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。 前言本文章首次是在csdn上写的，本次发布到自己的博客中，增添一点色彩。 点击查看Mybatis-plus官方文档 创建spring boot 项目使用idea默认生成即可 … 修改pom文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt;&lt;/dependency&gt;&lt;!--mybatis-plus自动生成代码--&gt;&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt;&lt;/dependency&gt;&lt;!-- velocity 模版引擎 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt; &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt; &lt;version&gt;2.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;!--lombok--&gt;&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.16.16&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;&lt;!--swagger2--&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt; 修改application.yml文件123456789101112131415161718server: port: 8080spring: datasource: url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8 username: root password: admin driver-class-name: com.mysql.jdbc.Drivermybatis-plus: mapperLocations: classpath*:mapper/*.xml typeAliasesPackage: com.mybatis.plus.demo.model # mybatis 别名包扫描路径 global-config: db-config: logic-delete-value: 1 #逻辑已删除值(默认为 1) logic-not-delete-value: 0 # 逻辑未删除值(默认为 0) configuration: log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #线上关闭sql日志打印 修改启动类 创建Mybatis-plus配置新建文件MyBatisPlusConfiguration 注意 : 如果使用mp自带的控制逻辑删除和控制版本号还有分页功能,则需要添加这个配置 12345678910111213141516171819202122232425262728293031323334353637package com.plus.demo.util;import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import com.baomidou.mybatisplus.core.injector.ISqlInjector;import com.baomidou.mybatisplus.extension.injector.LogicSqlInjector;import com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor;@Configurationpublic class MyBatisPlusConfiguration &#123; /** * 控制逻辑删除 * @return */ @Bean public ISqlInjector sqlInjector() &#123; return new LogicSqlInjector(); &#125; /** * 控制版本号 * @return */ @Bean public OptimisticLockerInterceptor optimisticLockerInterceptor() &#123; return new OptimisticLockerInterceptor(); &#125; /** * 分页插件 */ @Bean public PaginationInterceptor paginationInterceptor() &#123; return new PaginationInterceptor(); &#125;&#125; 编写自动生成工具类注 : 直接把Controller/service/serviceImpl/dao/mapper/form/vo全部生成 此处使用默认velocity 模版引擎 则没有常用的crud方法,使用自己的模板则可以生成常用的crud方法 其中自定义模板中有工具类是公司自己的jar包,所以只推荐参考 拷贝mybatis-plus-generator jar包中的模板到自己项目resources下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133package com.mybatis.plus.demo.util;import com.baomidou.mybatisplus.annotation.DbType;import com.baomidou.mybatisplus.annotation.IdType;import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;import com.baomidou.mybatisplus.core.toolkit.StringPool;import com.baomidou.mybatisplus.core.toolkit.StringUtils;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.InjectionConfig;import com.baomidou.mybatisplus.generator.config.*;import com.baomidou.mybatisplus.generator.config.converts.MySqlTypeConvert;import com.baomidou.mybatisplus.generator.config.po.TableInfo;import com.baomidou.mybatisplus.generator.config.rules.DbColumnType;import com.baomidou.mybatisplus.generator.config.rules.IColumnType;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;import java.util.ArrayList;import java.util.List;import java.util.Scanner;/** * 代码生成器 * */public class MabatisPlusGenerator &#123; private static String path = \"E:\\\\idea\\\\springboot-mybatis-plus\"; //文件路径 private static String table = \"tm_user\"; //table名字 public static void main(String[] args) &#123; //1. 全局配置 GlobalConfig config = new GlobalConfig(); config.setActiveRecord(false) // 是否支持AR模式 .setAuthor(\"GMaya\") // 作者 .setSwagger2(true) // 使用Swagger .setOutputDir(path + \"/src/main/java\") // 生成路径 .setFileOverride(true) // 文件覆盖 .setIdType(IdType.AUTO) // 主键策略 // 自定义文件命名，注意 %s 会自动填充表实体属性！ .setServiceName(\"%sService\").setServiceImplName(\"%sServiceImpl\") .setControllerName(\"%sController\").setMapperName(\"%sDao\").setXmlName(\"%sMapper\") .setOpen(false) // 生成文件后 不打开文件夹 .setBaseResultMap(true) // XML ResultMap .setBaseColumnList(true); // XML columList //2. 数据源配置 DataSourceConfig dsConfig = new DataSourceConfig(); dsConfig.setDbType(DbType.MYSQL) // 设置数据库类型 .setDriverName(\"com.mysql.jdbc.Driver\") .setUrl( \"jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8\") .setUsername(\"root\").setPassword(\"admin\").setTypeConvert(new MySqlTypeConvert() &#123; @Override public IColumnType processTypeConvert(GlobalConfig globalConfig, String fieldType) &#123; if (fieldType.toLowerCase().contains(\"tinyint\")) &#123; return DbColumnType.BOOLEAN; &#125; //将数据库中datetime转换成date if (fieldType.toLowerCase().contains(\"datetime\")) &#123; return DbColumnType.DATE; &#125; return super.processTypeConvert(globalConfig, fieldType); &#125; &#125;); //3. 策略配置 StrategyConfig stConfig = new StrategyConfig(); stConfig.setColumnNaming(NamingStrategy.underline_to_camel) .setNaming(NamingStrategy.underline_to_camel) // 数据库表映射到实体的命名策略 .setEntityLombokModel(true) // 使用Lombok .setVersionFieldName(\"version\") // 数据库版本控制字段 .setLogicDeleteFieldName(\"status\") // 数据库逻辑删除字段 .setRestControllerStyle(true) .setSuperServiceClass(\"com.baomidou.mybatisplus.extension.service.IService\") .setInclude(new String[]&#123;table&#125;); // 生成的表 //4. 包名策略配置 PackageConfig pkConfig = new PackageConfig(); pkConfig.setParent(\"com.mybatis.plus.demo\").setMapper(\"dao\").setService(\"service\") .setServiceImpl(\"service.impl\").setController(\"controller\").setEntity(\"model\"); //5.自定义配置 InjectionConfig cfg = new InjectionConfig() &#123; @Override public void initMap() &#123; // to do nothing &#125; &#125;; String templatePath = \"/templates/mapper.xml.vm\"; // 如果模板引擎是 velocity List&lt;FileOutConfig&gt; focList = new ArrayList&lt;&gt;(); // 自定义输出配置 focList.add(new FileOutConfig(templatePath) &#123; // 自定义配置会被优先输出 @Override public String outputFile(TableInfo tableInfo) &#123; // mapper自定义输出文件名 return path + \"/src/main/resources/mapper/\" + tableInfo.getEntityName() + \"Mapper\" + StringPool.DOT_XML; &#125; &#125;); // ------------form vo 使用默认模板请注释-begin----------- templatePath = \"/templates/entityForm.java.vm\"; focList.add(new FileOutConfig(templatePath) &#123; // 自定义配置会被优先输出 @Override public String outputFile(TableInfo tableInfo) &#123; // form自定义输出文件名 return path + \"/src/main/java/com/mybatis/plus/demo/pojo/\" + tableInfo.getEntityName() + \"Form\" + StringPool.DOT_JAVA; &#125; &#125;); templatePath = \"/templates/entityVO.java.vm\"; focList.add(new FileOutConfig(templatePath) &#123; // 自定义配置会被优先输出 @Override public String outputFile(TableInfo tableInfo) &#123; // VO自定义输出文件名 return path + \"/src/main/java/com/mybatis/plus/demo/pojo/\" + tableInfo.getEntityName() + \"VO\" + StringPool.DOT_JAVA; &#125; &#125;); // ------------form vo 使用默认模板请注释-end----------- cfg.setFileOutConfigList(focList); // 6 配置模板 自定义模板/在resources/templates 可以编辑 TemplateConfig templateConfig = new TemplateConfig(); // 关闭默认 xml 生成，调整生成 至 根目录 templateConfig.setEntity(\"/templates/entity.java\").setService(\"/templates/service.java\") .setController(\"/templates/controller.java\").setMapper(\"/templates/mapper.java\") .setServiceImpl(\"/templates/serviceImpl.java\").setXml(null); //7. 整合配置 AutoGenerator ag = new AutoGenerator(); ag.setGlobalConfig(config).setDataSource(dsConfig).setStrategy(stConfig).setCfg(cfg) .setPackageInfo(pkConfig).setTemplate(templateConfig); //8. 执行 ag.execute(); &#125;&#125; 注 : 如果是使用自定义模板,请注意修改模板中的form,vo引入包路径等 使用默认模板请注释代码中生成form/vo代码 第一次运行可能有以下错误,如果没有请忽略 问题1 : The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or represents 解决 : set global time_zone=’+8:00’ 问题2 : 使用Lombok插件,Idea,Eclipse必须安装改插件,否则找不到get/set方法 解决 : IDEA安装Lombok步骤 Eclipse的自行百度 /滑稽 修改文件路径表名之后运行 生成结构图如下 perfect ! ! !","categories":[{"name":"后端开发","slug":"后端开发","permalink":"https://gmaya.gitee.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://gmaya.gitee.io/tags/Java/"},{"name":"Mybatis-plus","slug":"Mybatis-plus","permalink":"https://gmaya.gitee.io/tags/Mybatis-plus/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-12-16T14:16:00.000Z","updated":"2020-01-02T05:43:47.066Z","comments":true,"path":"2019/12/16/hello-world/","link":"","permalink":"https://gmaya.gitee.io/2019/12/16/hello-world/","excerpt":"我的第一篇文章必须是Hello World , 这是对编程最基本的尊重!","text":"我的第一篇文章必须是Hello World , 这是对编程最基本的尊重! 各种语言的Hello WorldJava1$ System.out.println(\"Hello,World!\"); 我说Java天下第一,你信么! C1$ printf(\"Hello,World!\"); C++1$ std::cout &lt;&lt; \"Hello,World!\" &lt;&lt; std::endl; Python1$ &gt;&gt;&gt; print(\"Hello,World!\") C#1$ Console.WriteLine(\"Hello,World!\"); PHP1$ echo \"Hello,World!\"; JavaScript12$ var sys = require(\"sys\"); sys.puts(\"Hello,World!\"); Ruby1$ puts \"Hello,World!\" R1$ print(\"Hello,World!\") SQL1$ select 'Hello,World!' from dual; HTML1$ &lt;p&gt;Hello,World!&lt;/p&gt; VB1$ MsgBox(\"Hello,World!\") Shell1$ echo \"Hello,World!\" Delphi1$ label1.Caption := 'Hello,World!'; TCL1$ % puts \"Hello,World!\" Pascal1$ writeln('Hello, world!') 我认输了, 我是菜鸟! 一个Hello, world! 打败我了","categories":[{"name":"后端开发","slug":"后端开发","permalink":"https://gmaya.gitee.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://gmaya.gitee.io/tags/Java/"}]}]}