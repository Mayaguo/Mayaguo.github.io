<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>手撕Redis6.0</title>
    <url>/2020/20200522/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。性能极高： Redis能读的速度是110000次/s,写的速度是81000次/s 。</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>Linux</code>下安装<code>Redis</code>。去年好像写过一次。。。<a href="https://blog.csdn.net/gfl1427097103/article/details/83037214" target="_blank" rel="noopener">传送门</a></p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>本次下载的是<code>Redis</code>官网最新稳定版本</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># wget http://download.redis.io/releases/redis-6.0.3.tar.gz</span></code></pre>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># tar -zxvf redis-6.0.3.tar.gz</span></code></pre>
<p><code>注意</code>：解压完成，尽量检查一下Redis所依赖的gcc版本，版本过低会编译失败。需要gcc 4.9以上。</p>
<p><strong>升级gcc版本：</strong></p>
<pre class=" language-powershell"><code class="language-powershell">
<span class="token operator">/</span><span class="token operator">/</span> 检查gcc版本
<span class="token comment" spellcheck="true"># gcc -v </span>
<span class="token operator">/</span><span class="token operator">/</span> 升级gcc到9
<span class="token comment" spellcheck="true"># yum -y install centos-release-scl</span>
<span class="token comment" spellcheck="true"># yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span>
<span class="token comment" spellcheck="true"># scl enable devtoolset-9 bash</span>
<span class="token operator">/</span><span class="token operator">/</span> 以上为临时使用，如果长期使用执行下方：
<span class="token comment" spellcheck="true"># echo "source /opt/rh/devtoolset-9/enable" >>/etc/profile</span></code></pre>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>进入<code>redis-6.0.3</code>文件夹，进行编译。</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># make PREFIX=/usr/local/redis install</span></code></pre>
<p>安装成功会出现：</p>
<pre class=" language-powershell"><code class="language-powershell">Hint: It<span class="token string">'s a good idea to run '</span>make test' </code></pre>
<p>然后执行<code>make test</code>测试一下。最终出现：</p>
<pre class=" language-powershell"><code class="language-powershell">All tests passed without errors<span class="token operator">!</span></code></pre>
<p><code>注：</code>如果出现tcl之类的错误，解决办法：</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># yum install tcl</span></code></pre>
<h3 id="启动和关闭"><a href="#启动和关闭" class="headerlink" title="启动和关闭"></a>启动和关闭</h3><p><strong>直接启动：</strong><br>注意自己的<code>.conf</code>文件和<code>/bin/</code>的路径</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># ./bin/redis-server ./redis-6.0.3/redis.conf</span></code></pre>
<p><strong>后台启动：</strong><br>编辑<code>redis.conf</code>，将<code>daemonize on</code>修改为 <code>daemonize yes</code></p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># vi redis.conf</span></code></pre>
<p>直接输入<code>/daemonize</code> 快速搜索，<code>n</code>是寻找下一个。找到位置之后，输入<code>a</code>开启编辑，然后<code>Esc</code>,输入<code>:wq</code>保存退出。再次使用上面的启动命令即可。</p>
<p><strong>查看是否启动成功</strong></p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># ps -ef | grep redis</span></code></pre>
<p><strong>简单使用</strong></p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># ./bin/redis-cli </span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200521152124569.png" alt=""><br><strong>关闭方式一</strong></p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># ./bin/redis-cli shutdown</span></code></pre>
<p><strong>关闭方式二</strong><br>先查找出<code>Redis</code>的端口号，然后直接<code>kill</code>掉</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># ps -ef | grep redis</span></code></pre>
<p><code>-9</code> 代表强制</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># kill -9 39491</span></code></pre>
<h2 id="配置用户名和密码"><a href="#配置用户名和密码" class="headerlink" title="配置用户名和密码"></a>配置用户名和密码</h2><h3 id="版本6-0之前"><a href="#版本6-0之前" class="headerlink" title="版本6.0之前"></a>版本<code>6.0</code>之前</h3><p>编辑<code>redis.conf</code>，将<code>requirepass</code> 注释打开，后面跟上自己想要设置的密码。重启<code>Redis</code>即可<br><img src="https://img-blog.csdnimg.cn/20200521184238598.png" alt=""><br>客户端连接输入密码的两种方式：<br>方式一：<br>先进入客户端，然后输入密码。</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[root@localhost redis]</span><span class="token comment" spellcheck="true"># ./bin/redis-cli </span>
127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> auth admin</code></pre>
<p>方式二：<br>直接进入并输入密码</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># ./bin/redis-cli -a admin</span></code></pre>
<h3 id="版本6-0之后"><a href="#版本6-0之后" class="headerlink" title="版本6.0之后"></a>版本<code>6.0</code>之后</h3><p>提供了ACL,可以设置用户名和密码。<br>官方文档<a href="https://redis.io/topics/acl" target="_blank" rel="noopener">https://redis.io/topics/acl</a><br>如果只是设置密码，那么用户名就是“default”<br><img src="https://img-blog.csdnimg.cn/20200521194053635.png" alt=""><br><strong>创建一个适用于生产环境的用户：</strong></p>
<p>假如我这个用户<code>redis</code>环境主要用于<code>gmaya-shop</code>项目<br>那么我规定，这个用户使用的时候，所有存放的<code>key</code>必须以<code>gmaya-shop:</code>开头，不然不允许访问。只允许此用户使用<code>get</code>，和<code>set</code>命令。</p>
<pre class=" language-powershell"><code class="language-powershell">127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> acl setuser gmayashopredis on >gmayapassword <span class="token operator">+</span>get <span class="token operator">+</span><span class="token function">set</span> ~gmaya<span class="token operator">-</span>shop:<span class="token operator">*</span></code></pre>
<ul>
<li>用户名：<code>gmayashopredis</code></li>
<li>密码：<code>gmayapassword</code></li>
<li>可用命令：<code>get</code>，<code>set</code></li>
<li>可操作的key： <code>gmaya-shop:</code>作为前缀的<code>key</code></li>
</ul>
<p>此时设置两个key</p>
<pre class=" language-powershell"><code class="language-powershell">127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> <span class="token function">set</span> aaa 111
OK
127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> <span class="token function">set</span> gmaya<span class="token operator">-</span>shop:userid 1001 
OK
</code></pre>
<p>切换<code>gmayashopredis</code> 用户</p>
<pre class=" language-powershell"><code class="language-powershell">127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> auth gmayashopredis gmayapassword</code></pre>
<p><strong>测试</strong></p>
<pre class=" language-powershell"><code class="language-powershell">127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> get aaa
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOPERM this user has no permissions to access one of the keys used as arguments
127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> get gmaya<span class="token operator">-</span>shop:userid
<span class="token string">"1001"</span></code></pre>
<h3 id="ACL常用命令"><a href="#ACL常用命令" class="headerlink" title="ACL常用命令"></a>ACL常用命令</h3><p><strong>查看当前用户:</strong></p>
<pre class=" language-powershell"><code class="language-powershell">127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> acl getuser gmayashopredis
1<span class="token punctuation">)</span> <span class="token string">"flags"</span>
2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"on"</span>
3<span class="token punctuation">)</span> <span class="token string">"passwords"</span>
4<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"74a3fbd0037d8c4c44137eb226451df5e5458446a768df424da0fd2a9938f7ba"</span>
5<span class="token punctuation">)</span> <span class="token string">"commands"</span>
6<span class="token punctuation">)</span> <span class="token string">"-@all +set +get"</span>
7<span class="token punctuation">)</span> <span class="token string">"keys"</span>
8<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"gmaya-shop:*"</span>
</code></pre>
<p><strong>查看所有命令：</strong></p>
<pre class=" language-powershell"><code class="language-powershell">127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> acl <span class="token function">cat</span></code></pre>
<p><strong>增加命令减少命令：</strong></p>
<pre class=" language-powershell"><code class="language-powershell">127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> acl setuser gmayashopredis <span class="token operator">-</span>get
OK
127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> acl setuser gmayashopredis <span class="token operator">+</span>hget
OK
127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> acl getuser gmayashopredis
1<span class="token punctuation">)</span> <span class="token string">"flags"</span>
2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"on"</span>
3<span class="token punctuation">)</span> <span class="token string">"passwords"</span>
4<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"74a3fbd0037d8c4c44137eb226451df5e5458446a768df424da0fd2a9938f7ba"</span>
5<span class="token punctuation">)</span> <span class="token string">"commands"</span>
6<span class="token punctuation">)</span> <span class="token string">"-@all +set +hget"</span>
7<span class="token punctuation">)</span> <span class="token string">"keys"</span>
8<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"gmaya-shop:*"</span>
</code></pre>
<p><strong>刷新key的范围：</strong></p>
<pre class=" language-powershell"><code class="language-powershell">127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> acl setuser gmayashopredis resetkeys ~gmaya:<span class="token operator">*</span>
OK
127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> acl getuser gmayashopredis
1<span class="token punctuation">)</span> <span class="token string">"flags"</span>
2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"on"</span>
3<span class="token punctuation">)</span> <span class="token string">"passwords"</span>
4<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"74a3fbd0037d8c4c44137eb226451df5e5458446a768df424da0fd2a9938f7ba"</span>
5<span class="token punctuation">)</span> <span class="token string">"commands"</span>
6<span class="token punctuation">)</span> <span class="token string">"-@all +set +hget"</span>
7<span class="token punctuation">)</span> <span class="token string">"keys"</span>
8<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"gmaya:*"</span>
</code></pre>
<p><strong>直接添加key：</strong></p>
<pre class=" language-powershell"><code class="language-powershell">127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> acl setuser gmayashopredis ~shop:<span class="token operator">*</span>
OK
127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> acl getuser gmayashopredis
1<span class="token punctuation">)</span> <span class="token string">"flags"</span>
2<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"on"</span>
3<span class="token punctuation">)</span> <span class="token string">"passwords"</span>
4<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"74a3fbd0037d8c4c44137eb226451df5e5458446a768df424da0fd2a9938f7ba"</span>
5<span class="token punctuation">)</span> <span class="token string">"commands"</span>
6<span class="token punctuation">)</span> <span class="token string">"-@all +set +hget"</span>
7<span class="token punctuation">)</span> <span class="token string">"keys"</span>
8<span class="token punctuation">)</span> 1<span class="token punctuation">)</span> <span class="token string">"gmaya:*"</span>
   2<span class="token punctuation">)</span> <span class="token string">"shop:*"</span>
</code></pre>
<p><strong>添加密码减少密码</strong></p>
<p>添加密码<code>123456</code>，减少密码<code>gmayapassword</code>，一个用户允许多个密码同时存在</p>
<pre class=" language-powershell"><code class="language-powershell">127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> acl setuser gmayashopredis >123456
OK
127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:6379> acl setuser gmayashopredis &lt;gmayapassword</code></pre>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>这次<code>6.0</code>版本加入了多线程模块。只有两个配置参数：<br>默认都是注释掉的。也就是不开启多线程</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># io-threads 4 # 开启线程数</span>
<span class="token comment" spellcheck="true"># io-threads-do-reads no # 是否开启多线程</span></code></pre>
<p>通过下面的官方配置里面的介绍分析：</p>
<ul>
<li><code>Redis</code>主要是单线程的，但是也有一些特定的线程操作，比如断开链接、缓慢的<code>I/O</code>访问和其他在侧线程上执行的操作。</li>
<li>默认情况下，线程是<code>禁用</code>的，我们建议只在拥有<code>至少4</code>个或更多内核的机器上启用线程，而保留至少一个备用内核。使用<code>8个以上</code>的线程不太可能有太大的帮助。我们还建议仅当您确实存在性能问题时才使用线程<code>I/O</code>，因为<code>Redis</code>实例能够使用相当大的<code>CPU</code>时间百分比，否则使用此特性是没有意义的。</li>
<li>例如，如果你有<code>4</code>个内核，尝试使用<code>2</code>或<code>3</code>个<code>I/O</code>线程，如果你有<code>8</code>个内核，尝试使用<code>6</code>个线程。</li>
<li>通常多线程读取不会有太大帮助。</li>
</ul>
<h2 id="Redis6-0配置文件解读"><a href="#Redis6-0配置文件解读" class="headerlink" title="Redis6.0配置文件解读"></a>Redis6.0配置文件解读</h2><p>自己把<code>redis</code>配置文件拷贝出来一份，一行一行翻译一下。如果有不对的，希望指出来，虚心学习。</p>
<p><code>redis.config</code>文件：<br>版本号：<code>6.0.3</code><br><code>注意：</code>你可能要花很长时间来阅读这个配置。</p>
<p><code>TODO:</code>有几个重点的地方，我还没来得及深入研究，大致已经清楚，后期肯定会写的。最近辞职回老家河南找工作了。</p>
<ul>
<li><input disabled="" type="checkbox"> 主从复制</li>
<li><input disabled="" type="checkbox"> 哨兵（Sentinel）</li>
<li><input disabled="" type="checkbox"> Redis Cluster</li>
</ul>
<pre class=" language-java"><code class="language-java"># Redis configuration file example<span class="token punctuation">.</span>
#
# Note that in order to read the configuration file<span class="token punctuation">,</span> Redis must be
# started with the file path as first argument<span class="token operator">:</span>
# GMaya总结<span class="token operator">:</span> redis在启动的时候<span class="token punctuation">,</span>指定固定的配置文件启动。
# <span class="token punctuation">.</span>/redis<span class="token operator">-</span>server <span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf

# Note on units<span class="token operator">:</span> when memory size is needed<span class="token punctuation">,</span> it is possible to specify
# it in the usual form of 1k 5GB 4M and so forth<span class="token operator">:</span>
#
# 1k <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1000</span> bytes
# 1kb <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1024</span> bytes
# 1m <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1000000</span> bytes
# 1mb <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span> bytes
# 1g <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1000000000</span> bytes
# 1gb <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span> bytes
#
# units are <span class="token keyword">case</span> insensitive so 1GB 1Gb 1gB are all the same<span class="token punctuation">.</span>

################################## INCLUDES ###################################

# Include one or more other config files here<span class="token punctuation">.</span>  This is useful <span class="token keyword">if</span> you
# have a standard template that goes to all Redis servers but also need
# to customize a few per<span class="token operator">-</span>server settings<span class="token punctuation">.</span>  Include files can include
# other files<span class="token punctuation">,</span> so use <span class="token keyword">this</span> wisely<span class="token punctuation">.</span>
#
# Notice option <span class="token string">"include"</span> won't be rewritten by command <span class="token string">"CONFIG REWRITE"</span>
# from admin or Redis Sentinel<span class="token punctuation">.</span> Since Redis always uses the last processed
# line as value of a configuration directive<span class="token punctuation">,</span> you'd better put includes
# at the beginning of <span class="token keyword">this</span> file to avoid overwriting config change at runtime<span class="token punctuation">.</span>
#
# If instead you are interested in using includes to override configuration
# options<span class="token punctuation">,</span> it is better to use include as the last line<span class="token punctuation">.</span>
# 引入其它配置文件
# include <span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>local<span class="token punctuation">.</span>conf
# include <span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>other<span class="token punctuation">.</span>conf

################################## MODULES #####################################

# Load modules at startup<span class="token punctuation">.</span> If the server is not able to load modules
# it will abort<span class="token punctuation">.</span> It is possible to use multiple loadmodule directives<span class="token punctuation">.</span>
#
# loadmodule <span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>my_module<span class="token punctuation">.</span>so
# loadmodule <span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>other_module<span class="token punctuation">.</span>so

################################## NETWORK #####################################

# By <span class="token keyword">default</span><span class="token punctuation">,</span> <span class="token keyword">if</span> no <span class="token string">"bind"</span> configuration directive is specified<span class="token punctuation">,</span> Redis listens
# <span class="token keyword">for</span> connections from all the network interfaces available on the server<span class="token punctuation">.</span>
# It is possible to listen to just one or multiple selected interfaces using
# the <span class="token string">"bind"</span> configuration directive<span class="token punctuation">,</span> followed by one or more IP addresses<span class="token punctuation">.</span>
# 默认情况下，如果没有指定“bind”配置指令，则Redis侦听
# 对于来自服务器上可用的所有网络接口的连接。
# 可以只监听一个或多个选定的接口
# “bind”配置指令，后面跟着一个或多个IP地址。
# Examples<span class="token operator">:</span>
#
# bind <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">1.100</span> <span class="token number">10.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>
# bind <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token operator">:</span><span class="token operator">:</span><span class="token number">1</span>
#
# <span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span> WARNING <span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span> If the computer running Redis is directly exposed to the
# internet<span class="token punctuation">,</span> binding to all the interfaces is dangerous and will expose the
# instance to everybody on the internet<span class="token punctuation">.</span> So by <span class="token keyword">default</span> we uncomment the
# following bind directive<span class="token punctuation">,</span> that will force Redis to listen only into
# the IPv4 loopback <span class="token keyword">interface</span> <span class="token class-name">address</span> <span class="token punctuation">(</span><span class="token keyword">this</span> means Redis will be able to
# accept connections only from clients running into the same computer it
# is running<span class="token punctuation">)</span><span class="token punctuation">.</span>
# 如果运行Redis的计算机直接暴露于
# 绑定到所有接口是危险的，将会暴露
# 互联网上的每个人。默认情况下，我们取消注释
# 遵循绑定指令，这将迫使Redis只监听
# IPv4环回接口地址<span class="token punctuation">(</span>这意味着Redis将能够
# 只接受来自与it运行在同一台计算机上的客户机的连接
# 正在运行<span class="token punctuation">)</span>。
# IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES
# JUST COMMENT THE FOLLOWING LINE<span class="token punctuation">.</span>
# 如果您确定希望实例侦听所有接口，注释下面的行。
# <span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>
bind <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>

# Protected mode is a layer of security protection<span class="token punctuation">,</span> in order to avoid that
# Redis instances left open on the internet are accessed and exploited<span class="token punctuation">.</span>
# GMaya总结： 保护模式开启时，需配置`bind ip`或者设置访问密码。
# 保护模式是一种安全防护层，以避免这种情况的发生
# 在internet上打开的Redis实例被访问和利用。
# When <span class="token keyword">protected</span> mode is on and <span class="token keyword">if</span><span class="token operator">:</span>
# 当保护模式开启时，如果<span class="token operator">:</span>
# <span class="token number">1</span><span class="token punctuation">)</span> The server is not binding explicitly to a set of addresses using the
#    <span class="token string">"bind"</span> directive<span class="token punctuation">.</span>
# 服务器没有使用“bind”指令显式地绑定到一组地址。，也就是说bind没有指定远程ip
# <span class="token number">2</span><span class="token punctuation">)</span> No password is configured<span class="token punctuation">.</span>
# 没有配置密码。
# The server only accepts connections from clients connecting from the
# IPv4 and IPv6 loopback addresses <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> and <span class="token operator">:</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> and from Unix domain
# sockets<span class="token punctuation">.</span>
# 服务器只接受从IPv4和IPv6环回地址<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>和<span class="token operator">:</span><span class="token operator">:</span><span class="token number">1</span>，来自Unix域套接字。
# By <span class="token keyword">default</span> <span class="token keyword">protected</span> mode is enabled<span class="token punctuation">.</span> You should disable it only <span class="token keyword">if</span>
# you are sure you want clients from other hosts to connect to Redis
# even <span class="token keyword">if</span> no authentication is configured<span class="token punctuation">,</span> nor a specific set of interfaces
# are explicitly listed using the <span class="token string">"bind"</span> directive<span class="token punctuation">.</span>
# 默认情况下，受保护模式是启用的。您应该仅在以下情况下禁用它
# 您确定希望来自其他主机的客户端连接到Redis
# 即使没有配置任何身份验证，也没有一组特定的接口
# 使用“bind”指令显式列出。
<span class="token keyword">protected</span><span class="token operator">-</span>mode yes

# Accept connections on the specified port<span class="token punctuation">,</span> <span class="token keyword">default</span> is <span class="token function">6379</span> <span class="token punctuation">(</span>IANA #<span class="token number">815344</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
# If port <span class="token number">0</span> is specified Redis will not listen on a TCP socket<span class="token punctuation">.</span>
# 接受指定端口上的连接，默认为<span class="token function">6379</span> <span class="token punctuation">(</span>IANA #<span class="token number">815344</span><span class="token punctuation">)</span>。
# 如果端口<span class="token number">0</span>被指定，Redis将不会监听TCP套接字。
port <span class="token number">6379</span>

# TCP <span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> backlog<span class="token punctuation">.</span>
# 此参数和`somaxconn`确定了`TCP`连接中已完成队列<span class="token punctuation">(</span>完成三次握手之后<span class="token punctuation">)</span>的长度。
# 取两者最小值。当高并发的时候，可以考虑增加`somaxconn`的值，然后增加`tcp<span class="token operator">-</span>backlog`。
# In high requests<span class="token operator">-</span>per<span class="token operator">-</span>second environments you need an high backlog in order
# to avoid slow clients connections issues<span class="token punctuation">.</span> Note that the Linux kernel
# will silently truncate it to the value of <span class="token operator">/</span>proc<span class="token operator">/</span>sys<span class="token operator">/</span>net<span class="token operator">/</span>core<span class="token operator">/</span>somaxconn so
# make sure to raise both the value of somaxconn and tcp_max_syn_backlog
# in order to get the desired effect<span class="token punctuation">.</span>
# 在每秒请求数很高的环境中，您需要按顺序进行高backlog
# 以避免慢速客户端连接问题。注意Linux内核
# 是否会静默地将其截断为<span class="token operator">/</span>proc<span class="token operator">/</span>sys<span class="token operator">/</span>net<span class="token operator">/</span>core<span class="token operator">/</span>somaxconn的值
# 确保同时提高somaxconn和tcp_max_syn_backlog的值
# 以达到预期的效果。
tcp<span class="token operator">-</span>backlog <span class="token number">511</span>

# Unix socket<span class="token punctuation">.</span>
#
# Specify the path <span class="token keyword">for</span> the Unix socket that will be used to listen <span class="token keyword">for</span>
# incoming connections<span class="token punctuation">.</span> There is no <span class="token keyword">default</span><span class="token punctuation">,</span> so Redis will not listen
# on a unix socket when not specified<span class="token punctuation">.</span>
#
# unixsocket <span class="token operator">/</span>tmp<span class="token operator">/</span>redis<span class="token punctuation">.</span>sock
# unixsocketperm <span class="token number">700</span>

# Close the connection after a client is idle <span class="token keyword">for</span> N <span class="token function">seconds</span> <span class="token punctuation">(</span><span class="token number">0</span> to disable<span class="token punctuation">)</span>
# 在客户端空闲N秒后关闭连接<span class="token punctuation">(</span><span class="token number">0</span>表示禁用<span class="token punctuation">)</span>
timeout <span class="token number">0</span>

# TCP keepalive<span class="token punctuation">.</span>
# 表示将周期性的使用SO_KEEPALIVE检测客户端是否还处于健康状态，避免服务器一直阻塞。
# If non<span class="token operator">-</span>zero<span class="token punctuation">,</span> use SO_KEEPALIVE to send TCP ACKs to clients in absence
# of communication<span class="token punctuation">.</span> This is useful <span class="token keyword">for</span> two reasons<span class="token operator">:</span>
# 如果非零，使用SO_KEEPALIVE在客户端不存在时发送TCP ack
# 的沟通。这样做有两个原因<span class="token operator">:</span>
# <span class="token number">1</span><span class="token punctuation">)</span> Detect dead peers<span class="token punctuation">.</span>
# 发现死去的客户端
# <span class="token number">2</span><span class="token punctuation">)</span> Take the connection alive from the point of view of network
#    equipment in the middle<span class="token punctuation">.</span>
# 从网络设备的角度来看，连接在中间是活的
# On Linux<span class="token punctuation">,</span> the specified <span class="token function">value</span> <span class="token punctuation">(</span>in seconds<span class="token punctuation">)</span> is the period used to send ACKs<span class="token punctuation">.</span>
# Note that to close the connection the <span class="token keyword">double</span> of the time is needed<span class="token punctuation">.</span>
# On other kernels the period depends on the kernel configuration<span class="token punctuation">.</span>
# 在Linux上，指定的值<span class="token punctuation">(</span>以秒为单位<span class="token punctuation">)</span>是用于发送ack的周期。
# 注意，关闭连接需要双倍的时间。
# 在其他内核上，周期取决于内核配置。
# A reasonable value <span class="token keyword">for</span> <span class="token keyword">this</span> option is <span class="token number">300</span> seconds<span class="token punctuation">,</span> which is the <span class="token keyword">new</span>
# Redis <span class="token keyword">default</span> starting with Redis <span class="token number">3.2</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>
# 这个选项的合理值是<span class="token number">300</span>秒，这是新的值
# Redis默认从Redis <span class="token number">3.2</span><span class="token punctuation">.</span><span class="token number">1</span>开始。
tcp<span class="token operator">-</span>keepalive <span class="token number">300</span>

################################# TLS<span class="token operator">/</span>SSL #####################################

# By <span class="token keyword">default</span><span class="token punctuation">,</span> TLS<span class="token operator">/</span>SSL is disabled<span class="token punctuation">.</span> To enable it<span class="token punctuation">,</span> the <span class="token string">"tls-port"</span> configuration
# directive can be used to define TLS<span class="token operator">-</span>listening ports<span class="token punctuation">.</span> To enable TLS on the
# <span class="token keyword">default</span> port<span class="token punctuation">,</span> use<span class="token operator">:</span>
#
# port <span class="token number">0</span>
# tls<span class="token operator">-</span>port <span class="token number">6379</span>

# Configure a X<span class="token number">.509</span> certificate and <span class="token keyword">private</span> key to use <span class="token keyword">for</span> authenticating the
# server to connected clients<span class="token punctuation">,</span> masters or cluster peers<span class="token punctuation">.</span>  These files should be
# PEM formatted<span class="token punctuation">.</span>
#
# tls<span class="token operator">-</span>cert<span class="token operator">-</span>file redis<span class="token punctuation">.</span>crt 
# tls<span class="token operator">-</span>key<span class="token operator">-</span>file redis<span class="token punctuation">.</span>key

# Configure a DH parameters file to enable Diffie<span class="token operator">-</span><span class="token function">Hellman</span> <span class="token punctuation">(</span>DH<span class="token punctuation">)</span> key exchange<span class="token operator">:</span>
#
# tls<span class="token operator">-</span>dh<span class="token operator">-</span>params<span class="token operator">-</span>file redis<span class="token punctuation">.</span>dh

# Configure a CA <span class="token function">certificate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> bundle or directory to authenticate TLS<span class="token operator">/</span>SSL
# clients and peers<span class="token punctuation">.</span>  Redis requires an explicit configuration of at least one
# of these<span class="token punctuation">,</span> and will not implicitly use the system wide configuration<span class="token punctuation">.</span>
#
# tls<span class="token operator">-</span>ca<span class="token operator">-</span>cert<span class="token operator">-</span>file ca<span class="token punctuation">.</span>crt
# tls<span class="token operator">-</span>ca<span class="token operator">-</span>cert<span class="token operator">-</span>dir <span class="token operator">/</span>etc<span class="token operator">/</span>ssl<span class="token operator">/</span>certs

# By <span class="token keyword">default</span><span class="token punctuation">,</span> <span class="token function">clients</span> <span class="token punctuation">(</span>including replica servers<span class="token punctuation">)</span> on a TLS port are required
# to authenticate using valid client side certificates<span class="token punctuation">.</span>
#
# It is possible to disable authentication using <span class="token keyword">this</span> directive<span class="token punctuation">.</span>
#
# tls<span class="token operator">-</span>auth<span class="token operator">-</span>clients no

# By <span class="token keyword">default</span><span class="token punctuation">,</span> a Redis replica does not attempt to establish a TLS connection
# with its master<span class="token punctuation">.</span>
#
# Use the following directive to enable TLS on replication links<span class="token punctuation">.</span>
#
# tls<span class="token operator">-</span>replication yes

# By <span class="token keyword">default</span><span class="token punctuation">,</span> the Redis Cluster bus uses a plain TCP connection<span class="token punctuation">.</span> To enable
# TLS <span class="token keyword">for</span> the bus protocol<span class="token punctuation">,</span> use the following directive<span class="token operator">:</span>
#
# tls<span class="token operator">-</span>cluster yes
# and include <span class="token string">"TLSv1"</span><span class="token punctuation">,</span> <span class="token string">"TLSv1.1"</span><span class="token punctuation">,</span> <span class="token string">"TLSv1.2"</span><span class="token punctuation">,</span> <span class="token string">"TLSv1.3"</span> <span class="token punctuation">(</span>OpenSSL <span class="token operator">>=</span> <span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">)</span> 
#
# tls<span class="token operator">-</span>protocols TLSv1<span class="token number">.2</span>

# Configure allowed ciphers<span class="token punctuation">.</span>  See the <span class="token function">ciphers</span><span class="token punctuation">(</span>1ssl<span class="token punctuation">)</span> manpage <span class="token keyword">for</span> more information
# about the syntax of <span class="token keyword">this</span> string<span class="token punctuation">.</span>
#
# Note<span class="token operator">:</span> <span class="token keyword">this</span> configuration applies only to <span class="token operator">&lt;=</span> TLSv1<span class="token number">.2</span><span class="token punctuation">.</span>
#
# tls<span class="token operator">-</span>ciphers DEFAULT<span class="token operator">:</span><span class="token operator">!</span>MEDIUM

# Configure allowed TLSv1<span class="token number">.3</span> ciphersuites<span class="token punctuation">.</span>  See the <span class="token function">ciphers</span><span class="token punctuation">(</span>1ssl<span class="token punctuation">)</span> manpage <span class="token keyword">for</span> more
# information about the syntax of <span class="token keyword">this</span> string<span class="token punctuation">,</span> and specifically <span class="token keyword">for</span> TLSv1<span class="token number">.3</span>
# ciphersuites<span class="token punctuation">.</span>
#
# tls<span class="token operator">-</span>ciphersuites TLS_CHACHA20_POLY1305_SHA256

# When choosing a cipher<span class="token punctuation">,</span> use the server's preference instead of the client
# preference<span class="token punctuation">.</span> By <span class="token keyword">default</span><span class="token punctuation">,</span> the server follows the client's preference<span class="token punctuation">.</span>
#
# tls<span class="token operator">-</span>prefer<span class="token operator">-</span>server<span class="token operator">-</span>ciphers yes

################################# GENERAL #####################################

# By <span class="token keyword">default</span> Redis does not run as a daemon<span class="token punctuation">.</span> Use <span class="token string">'yes'</span> <span class="token keyword">if</span> you need it<span class="token punctuation">.</span>
# Note that Redis will write a pid file in <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis<span class="token punctuation">.</span>pid when daemonized<span class="token punctuation">.</span>
# 默认情况下，Redis不作为守护进程运行。如果你需要，使用“yes”。
# 请注意，Redis将在<span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span> Redis中写入一个pid文件。监控pid。
daemonize yes

# If you run Redis from upstart or systemd<span class="token punctuation">,</span> Redis can interact with your
# supervision tree<span class="token punctuation">.</span> Options<span class="token operator">:</span>
# 如果你从upstart或systemd运行Redis<span class="token punctuation">,</span> Redis可以与你的管理树交互。选项<span class="token operator">:</span>
#   supervised no      <span class="token operator">-</span> no supervision interaction 没有监督互动
#   supervised upstart <span class="token operator">-</span> signal upstart by putting Redis into SIGSTOP mode
# 通过将Redis置于SIGSTOP模式来启动信号
#   supervised systemd <span class="token operator">-</span> signal systemd by writing READY<span class="token operator">=</span><span class="token number">1</span> to $NOTIFY_SOCKET
# signal systemd将READY <span class="token operator">=</span> <span class="token number">1</span>写入$ NOTIFY_SOCKET
#   supervised auto    <span class="token operator">-</span> detect upstart or systemd method based on
#                        UPSTART_JOB or NOTIFY_SOCKET environment variables
# 检测upstart或systemd方法基于 UPSTART_JOB或NOTIFY_SOCKET环境变量
# Note<span class="token operator">:</span> these supervision methods only signal <span class="token string">"process is ready."</span>
# 注意<span class="token operator">:</span>这些监督方法只表明“过程准备好了”。
#       They <span class="token keyword">do</span> not enable continuous liveness pings back to your supervisor<span class="token punctuation">.</span>
supervised no

# If a pid file is specified<span class="token punctuation">,</span> Redis writes it where specified at startup
# and removes it at exit<span class="token punctuation">.</span>
# 如果指定了pid文件，Redis会在启动时将其写入指定的位置
# 并在退出时删除它。
# When the server runs non daemonized<span class="token punctuation">,</span> no pid file is created <span class="token keyword">if</span> none is
# specified in the configuration<span class="token punctuation">.</span> When the server is daemonized<span class="token punctuation">,</span> the pid file
# is used even <span class="token keyword">if</span> not specified<span class="token punctuation">,</span> defaulting to <span class="token string">"/var/run/redis.pid"</span><span class="token punctuation">.</span>
# 当服务器运行非守护进程时，如果没有pid文件，则不创建pid文件
# 在配置中指定。当服务器以守护进程运行时，pid文件
# 即使未指定，默认也使用“<span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis<span class="token punctuation">.</span>pid”。
# Creating a pid file is best effort<span class="token operator">:</span> <span class="token keyword">if</span> Redis is not able to create it
# nothing bad happens<span class="token punctuation">,</span> the server will start and run normally<span class="token punctuation">.</span>
# 创建一个pid文件是最好的努力，如果Redis不能创建它
# 没有什么不好的事情发生，服务器将正常启动和运行。（最好创建它，但是不创建也没事。）
pidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis_6379<span class="token punctuation">.</span>pid

# Specify the server verbosity level<span class="token punctuation">.</span>
# 指定服务器详细日志级别。
# This can be one of<span class="token operator">:</span>
# <span class="token function">debug</span> <span class="token punctuation">(</span>a lot of information<span class="token punctuation">,</span> useful <span class="token keyword">for</span> development<span class="token operator">/</span>testing<span class="token punctuation">)</span>
# 大量的信息，对开发<span class="token operator">/</span>测试非常有用
# <span class="token function">verbose</span> <span class="token punctuation">(</span>many rarely useful info<span class="token punctuation">,</span> but not a mess like the debug level<span class="token punctuation">)</span>
# 很多很少有用的信息，但不像调试级别那么混乱
# <span class="token function">notice</span> <span class="token punctuation">(</span>moderately verbose<span class="token punctuation">,</span> what you want in production probably<span class="token punctuation">)</span>
# 有些冗长，这可能是您在生产环境中需要的
# <span class="token function">warning</span> <span class="token punctuation">(</span>only very important <span class="token operator">/</span> critical messages are logged<span class="token punctuation">)</span>
# 只记录非常重要<span class="token operator">/</span>关键的消息
loglevel notice

# Specify the log file name<span class="token punctuation">.</span> Also the empty string can be used to force
# Redis to log on the standard output<span class="token punctuation">.</span> Note that <span class="token keyword">if</span> you use standard
# output <span class="token keyword">for</span> logging but daemonize<span class="token punctuation">,</span> logs will be sent to <span class="token operator">/</span>dev<span class="token operator">/</span>null
# 指定日志文件名。此外，还可以使用空字符串强制Redis登录标准输出。
# 注意，如果使用标准输出进行日志记录，但是使用守护进程运行，那么日志将被发送到<span class="token operator">/</span>dev<span class="token operator">/</span>null
logfile <span class="token string">""</span>

# To enable logging to the system logger<span class="token punctuation">,</span> just set <span class="token string">'syslog-enabled'</span> to yes<span class="token punctuation">,</span>
# and optionally update the other syslog parameters to suit your needs<span class="token punctuation">.</span>
# 要启用系统日志记录器的日志功能，只需将<span class="token string">'syslog-enabled'</span>设置为yes，
# 并可选地更新其他syslog参数以满足您的需要。
# syslog<span class="token operator">-</span>enabled no

# Specify the syslog identity<span class="token punctuation">.</span>
# 指定syslog标识。
# syslog<span class="token operator">-</span>ident redis

# Specify the syslog facility<span class="token punctuation">.</span> Must be USER or between LOCAL0<span class="token operator">-</span>LOCAL7<span class="token punctuation">.</span>
# 指定syslog功能。必须是USER或介于LOCAL0<span class="token operator">-</span>LOCAL7之间。
# syslog<span class="token operator">-</span>facility local0

# Set the number of databases<span class="token punctuation">.</span> The <span class="token keyword">default</span> database is DB <span class="token number">0</span><span class="token punctuation">,</span> you can select
# a different one on a per<span class="token operator">-</span>connection basis using SELECT <span class="token operator">&lt;</span>dbid<span class="token operator">></span> where
# dbid is a number between <span class="token number">0</span> and <span class="token string">'databases'</span><span class="token operator">-</span><span class="token number">1</span>
# 设置数据库的数量。默认数据库是DB <span class="token number">0</span>，您可以选择
# 在每个连接的基础上使用SELECT <span class="token operator">&lt;</span>dbid<span class="token operator">></span>，其中
# dbid是一个介于<span class="token number">0</span>和‘databases’<span class="token operator">-</span><span class="token number">1</span>之间的数字。（也就是<span class="token number">0</span>到<span class="token number">15</span>）
databases <span class="token number">16</span>

# By <span class="token keyword">default</span> Redis shows an ASCII art logo only when started to log to the
# standard output and <span class="token keyword">if</span> the standard output is a TTY<span class="token punctuation">.</span> Basically <span class="token keyword">this</span> means
# that normally a logo is displayed only in interactive sessions<span class="token punctuation">.</span>
# 默认情况下，Redis只在开始登录时显示一个ASCII art徽标
# 标准输出，如果标准输出是TTY。基本上这意味着
# 标志通常只在交互式会话中显示。

# However it is possible to force the pre<span class="token operator">-</span><span class="token number">4.0</span> behavior and always show a
# ASCII art logo in startup logs by setting the following option to yes<span class="token punctuation">.</span>
# 然而，强制执行<span class="token number">4.0</span>之前的行为并总是显示a是可能的
# 通过将以下选项设置为yes，可以在启动日志中显示ASCII art徽标。
always<span class="token operator">-</span>show<span class="token operator">-</span>logo yes

################################ SNAPSHOTTING  ################################
# 持久化：RDB快照！！！！重点！
# Save the DB on disk<span class="token operator">:</span>
#    将数据库保存在磁盘上<span class="token operator">:</span>
#   save <span class="token operator">&lt;</span>seconds<span class="token operator">></span> <span class="token operator">&lt;</span>changes<span class="token operator">></span>
#
#   Will save the DB <span class="token keyword">if</span> both the given number of seconds and the given
#   number of write operations against the DB occurred<span class="token punctuation">.</span>
#    如果给定的秒数和给定的对该DB的写操作数同时发生，则将保存该DB。

#   In the example below the behaviour will be to save<span class="token operator">:</span>
#   在下面的例子中，行为将被保存<span class="token operator">:</span>
#   after <span class="token number">900</span> <span class="token function">sec</span> <span class="token punctuation">(</span><span class="token number">15</span> min<span class="token punctuation">)</span> <span class="token keyword">if</span> at least <span class="token number">1</span> key changed
#   在<span class="token number">900</span>秒<span class="token punctuation">(</span><span class="token number">15</span>分钟<span class="token punctuation">)</span>后，如果至少改变了一个键
#   after <span class="token number">300</span> <span class="token function">sec</span> <span class="token punctuation">(</span><span class="token number">5</span> min<span class="token punctuation">)</span> <span class="token keyword">if</span> at least <span class="token number">10</span> keys changed
#   <span class="token number">300</span>秒后<span class="token punctuation">(</span><span class="token number">5</span>分钟<span class="token punctuation">)</span>如果至少<span class="token number">10</span>个键改变
#   after <span class="token number">60</span> sec <span class="token keyword">if</span> at least <span class="token number">10000</span> keys changed
#   <span class="token number">60</span>秒后如果至少<span class="token number">10000</span>个键改变

#   Note<span class="token operator">:</span> you can disable saving completely by commenting out all <span class="token string">"save"</span> lines<span class="token punctuation">.</span>
#   注意<span class="token operator">:</span>您可以通过注释掉所有“保存”行来完全禁用保存。
#   It is also possible to remove all the previously configured save
#   points by adding a save directive with a single empty string argument
#   like in the following example<span class="token operator">:</span>
#   也可以删除以前配置的所有save
#   通过添加一个带有单个空字符串参数的save指令来获得
#   就像下面的例子<span class="token operator">:</span>
#   save <span class="token string">""</span>

save <span class="token number">900</span> <span class="token number">1</span>
save <span class="token number">300</span> <span class="token number">10</span>
save <span class="token number">60</span> <span class="token number">10000</span>

# By <span class="token keyword">default</span> Redis will stop accepting writes <span class="token keyword">if</span> RDB snapshots are enabled
# <span class="token punctuation">(</span>at least one save point<span class="token punctuation">)</span> and the latest background save failed<span class="token punctuation">.</span>
# This will make the user <span class="token function">aware</span> <span class="token punctuation">(</span>in a hard way<span class="token punctuation">)</span> that data is not persisting
# on disk properly<span class="token punctuation">,</span> otherwise chances are that no one will notice and some
# disaster will happen<span class="token punctuation">.</span>
# 默认情况下，如果启用了RDB快照<span class="token punctuation">,</span>
# <span class="token punctuation">(</span>至少一个保存点<span class="token punctuation">)</span>和最新的后台保存失败<span class="token punctuation">,</span>Redis将停止接受写操作<span class="token punctuation">.</span>
# 这将使用户<span class="token punctuation">(</span>以一种困难的方式<span class="token punctuation">)</span>意识到数据不是持久的
# 正确地存储在磁盘上，否则没有人会注意到灾难将会发生。

# If the background saving process will start working again Redis will
# automatically allow writes again<span class="token punctuation">.</span>
# 如果后台保存过程将再次开始工作，Redis将自动允许再次写入。

# However <span class="token keyword">if</span> you have setup your proper monitoring of the Redis server
# and persistence<span class="token punctuation">,</span> you may want to disable <span class="token keyword">this</span> feature so that Redis will
# <span class="token keyword">continue</span> to work as usual even <span class="token keyword">if</span> there are problems with disk<span class="token punctuation">,</span>
# permissions<span class="token punctuation">,</span> and so forth<span class="token punctuation">.</span>
# 但是，如果您已经设置了对Redis服务器的适当监视
# 和持久性，你可能想要禁用这个功能，这样Redis会
# 继续正常工作，即使有问题的磁盘，
# 权限等等。
# GMaya总结：如果存储数据（持久化）失败，则停止写入。
stop<span class="token operator">-</span>writes<span class="token operator">-</span>on<span class="token operator">-</span>bgsave<span class="token operator">-</span>error yes

# Compress string objects using LZF when dump <span class="token punctuation">.</span>rdb databases<span class="token operator">?</span>
# 在转储<span class="token punctuation">.</span>rdb数据库时使用LZF压缩字符串对象<span class="token operator">?</span>
# For <span class="token keyword">default</span> that<span class="token string">'s set to '</span>yes<span class="token string">' as it'</span>s almost always a win<span class="token punctuation">.</span>
# 默认情况下，它被设置为“yes”。
# If you want to save some CPU in the saving child set it to <span class="token string">'no'</span> but
# the dataset will likely be bigger <span class="token keyword">if</span> you have compressible values or keys<span class="token punctuation">.</span>
# GMaya总结：是否开启对rdb持久化文件的压缩
rdbcompression yes

# Since version <span class="token number">5</span> of RDB a CRC64 checksum is placed at the end of the file<span class="token punctuation">.</span>
# This makes the format more resistant to corruption but there is a performance
# hit to <span class="token function">pay</span> <span class="token punctuation">(</span>around <span class="token number">10</span><span class="token operator">%</span><span class="token punctuation">)</span> when saving and loading RDB files<span class="token punctuation">,</span> so you can disable it
# <span class="token keyword">for</span> maximum performances<span class="token punctuation">.</span>
# 是否CRC64校验rdb文件，会有一定的性能损失（大概<span class="token number">10</span><span class="token operator">%</span>）。
# RDB files created with checksum disabled have a checksum of zero that will
# tell the loading code to skip the check<span class="token punctuation">.</span>
# 禁用校验和创建的RDB文件的校验和为零
# 告诉加载代码跳过检查。
rdbchecksum yes

# The filename where to dump the DB
# rdb文件的名字。
dbfilename dump<span class="token punctuation">.</span>rdb

# Remove RDB files used by replication in instances without persistence
# enabled<span class="token punctuation">.</span> By <span class="token keyword">default</span> <span class="token keyword">this</span> option is disabled<span class="token punctuation">,</span> however there are environments
# where <span class="token keyword">for</span> regulations or other security concerns<span class="token punctuation">,</span> RDB files persisted on
# disk by masters in order to feed replicas<span class="token punctuation">,</span> or stored on disk by replicas
# in order to load them <span class="token keyword">for</span> the initial synchronization<span class="token punctuation">,</span> should be deleted
# ASAP<span class="token punctuation">.</span> Note that <span class="token keyword">this</span> option ONLY WORKS in instances that have both AOF
# and RDB persistence disabled<span class="token punctuation">,</span> otherwise is completely ignored<span class="token punctuation">.</span>
# 删除实例中复制使用的RDB文件，但不删除持久性
# 启用。默认情况下，这个选项是禁用的，但是有一些环境
# 对于法规或其他安全问题，RDB文件在哪里持久存在
# 主服务器通过磁盘来提供副本，或通过副本存储在磁盘上
# 为了加载它们进行初始同步，应该删除它们
# 尽快。注意，这个选项只在同时具有AOF的实例中起作用
# 并且禁用了RDB持久性，否则将完全忽略。

# An <span class="token function">alternative</span> <span class="token punctuation">(</span>and sometimes better<span class="token punctuation">)</span> way to obtain the same effect is
# to use diskless replication on both master and replicas instances<span class="token punctuation">.</span> However
# in the <span class="token keyword">case</span> of replicas<span class="token punctuation">,</span> diskless is not always an option<span class="token punctuation">.</span>
# 另一种<span class="token punctuation">(</span>有时是更好的<span class="token punctuation">)</span>达到同样效果的方法是
#在主实例和副本实例上使用无磁盘复制。然而
#在副本的情况下，无磁盘并不总是一个选择。
rdb<span class="token operator">-</span>del<span class="token operator">-</span>sync<span class="token operator">-</span>files no

# The working directory<span class="token punctuation">.</span>
# 数据库存放目录。
# The DB will be written inside <span class="token keyword">this</span> directory<span class="token punctuation">,</span> with the filename specified
# above using the <span class="token string">'dbfilename'</span> configuration directive<span class="token punctuation">.</span>
# DB将在此目录中写入，并指定文件名
# 上面使用<span class="token string">'dbfilename'</span>配置指令。
# The Append Only File will also be created inside <span class="token keyword">this</span> directory<span class="token punctuation">.</span>
# 仅追加文件也将在此目录中创建（AOF文件也在这个目录创建）
# Note that you must specify a directory here<span class="token punctuation">,</span> not a file name<span class="token punctuation">.</span>
# 注意，这里必须指定一个目录，而不是文件名。
dir <span class="token punctuation">.</span>/

################################# REPLICATION #################################

# Master<span class="token operator">-</span>Replica replication<span class="token punctuation">.</span> Use replicaof to make a Redis instance a copy of
# another Redis server<span class="token punctuation">.</span> A few things to understand ASAP about Redis replication<span class="token punctuation">.</span>
# 主从复制
#   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>      <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
#   <span class="token operator">|</span>      Master      <span class="token operator">|</span> <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> <span class="token operator">|</span>    Replica    <span class="token operator">|</span>
#   <span class="token operator">|</span> <span class="token punctuation">(</span>receive writes<span class="token punctuation">)</span> <span class="token operator">|</span>      <span class="token operator">|</span>  <span class="token punctuation">(</span>exact copy<span class="token punctuation">)</span> <span class="token operator">|</span>
#   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>      <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
#
# <span class="token number">1</span><span class="token punctuation">)</span> Redis replication is asynchronous<span class="token punctuation">,</span> but you can configure a master to
#    stop accepting writes <span class="token keyword">if</span> it appears to be not connected with at least
#    a given number of replicas<span class="token punctuation">.</span>
# Redis复制是异步的，但是您可以配置一个主服务器来停止接受写操作，如果它看起来至少没有连接到给定数量的副本。
# <span class="token number">2</span><span class="token punctuation">)</span> Redis replicas are able to perform a partial resynchronization with the
#    master <span class="token keyword">if</span> the replication link is lost <span class="token keyword">for</span> a relatively small amount of
#    time<span class="token punctuation">.</span> You may want to configure the replication backlog <span class="token function">size</span> <span class="token punctuation">(</span>see the next
#    sections of <span class="token keyword">this</span> file<span class="token punctuation">)</span> with a sensible value depending on your needs<span class="token punctuation">.</span>
# <span class="token number">3</span><span class="token punctuation">)</span> Replication is automatic and does not need user intervention<span class="token punctuation">.</span> After a
#    network partition replicas automatically <span class="token keyword">try</span> to reconnect to masters
#    and resynchronize with them<span class="token punctuation">.</span>
# GMaya总结：<span class="token number">5.0</span>及之后版本replicaof代替了slaveof<span class="token punctuation">.</span>
# 在这里配置属于永久配置，replicaof 主ip  主端口。只有从的需要配置，主的不需要
# replicaof <span class="token operator">&lt;</span>masterip<span class="token operator">></span> <span class="token operator">&lt;</span>masterport<span class="token operator">></span>

# If the master is password <span class="token keyword">protected</span> <span class="token punctuation">(</span>using the <span class="token string">"requirepass"</span> configuration
# directive below<span class="token punctuation">)</span> it is possible to tell the replica to authenticate before
# starting the replication synchronization process<span class="token punctuation">,</span> otherwise the master will
# refuse the replica request<span class="token punctuation">.</span>
# 如果主服务器是密码保护的<span class="token punctuation">(</span>使用下面的“requirepass”配置指令<span class="token punctuation">)</span>，可以在启动复制同步进程之前告诉副本进行身份验证，否则主服务器将拒绝副本请求。
# 也就是如果你的主设置了密码，这个地方需要写上主的密码，才能连接上
# masterauth <span class="token operator">&lt;</span>master<span class="token operator">-</span>password<span class="token operator">></span>
#
# However <span class="token keyword">this</span> is not enough <span class="token keyword">if</span> you are using Redis <span class="token function">ACLs</span> <span class="token punctuation">(</span><span class="token keyword">for</span> Redis version
# <span class="token number">6</span> or greater<span class="token punctuation">)</span><span class="token punctuation">,</span> and the <span class="token keyword">default</span> user is not capable of running the PSYNC
# command and<span class="token operator">/</span>or other commands needed <span class="token keyword">for</span> replication<span class="token punctuation">.</span> In <span class="token keyword">this</span> <span class="token keyword">case</span> it's
# better to configure a special user to use with replication<span class="token punctuation">,</span> and specify the
# masteruser configuration as such<span class="token operator">:</span>
# 但是，如果您使用的是Redis <span class="token function">acl</span><span class="token punctuation">(</span>适用于Redis版本<span class="token number">6</span>或更高版本<span class="token punctuation">)</span>，并且默认用户不能运行PSYNC命令和<span class="token operator">/</span>或复制所需的其他命令，那么这还不够。
# 在这种情况下，最好配置一个特殊用户与复制一起使用，并指定masteruser配置如下<span class="token operator">:</span>
# masteruser <span class="token operator">&lt;</span>username<span class="token operator">></span>
#
# When masteruser is specified<span class="token punctuation">,</span> the replica will authenticate against its
# master using the <span class="token keyword">new</span> <span class="token class-name">AUTH</span> form<span class="token operator">:</span> AUTH <span class="token operator">&lt;</span>username<span class="token operator">></span> <span class="token operator">&lt;</span>password<span class="token operator">></span><span class="token punctuation">.</span>

# When a replica loses its connection with the master<span class="token punctuation">,</span> or when the replication
# is still in progress<span class="token punctuation">,</span> the replica can act in two different ways<span class="token operator">:</span>
# 当副本失去与主副本的连接时，或者复制仍在进行时，副本可以以两种不同的方式执行操作<span class="token operator">:</span>
# <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> replica<span class="token operator">-</span>serve<span class="token operator">-</span>stale<span class="token operator">-</span>data is set to <span class="token string">'yes'</span> <span class="token punctuation">(</span>the <span class="token keyword">default</span><span class="token punctuation">)</span> the replica will
#    still reply to client requests<span class="token punctuation">,</span> possibly with out of date data<span class="token punctuation">,</span> or the
#    data set may just be empty <span class="token keyword">if</span> <span class="token keyword">this</span> is the first synchronization<span class="token punctuation">.</span>
#  如果replica<span class="token operator">-</span>serve<span class="token operator">-</span>stale<span class="token operator">-</span>data被设置为“yes”<span class="token punctuation">(</span>默认值<span class="token punctuation">)</span>，则副本将执行此操作
#  仍然响应客户端请求，可能是数据过期，或者如果这是第一次同步，那么数据集可能是空的。
# <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">if</span> replica<span class="token operator">-</span>serve<span class="token operator">-</span>stale<span class="token operator">-</span>data is set to <span class="token string">'no'</span> the replica will reply with
#    an error <span class="token string">"SYNC with master in progress"</span> to all the kind of commands
#    but to INFO<span class="token punctuation">,</span> replicaOF<span class="token punctuation">,</span> AUTH<span class="token punctuation">,</span> PING<span class="token punctuation">,</span> SHUTDOWN<span class="token punctuation">,</span> REPLCONF<span class="token punctuation">,</span> ROLE<span class="token punctuation">,</span> CONFIG<span class="token punctuation">,</span>
#    SUBSCRIBE<span class="token punctuation">,</span> UNSUBSCRIBE<span class="token punctuation">,</span> PSUBSCRIBE<span class="token punctuation">,</span> PUNSUBSCRIBE<span class="token punctuation">,</span> PUBLISH<span class="token punctuation">,</span> PUBSUB<span class="token punctuation">,</span>
#    COMMAND<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HOST<span class="token operator">:</span> and LATENCY<span class="token punctuation">.</span>
# 如果replica<span class="token operator">-</span>serve<span class="token operator">-</span>stale<span class="token operator">-</span>data被设置为“no”
# 除了INFO<span class="token punctuation">,</span> replicaOF<span class="token punctuation">,</span> AUTH<span class="token punctuation">,</span> PING<span class="token punctuation">,</span> SHUTDOWN<span class="token punctuation">,</span> REPLCONF<span class="token punctuation">,</span> ROLE<span class="token punctuation">,</span> CONFIG，订阅，取消订阅，PSUBSCRIBE<span class="token punctuation">,</span> PUNSUBSCRIBE，发布，PUBSUB，命令，发布，主机<span class="token operator">:</span>和延迟。
# 其他的都会返回“与主进程同步”错误
replica<span class="token operator">-</span>serve<span class="token operator">-</span>stale<span class="token operator">-</span>data yes

# You can configure a replica instance to accept writes or not<span class="token punctuation">.</span> Writing against
# a replica instance may be useful to store some ephemeral <span class="token function">data</span> <span class="token punctuation">(</span>because data
# written on a replica will be easily deleted after resync with the master<span class="token punctuation">)</span> but
# may also cause problems <span class="token keyword">if</span> clients are writing to it because of a
# misconfiguration<span class="token punctuation">.</span>
#
# Since Redis <span class="token number">2.6</span> by <span class="token keyword">default</span> replicas are read<span class="token operator">-</span>only<span class="token punctuation">.</span>
# 默认情况下Redis <span class="token number">2.6</span>的副本是只读的。
# Note<span class="token operator">:</span> read only replicas are not designed to be exposed to untrusted clients
# on the internet<span class="token punctuation">.</span> It's just a protection layer against misuse of the instance<span class="token punctuation">.</span>
# Still a read only replica exports by <span class="token keyword">default</span> all the administrative commands
# such as CONFIG<span class="token punctuation">,</span> DEBUG<span class="token punctuation">,</span> and so forth<span class="token punctuation">.</span> To a limited extent you can improve
# security of read only replicas using <span class="token string">'rename-command'</span> to shadow all the
# administrative <span class="token operator">/</span> dangerous commands<span class="token punctuation">.</span>
# 也就是从库只允许读，不允许写，读写分离啊
replica<span class="token operator">-</span>read<span class="token operator">-</span>only yes

# Replication SYNC strategy<span class="token operator">:</span> disk or socket<span class="token punctuation">.</span>
# 复制同步策略<span class="token operator">:</span>磁盘或套接字。
# New <span class="token class-name">replicas</span> and reconnecting replicas that are not able to <span class="token keyword">continue</span> the
# replication process just receiving differences<span class="token punctuation">,</span> need to <span class="token keyword">do</span> what is called a
# <span class="token string">"full synchronization"</span><span class="token punctuation">.</span> An RDB file is transmitted from the master to the
# replicas<span class="token punctuation">.</span>
#
# The transmission can happen in two different ways<span class="token operator">:</span>
#
# <span class="token number">1</span><span class="token punctuation">)</span> Disk<span class="token operator">-</span>backed<span class="token operator">:</span> The Redis master creates a <span class="token keyword">new</span> <span class="token class-name">process</span> that writes the RDB
#                 file on disk<span class="token punctuation">.</span> Later the file is transferred by the parent
#                 process to the replicas incrementally<span class="token punctuation">.</span>
# <span class="token number">2</span><span class="token punctuation">)</span> Diskless<span class="token operator">:</span> The Redis master creates a <span class="token keyword">new</span> <span class="token class-name">process</span> that directly writes the
#              RDB file to replica sockets<span class="token punctuation">,</span> without touching the disk at all<span class="token punctuation">.</span>
#
# With disk<span class="token operator">-</span>backed replication<span class="token punctuation">,</span> <span class="token keyword">while</span> the RDB file is generated<span class="token punctuation">,</span> more replicas
# can be queued and served with the RDB file as soon as the current child
# producing the RDB file finishes its work<span class="token punctuation">.</span> With diskless replication instead
# once the transfer starts<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">replicas</span> arriving will be queued and a <span class="token keyword">new</span>
# transfer will start when the current one terminates<span class="token punctuation">.</span>
#
# When diskless replication is used<span class="token punctuation">,</span> the master waits a configurable amount of
# <span class="token function">time</span> <span class="token punctuation">(</span>in seconds<span class="token punctuation">)</span> before starting the transfer in the hope that multiple
# replicas will arrive and the transfer can be parallelized<span class="token punctuation">.</span>
#
# With slow disks and <span class="token function">fast</span> <span class="token punctuation">(</span>large bandwidth<span class="token punctuation">)</span> networks<span class="token punctuation">,</span> diskless replication
# works better<span class="token punctuation">.</span>
# 对于慢速磁盘和快速<span class="token punctuation">(</span>大带宽<span class="token punctuation">)</span>网络，无磁盘复制工作得更好。
# 主从数据复制是否使用无硬盘复制功能。
repl<span class="token operator">-</span>diskless<span class="token operator">-</span>sync no

# When diskless replication is enabled<span class="token punctuation">,</span> it is possible to configure the delay
# the server waits in order to spawn the child that transfers the RDB via socket
# to the replicas<span class="token punctuation">.</span>
# 当启用无磁盘复制时，可以配置服务器等待的延迟，以生成通过套接字传输RDB的子节点的副本。
#
# This is important since once the transfer starts<span class="token punctuation">,</span> it is not possible to serve
# <span class="token keyword">new</span> <span class="token class-name">replicas</span> arriving<span class="token punctuation">,</span> that will be queued <span class="token keyword">for</span> the next RDB transfer<span class="token punctuation">,</span> so the
# server waits a delay in order to let more replicas arrive<span class="token punctuation">.</span>
#
# The delay is specified in seconds<span class="token punctuation">,</span> and by <span class="token keyword">default</span> is <span class="token number">5</span> seconds<span class="token punctuation">.</span> To disable
# it entirely just set it to <span class="token number">0</span> seconds and the transfer will start ASAP<span class="token punctuation">.</span>
# diskless复制的延迟时间
repl<span class="token operator">-</span>diskless<span class="token operator">-</span>sync<span class="token operator">-</span>delay <span class="token number">5</span>

# <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
# WARNING<span class="token operator">:</span> RDB diskless load is experimental<span class="token punctuation">.</span> Since in <span class="token keyword">this</span> setup the replica
# does not immediately store an RDB on disk<span class="token punctuation">,</span> it may cause data loss during
# failovers<span class="token punctuation">.</span> RDB diskless load <span class="token operator">+</span> Redis modules not handling I<span class="token operator">/</span>O reads may also
# cause Redis to abort in <span class="token keyword">case</span> of I<span class="token operator">/</span>O errors during the initial synchronization
# stage with the master<span class="token punctuation">.</span> Use only <span class="token keyword">if</span> your <span class="token keyword">do</span> what you are doing<span class="token punctuation">.</span>
# <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
#
# Replica can load the RDB it reads from the replication link directly from the
# socket<span class="token punctuation">,</span> or store the RDB to a file and read that file after it was completely
# recived from the master<span class="token punctuation">.</span>
#
# In many cases the disk is slower than the network<span class="token punctuation">,</span> and storing and loading
# the RDB file may increase replication <span class="token function">time</span> <span class="token punctuation">(</span>and even increase the master's
# Copy on Write memory and salve buffers<span class="token punctuation">)</span><span class="token punctuation">.</span>
# However<span class="token punctuation">,</span> parsing the RDB file directly from the socket may mean that we have
# to flush the contents of the current database before the full rdb was
# received<span class="token punctuation">.</span> For <span class="token keyword">this</span> reason we have the following options<span class="token operator">:</span>
#
# <span class="token string">"disabled"</span>    <span class="token operator">-</span> Don't use diskless <span class="token function">load</span> <span class="token punctuation">(</span>store the rdb file to the disk first<span class="token punctuation">)</span> 
# 不要使用无磁盘加载<span class="token punctuation">(</span>首先将rdb文件存储到磁盘<span class="token punctuation">)</span>
# <span class="token string">"on-empty-db"</span> <span class="token operator">-</span> Use diskless load only when it is completely safe<span class="token punctuation">.</span>
# 只有在完全安全的情况下才使用无磁盘加载。
# <span class="token string">"swapdb"</span>      <span class="token operator">-</span> Keep a copy of the current db contents in RAM <span class="token keyword">while</span> parsing
#                 the data directly from the socket<span class="token punctuation">.</span> note that <span class="token keyword">this</span> requires
#                 sufficient memory<span class="token punctuation">,</span> <span class="token keyword">if</span> you don't have it<span class="token punctuation">,</span> you risk an OOM kill<span class="token punctuation">.</span>
repl<span class="token operator">-</span>diskless<span class="token operator">-</span>load disabled

# Replicas send PINGs to server in a predefined interval<span class="token punctuation">.</span> It's possible to
# change <span class="token keyword">this</span> interval with the repl_ping_replica_period option<span class="token punctuation">.</span> The <span class="token keyword">default</span>
# value is <span class="token number">10</span> seconds<span class="token punctuation">.</span>
#

# The following option sets the replication timeout <span class="token keyword">for</span><span class="token operator">:</span>
#
# <span class="token number">1</span><span class="token punctuation">)</span> Bulk transfer I<span class="token operator">/</span>O during SYNC<span class="token punctuation">,</span> from the point of view of replica<span class="token punctuation">.</span>
# <span class="token number">2</span><span class="token punctuation">)</span> Master timeout from the point of view of <span class="token function">replicas</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> pings<span class="token punctuation">)</span><span class="token punctuation">.</span>
# <span class="token number">3</span><span class="token punctuation">)</span> Replica timeout from the point of view of <span class="token function">masters</span> <span class="token punctuation">(</span>REPLCONF ACK pings<span class="token punctuation">)</span><span class="token punctuation">.</span>
#
# It is important to make sure that <span class="token keyword">this</span> value is greater than the value
# specified <span class="token keyword">for</span> repl<span class="token operator">-</span>ping<span class="token operator">-</span>replica<span class="token operator">-</span>period otherwise a timeout will be detected
# every time there is low traffic between the master and the replica<span class="token punctuation">.</span>
# 复制连接超时时间。
# repl<span class="token operator">-</span>timeout <span class="token number">60</span>

# Disable TCP_NODELAY on the replica socket after SYNC<span class="token operator">?</span>
#
# If you select <span class="token string">"yes"</span> Redis will use a smaller number of TCP packets and
# less bandwidth to send data to replicas<span class="token punctuation">.</span> But <span class="token keyword">this</span> can add a delay <span class="token keyword">for</span>
# the data to appear on the replica side<span class="token punctuation">,</span> up to <span class="token number">40</span> milliseconds with
# Linux kernels using a <span class="token keyword">default</span> configuration<span class="token punctuation">.</span>
#
# If you select <span class="token string">"no"</span> the delay <span class="token keyword">for</span> data to appear on the replica side will
# be reduced but more bandwidth will be used <span class="token keyword">for</span> replication<span class="token punctuation">.</span>
#
# By <span class="token keyword">default</span> we optimize <span class="token keyword">for</span> low latency<span class="token punctuation">,</span> but in very high traffic conditions
# or when the master and replicas are many hops away<span class="token punctuation">,</span> turning <span class="token keyword">this</span> to <span class="token string">"yes"</span> may
# be a good idea<span class="token punctuation">.</span>
# 是否禁止复制tcp链接的tcp nodelay参数
repl<span class="token operator">-</span>disable<span class="token operator">-</span>tcp<span class="token operator">-</span>nodelay no

# Set the replication backlog size<span class="token punctuation">.</span> The backlog is a buffer that accumulates
# replica data when replicas are disconnected <span class="token keyword">for</span> some time<span class="token punctuation">,</span> so that when a
# replica wants to reconnect again<span class="token punctuation">,</span> often a full resync is not needed<span class="token punctuation">,</span> but a
# partial resync is enough<span class="token punctuation">,</span> just passing the portion of data the replica
# missed <span class="token keyword">while</span> disconnected<span class="token punctuation">.</span>
#
# The bigger the replication backlog<span class="token punctuation">,</span> the longer the time the replica can be
# disconnected and later be able to perform a partial resynchronization<span class="token punctuation">.</span>
# 复制待办事项列表越大，副本断开连接的时间就越长，并且以后能够执行部分重新同步。

# The backlog is only allocated once there is at least a replica connected<span class="token punctuation">.</span>
# 积压只在至少连接了一个副本时才分配。
# 复制缓冲区大小
# repl<span class="token operator">-</span>backlog<span class="token operator">-</span>size 1mb

# After a master has no longer connected replicas <span class="token keyword">for</span> some time<span class="token punctuation">,</span> the backlog
# will be freed<span class="token punctuation">.</span> The following option configures the amount of seconds that
# need to elapse<span class="token punctuation">,</span> starting from the time the last replica disconnected<span class="token punctuation">,</span> <span class="token keyword">for</span>
# the backlog buffer to be freed<span class="token punctuation">.</span>
#
# Note that replicas never free the backlog <span class="token keyword">for</span> timeout<span class="token punctuation">,</span> since they may be
# promoted to masters later<span class="token punctuation">,</span> and should be able to correctly "partially
# resynchronize" with the replicas<span class="token operator">:</span> hence they should always accumulate backlog<span class="token punctuation">.</span>
#
# A value of <span class="token number">0</span> means to never release the backlog<span class="token punctuation">.</span>
# <span class="token number">0</span>的值意味着永远不释放积压。

# master没有slave一段时间会释放复制缓冲区的内存，repl<span class="token operator">-</span>backlog<span class="token operator">-</span>ttl用来设置该时间长度。单位为秒。
# repl<span class="token operator">-</span>backlog<span class="token operator">-</span>ttl <span class="token number">3600</span>

# The replica priority is an integer number published by Redis in the INFO
# output<span class="token punctuation">.</span> It is used by Redis Sentinel in order to select a replica to promote
# into a master <span class="token keyword">if</span> the master is no longer working correctly<span class="token punctuation">.</span>
# 副本优先级是一个由Redis在信息中发布的整数输出。Redis Sentinel使用它来选择一个副本，以便在主服务器不再正常工作时将副本提升到主服务器。

# A replica with a low priority number is considered better <span class="token keyword">for</span> promotion<span class="token punctuation">,</span> so
# <span class="token keyword">for</span> instance <span class="token keyword">if</span> there are three replicas with priority <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">25</span> Sentinel
# will pick the one with priority <span class="token number">10</span><span class="token punctuation">,</span> that is the lowest<span class="token punctuation">.</span>
# 低优先级的副本被认为更适合升级，例如，如果有<span class="token number">3</span>个优先级为<span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span>，<span class="token number">25</span>的副本，Sentinel将选择优先级为<span class="token number">10</span>的副本，这是最低的。
# However a special priority of <span class="token number">0</span> marks the replica as not able to perform the
# role of master<span class="token punctuation">,</span> so a replica with priority of <span class="token number">0</span> will never be selected by
# Redis Sentinel <span class="token keyword">for</span> promotion<span class="token punctuation">.</span>
# 但是一个特殊的优先级为<span class="token number">0</span>的副本将不能执行master的角色，所以一个优先级为<span class="token number">0</span>的副本将永远不会被Redis Sentinel选中进行升级。
#
# By <span class="token keyword">default</span> the priority is <span class="token number">100</span><span class="token punctuation">.</span>
# 默认情况下，优先级是<span class="token number">100</span>。
# 也就是当主机挂了，从机那个优先级低，那个就会被推选为主机。
replica<span class="token operator">-</span>priority <span class="token number">100</span>

# It is possible <span class="token keyword">for</span> a master to stop accepting writes <span class="token keyword">if</span> there are less than
# N replicas connected<span class="token punctuation">,</span> having a lag less or equal than M seconds<span class="token punctuation">.</span>
# 如果连接的副本少于N个，延迟小于或等于M秒，那么主机可能会停止接受写操作。
# The N replicas need to be in <span class="token string">"online"</span> state<span class="token punctuation">.</span>
# N个副本需要处于“在线”状态。
# The lag in seconds<span class="token punctuation">,</span> that must be <span class="token operator">&lt;=</span> the specified value<span class="token punctuation">,</span> is calculated from
# the last ping received from the replica<span class="token punctuation">,</span> that is usually sent every second<span class="token punctuation">.</span>
# N个副本以秒为单位的延迟<span class="token punctuation">(</span>必须<span class="token operator">&lt;=</span>指定的值<span class="token punctuation">)</span>是从副本接收的最后一个ping，通常每秒发送一次。需要处于“在线”状态。

# This option does not GUARANTEE that N replicas will accept the write<span class="token punctuation">,</span> but
# will limit the window of exposure <span class="token keyword">for</span> lost writes in <span class="token keyword">case</span> not enough replicas
# are available<span class="token punctuation">,</span> to the specified number of seconds<span class="token punctuation">.</span>
# 此选项不保证N个副本将接受写操作，但在没有足够的副本可用的情况下，将把丢失的写操作的曝光窗口限制在指定的秒数内。
# For example to require at least <span class="token number">3</span> replicas with a lag <span class="token operator">&lt;=</span> <span class="token number">10</span> seconds use<span class="token operator">:</span>
# 例如，需要至少<span class="token number">3</span>个 从机 延迟小于等于 <span class="token number">10</span>秒 才会写入
# min<span class="token operator">-</span>replicas<span class="token operator">-</span>to<span class="token operator">-</span>write <span class="token number">3</span>
# min<span class="token operator">-</span>replicas<span class="token operator">-</span>max<span class="token operator">-</span>lag <span class="token number">10</span>
#
# Setting one or the other to <span class="token number">0</span> disables the feature<span class="token punctuation">.</span>
# 将其中一个设置为<span class="token number">0</span>将禁用该特性。
# By <span class="token keyword">default</span> min<span class="token operator">-</span>replicas<span class="token operator">-</span>to<span class="token operator">-</span>write is set to <span class="token function">0</span> <span class="token punctuation">(</span>feature disabled<span class="token punctuation">)</span> and
# min<span class="token operator">-</span>replicas<span class="token operator">-</span>max<span class="token operator">-</span>lag is set to <span class="token number">10</span><span class="token punctuation">.</span>
# 默认情况下，最小复制写入设置为<span class="token function">0</span><span class="token punctuation">(</span>禁用特性<span class="token punctuation">)</span>
# 最小复制最大延迟设置为<span class="token number">10</span>。

# A Redis master is able to list the address and port of the attached
# replicas in different ways<span class="token punctuation">.</span> For example the <span class="token string">"INFO replication"</span> section
# offers <span class="token keyword">this</span> information<span class="token punctuation">,</span> which is used<span class="token punctuation">,</span> among other tools<span class="token punctuation">,</span> by
# Redis Sentinel in order to discover replica instances<span class="token punctuation">.</span>
# Redis主服务器能够以不同的方式列出所附副本的地址和端口。例如，“信息复制”部分提供了这些信息，Redis Sentinel使用这些信息和其他工具来发现副本实例。
# Another place where <span class="token keyword">this</span> info is available is in the output of the
# <span class="token string">"ROLE"</span> command of a master<span class="token punctuation">.</span>
#
# The listed IP and address normally reported by a replica is obtained
# in the following way<span class="token operator">:</span>
#
#   IP<span class="token operator">:</span> The address is auto detected by checking the peer address
#   of the socket used by the replica to connect with the master<span class="token punctuation">.</span>
#
#   Port<span class="token operator">:</span> The port is communicated by the replica during the replication
#   handshake<span class="token punctuation">,</span> and is normally the port that the replica is using to
#   listen <span class="token keyword">for</span> connections<span class="token punctuation">.</span>
#
# However when port forwarding or Network Address <span class="token function">Translation</span> <span class="token punctuation">(</span>NAT<span class="token punctuation">)</span> is
# used<span class="token punctuation">,</span> the replica may be actually reachable via different IP and port
# pairs<span class="token punctuation">.</span> The following two options can be used by a replica in order to
# report to its master a specific set of IP and port<span class="token punctuation">,</span> so that both INFO
# and ROLE will report those values<span class="token punctuation">.</span>
#
# There is no need to use both the options <span class="token keyword">if</span> you need to override just
# the port or the IP address<span class="token punctuation">.</span>
#
# replica<span class="token operator">-</span>announce<span class="token operator">-</span>ip <span class="token number">5.5</span><span class="token punctuation">.</span><span class="token number">5.5</span>
# replica<span class="token operator">-</span>announce<span class="token operator">-</span>port <span class="token number">1234</span>

############################### KEYS TRACKING #################################

# Redis <span class="token keyword">implements</span> <span class="token class-name">server</span> assisted support <span class="token keyword">for</span> client side caching of values<span class="token punctuation">.</span>
# This is implemented using an invalidation table that remembers<span class="token punctuation">,</span> using
# <span class="token number">16</span> millions of slots<span class="token punctuation">,</span> what clients may have certain subsets of keys<span class="token punctuation">.</span> In turn
# <span class="token keyword">this</span> is used in order to send invalidation messages to clients<span class="token punctuation">.</span> Please
# to understand more about the feature check <span class="token keyword">this</span> page<span class="token operator">:</span>
#
#   https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>redis<span class="token punctuation">.</span>io<span class="token operator">/</span>topics<span class="token operator">/</span>client<span class="token operator">-</span>side<span class="token operator">-</span>caching
#
# When tracking is enabled <span class="token keyword">for</span> a client<span class="token punctuation">,</span> all the read only queries are assumed
# to be cached<span class="token operator">:</span> <span class="token keyword">this</span> will force Redis to store information in the invalidation
# table<span class="token punctuation">.</span> When keys are modified<span class="token punctuation">,</span> such information is flushed away<span class="token punctuation">,</span> and
# invalidation messages are sent to the clients<span class="token punctuation">.</span> However <span class="token keyword">if</span> the workload is
# heavily dominated by reads<span class="token punctuation">,</span> Redis could use more and more memory in order
# to track the keys fetched by many clients<span class="token punctuation">.</span>
#
# For <span class="token keyword">this</span> reason it is possible to configure a maximum fill value <span class="token keyword">for</span> the
# invalidation table<span class="token punctuation">.</span> By <span class="token keyword">default</span> it is set to 1M of keys<span class="token punctuation">,</span> and once <span class="token keyword">this</span> limit
# is reached<span class="token punctuation">,</span> Redis will start to evict keys in the invalidation table
# even <span class="token keyword">if</span> they were not modified<span class="token punctuation">,</span> just to reclaim memory<span class="token operator">:</span> <span class="token keyword">this</span> will in turn
# force the clients to invalidate the cached values<span class="token punctuation">.</span> Basically the table
# maximum size is a trade off between the memory you want to spend server
# side to track information about who cached what<span class="token punctuation">,</span> and the ability of clients
# to retain cached objects in memory<span class="token punctuation">.</span>
#
# If you set the value to <span class="token number">0</span><span class="token punctuation">,</span> it means there are no limits<span class="token punctuation">,</span> and Redis will
# retain as many keys as needed in the invalidation table<span class="token punctuation">.</span>
# In the <span class="token string">"stats"</span> INFO section<span class="token punctuation">,</span> you can find information about the number of
# keys in the invalidation table at every given moment<span class="token punctuation">.</span>
#
# Note<span class="token operator">:</span> when key tracking is used in broadcasting mode<span class="token punctuation">,</span> no memory is used
# in the server side so <span class="token keyword">this</span> setting is useless<span class="token punctuation">.</span>
# 这个是有关客户端缓存的
# tracking<span class="token operator">-</span>table<span class="token operator">-</span>max<span class="token operator">-</span>keys <span class="token number">1000000</span>

################################## SECURITY ###################################
# 安全，在<span class="token number">6.0</span>版本之后，加入了用户名<span class="token operator">+</span>密码的设置，如果设置密码，用户名为默认。
# 新格式：AUTH <span class="token operator">&lt;</span>username<span class="token operator">></span> <span class="token operator">&lt;</span>password<span class="token operator">></span>  或者 旧格式：AUTH <span class="token operator">&lt;</span>password<span class="token operator">></span>
# Warning<span class="token operator">:</span> since Redis is pretty fast an outside user can <span class="token keyword">try</span> up to
# <span class="token number">1</span> million passwords per second against a modern box<span class="token punctuation">.</span> This means that you
# should use very strong passwords<span class="token punctuation">,</span> otherwise they will be very easy to <span class="token keyword">break</span><span class="token punctuation">.</span>
# Note that because the password is really a shared secret between the client
# and the server<span class="token punctuation">,</span> and should not be memorized by any human<span class="token punctuation">,</span> the password
# can be easily a <span class="token keyword">long</span> string from <span class="token operator">/</span>dev<span class="token operator">/</span>urandom or whatever<span class="token punctuation">,</span> so by using a
# <span class="token keyword">long</span> and unguessable password no brute force attack will be possible<span class="token punctuation">.</span>

# Redis ACL users are defined in the following format<span class="token operator">:</span>
#
#   user <span class="token operator">&lt;</span>username<span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> acl rules <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
#
# For example<span class="token operator">:</span>
#
#   user worker <span class="token operator">+</span><span class="token annotation punctuation">@list</span> <span class="token operator">+</span><span class="token annotation punctuation">@connection</span> <span class="token operator">~</span>jobs<span class="token operator">:</span><span class="token operator">*</span> on <span class="token operator">></span>ffa9203c493aa99
#
# The special username <span class="token string">"default"</span> is used <span class="token keyword">for</span> <span class="token keyword">new</span> <span class="token class-name">connections<span class="token punctuation">.</span></span> If <span class="token keyword">this</span> user
# has the <span class="token string">"nopass"</span> rule<span class="token punctuation">,</span> then <span class="token keyword">new</span> <span class="token class-name">connections</span> will be immediately authenticated
# as the <span class="token string">"default"</span> user without the need of any password provided via the
# AUTH command<span class="token punctuation">.</span> Otherwise <span class="token keyword">if</span> the <span class="token string">"default"</span> user is not flagged with <span class="token string">"nopass"</span>
# the connections will start in not authenticated state<span class="token punctuation">,</span> and will require
# <span class="token function">AUTH</span> <span class="token punctuation">(</span>or the HELLO command AUTH option<span class="token punctuation">)</span> in order to be authenticated and
# start to work<span class="token punctuation">.</span>
#
# The ACL rules that describe what an user can <span class="token keyword">do</span> are the following<span class="token operator">:</span>
# 描述用户可以做什么的ACL规则如下所示
#  on           Enable the user<span class="token operator">:</span> it is possible to authenticate as <span class="token keyword">this</span> user<span class="token punctuation">.</span>启用用户<span class="token operator">:</span>可以作为此用户进行身份验证。
#  off          Disable the user<span class="token operator">:</span> it's no longer possible to authenticate 
#               with <span class="token keyword">this</span> user<span class="token punctuation">,</span> however the already authenticated connections
#               will still work<span class="token punctuation">.</span>
#  禁用该用户<span class="token operator">:</span>不再能够使用该用户进行身份验证，但是已验证的连接仍然可以工作。
#  <span class="token operator">+</span><span class="token operator">&lt;</span>command<span class="token operator">></span>   Allow the execution of that command 允许执行该命令，也就是添加用户命令权限，例：<span class="token operator">+</span>get <span class="token operator">+</span>set
#  <span class="token operator">-</span><span class="token operator">&lt;</span>command<span class="token operator">></span>   Disallow the execution of that command 不允许执行该命令
#  <span class="token operator">+</span>@<span class="token operator">&lt;</span>category<span class="token operator">></span> Allow the execution of all the commands in such category
#               with valid categories are like <span class="token annotation punctuation">@admin</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@set</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@sortedset</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
#               and so forth<span class="token punctuation">,</span> see the full list in the server<span class="token punctuation">.</span>c file where
#               the Redis command table is described and defined<span class="token punctuation">.</span>
#               The special category <span class="token annotation punctuation">@all</span> means all the commands<span class="token punctuation">,</span> but currently
#               present in the server<span class="token punctuation">,</span> and that will be loaded in the future
#               via modules<span class="token punctuation">.</span>
#  <span class="token operator">+</span><span class="token operator">&lt;</span>command<span class="token operator">></span><span class="token operator">|</span>subcommand    Allow a specific subcommand of an otherwise
#                           disabled command<span class="token punctuation">.</span> Note that <span class="token keyword">this</span> form is not
#                           allowed as negative like <span class="token operator">-</span>DEBUG<span class="token operator">|</span>SEGFAULT<span class="token punctuation">,</span> but
#                           only additive starting with <span class="token string">"+"</span><span class="token punctuation">.</span>
#  allcommands  Alias <span class="token keyword">for</span> <span class="token operator">+</span><span class="token annotation punctuation">@all</span><span class="token punctuation">.</span> Note that it implies the ability to execute
#               all the future commands loaded via the modules system<span class="token punctuation">.</span>
#  nocommands   Alias <span class="token keyword">for</span> <span class="token operator">-</span><span class="token annotation punctuation">@all</span><span class="token punctuation">.</span>
#  <span class="token operator">~</span><span class="token operator">&lt;</span>pattern<span class="token operator">></span>   Add a pattern of keys that can be mentioned as part of
#               commands<span class="token punctuation">.</span> For instance <span class="token operator">~</span><span class="token operator">*</span> allows all the keys<span class="token punctuation">.</span> The pattern
#               is a glob<span class="token operator">-</span>style pattern like the one of KEYS<span class="token punctuation">.</span>
#               It is possible to specify multiple patterns<span class="token punctuation">.</span>
# 添加可作为命令的一部分提到的键的模式。例如<span class="token operator">~</span><span class="token operator">*</span>允许所有的键。模式是一个全局样式的模式，类似于键的模式。可以指定多个模式。
# GMaya总结：也就是允许访问那些key，例子：只允许访问<span class="token operator">~</span>gmaya<span class="token operator">:</span><span class="token operator">*</span>开头的key。如：gmaya<span class="token operator">:</span>userid， gmaya<span class="token operator">:</span>roleid
#  allkeys      Alias <span class="token keyword">for</span> <span class="token operator">~</span><span class="token operator">*</span> allkeys别名为<span class="token operator">~</span><span class="token operator">*</span>
#  resetkeys    Flush the list of allowed keys patterns<span class="token punctuation">.</span>刷新允许的键模式列表。
#  <span class="token operator">></span><span class="token operator">&lt;</span>password<span class="token operator">></span>  Add <span class="token keyword">this</span> passowrd to the list of valid password <span class="token keyword">for</span> the user<span class="token punctuation">.</span>
#               For example <span class="token operator">></span>mypass will add <span class="token string">"mypass"</span> to the list<span class="token punctuation">.</span>
#               This directive clears the <span class="token string">"nopass"</span> <span class="token function">flag</span> <span class="token punctuation">(</span>see later<span class="token punctuation">)</span><span class="token punctuation">.</span>
# 将这个passowrd添加到用户的有效密码列表中。例如，<span class="token operator">></span>mypass会将“mypass”添加到列表中。这个指令清除“nopass”标志<span class="token punctuation">(</span>参见后面<span class="token punctuation">)</span>。
#  <span class="token operator">&lt;&lt;</span>password<span class="token operator">></span>  Remove <span class="token keyword">this</span> password from the list of valid passwords<span class="token punctuation">.</span> 从有效密码列表中删除此密码。
#  nopass       All the set passwords of the user are removed<span class="token punctuation">,</span> and the user
#               is flagged as requiring no password<span class="token operator">:</span> it means that every
#               password will work against <span class="token keyword">this</span> user<span class="token punctuation">.</span> If <span class="token keyword">this</span> directive is
#               used <span class="token keyword">for</span> the <span class="token keyword">default</span> user<span class="token punctuation">,</span> every <span class="token keyword">new</span> <span class="token class-name">connection</span> will be
#               immediately authenticated with the <span class="token keyword">default</span> user without
#               any explicit AUTH command required<span class="token punctuation">.</span> Note that the <span class="token string">"resetpass"</span>
#               directive will clear <span class="token keyword">this</span> condition<span class="token punctuation">.</span>
# 删除用户的所有设置密码，并将用户标记为不需要密码<span class="token operator">:</span>这意味着每个密码都将对该用户起作用。如果此指令用于默认用户，
# 则每个新连接都将立即与默认用户进行身份验证，而不需要任何显式的AUTH命令。注意“resetpass”指令将清除这个条件。
#  resetpass    Flush the list of allowed passwords<span class="token punctuation">.</span> Moreover removes the
#               <span class="token string">"nopass"</span> status<span class="token punctuation">.</span> After <span class="token string">"resetpass"</span> the user has no associated
#               passwords and there is no way to authenticate without adding
#               some <span class="token function">password</span> <span class="token punctuation">(</span>or setting it as <span class="token string">"nopass"</span> later<span class="token punctuation">)</span><span class="token punctuation">.</span>\
# 刷新允许的密码列表。此外，删除“nopass”状态。在“resetpass”之后，用户没有相关联的密码，并且没有办法在不添加一些密码<span class="token punctuation">(</span>或稍后将其设置为“nopass”<span class="token punctuation">)</span>的情况下进行身份验证。
#  reset        Performs the following actions<span class="token operator">:</span> resetpass<span class="token punctuation">,</span> resetkeys<span class="token punctuation">,</span> off<span class="token punctuation">,</span>
#               <span class="token operator">-</span><span class="token annotation punctuation">@all</span><span class="token punctuation">.</span> The user returns to the same state it has immediately
#               after its creation<span class="token punctuation">.</span>
# 执行以下操作<span class="token operator">:</span>resetpass、resetkeys、off、<span class="token operator">-</span><span class="token annotation punctuation">@all</span>。用户在创建后立即返回到相同的状态。

# ACL rules can be specified in any order<span class="token operator">:</span> <span class="token keyword">for</span> instance you can start with
# passwords<span class="token punctuation">,</span> then flags<span class="token punctuation">,</span> or key patterns<span class="token punctuation">.</span> However note that the additive
# and subtractive rules will CHANGE MEANING depending on the ordering<span class="token punctuation">.</span>
# For instance see the following example<span class="token operator">:</span>
#
#   user alice on <span class="token operator">+</span><span class="token annotation punctuation">@all</span> <span class="token operator">-</span>DEBUG <span class="token operator">~</span><span class="token operator">*</span> <span class="token operator">></span>somepassword
#
# This will allow <span class="token string">"alice"</span> to use all the commands with the exception of the
# DEBUG command<span class="token punctuation">,</span> since <span class="token operator">+</span><span class="token annotation punctuation">@all</span> added all the commands to the set of the commands
# alice can use<span class="token punctuation">,</span> and later DEBUG was removed<span class="token punctuation">.</span> However <span class="token keyword">if</span> we invert the order
# of two ACL rules the result will be different<span class="token operator">:</span>
#
#   user alice on <span class="token operator">-</span>DEBUG <span class="token operator">+</span><span class="token annotation punctuation">@all</span> <span class="token operator">~</span><span class="token operator">*</span> <span class="token operator">></span>somepassword
#
# Now DEBUG was removed when alice had yet no commands in the set of allowed
# commands<span class="token punctuation">,</span> later all the commands are added<span class="token punctuation">,</span> so the user will be able to
# execute everything<span class="token punctuation">.</span>
#
# Basically ACL rules are processed left<span class="token operator">-</span>to<span class="token operator">-</span>right<span class="token punctuation">.</span>
#
# For more information about ACL configuration please refer to
# the Redis web site at https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>redis<span class="token punctuation">.</span>io<span class="token operator">/</span>topics<span class="token operator">/</span>acl

# ACL LOG
#
# The ACL Log tracks failed commands and authentication events associated
# with ACLs<span class="token punctuation">.</span> The ACL Log is useful to troubleshoot failed commands blocked 
# by ACLs<span class="token punctuation">.</span> The ACL Log is stored in and consumes memory<span class="token punctuation">.</span> There is no limit
# to its length<span class="token punctuation">.</span>You can reclaim memory with ACL LOG RESET or set a maximum
# length below<span class="token punctuation">.</span>
acllog<span class="token operator">-</span>max<span class="token operator">-</span>len <span class="token number">128</span>

# Using an external ACL file
# 使用外部ACL文件
# Instead of configuring users here in <span class="token keyword">this</span> file<span class="token punctuation">,</span> it is possible to use
# a stand<span class="token operator">-</span>alone file just listing users<span class="token punctuation">.</span> The two methods cannot be mixed<span class="token operator">:</span>
# <span class="token keyword">if</span> you configure users here and at the same time you activate the exteranl
# ACL file<span class="token punctuation">,</span> the server will refuse to start<span class="token punctuation">.</span>
# 不需要在这个文件中配置用户，可以使用一个单独的文件来列出用户。这两种方法不能混合使用<span class="token operator">:</span>如果在这里配置用户，同时激活exteranl ACL文件，服务器将拒绝启动。
# The format of the external ACL user file is exactly the same as the
# format that is used inside redis<span class="token punctuation">.</span>conf to describe users<span class="token punctuation">.</span>
# 外部ACL用户文件的格式与在redis<span class="token punctuation">.</span>conf中用于描述用户的格式完全相同。
# aclfile <span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>users<span class="token punctuation">.</span>acl

# IMPORTANT NOTE<span class="token operator">:</span> starting with Redis <span class="token number">6</span> <span class="token string">"requirepass"</span> is just a compatiblity
# layer on top of the <span class="token keyword">new</span> <span class="token class-name">ACL</span> system<span class="token punctuation">.</span> The option effect will be just setting
# the password <span class="token keyword">for</span> the <span class="token keyword">default</span> user<span class="token punctuation">.</span> Clients will still authenticate using
# AUTH <span class="token operator">&lt;</span>password<span class="token operator">></span> as usually<span class="token punctuation">,</span> or more explicitly with AUTH <span class="token keyword">default</span> <span class="token operator">&lt;</span>password<span class="token operator">></span>
# <span class="token keyword">if</span> they follow the <span class="token keyword">new</span> <span class="token class-name">protocol</span><span class="token operator">:</span> both will work<span class="token punctuation">.</span>
# 密码，如果使用redis需要密码，在这里设置
# requirepass foobared

# Command <span class="token function">renaming</span> <span class="token punctuation">(</span>DEPRECATED<span class="token punctuation">)</span><span class="token punctuation">.</span>
# 命令重命名<span class="token punctuation">(</span>弃用<span class="token punctuation">)</span>。
# <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
# WARNING<span class="token operator">:</span> avoid using <span class="token keyword">this</span> option <span class="token keyword">if</span> possible<span class="token punctuation">.</span> Instead use ACLs to remove
# commands from the <span class="token keyword">default</span> user<span class="token punctuation">,</span> and put them only in some admin user you
# create <span class="token keyword">for</span> administrative purposes<span class="token punctuation">.</span>
# <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
#
# It is possible to change the name of dangerous commands in a shared
# environment<span class="token punctuation">.</span> For instance the CONFIG command may be renamed into something
# hard to guess so that it will still be available <span class="token keyword">for</span> internal<span class="token operator">-</span>use tools
# but not available <span class="token keyword">for</span> general clients<span class="token punctuation">.</span>
#
# Example<span class="token operator">:</span>
#
# rename<span class="token operator">-</span>command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
#
# It is also possible to completely kill a command by renaming it into
# an empty string<span class="token operator">:</span>
#
# rename<span class="token operator">-</span>command CONFIG <span class="token string">""</span>
#
# Please note that changing the name of commands that are logged into the
# AOF file or transmitted to replicas may cause problems<span class="token punctuation">.</span>

################################### CLIENTS ####################################

# Set the max number of connected clients at the same time<span class="token punctuation">.</span> By <span class="token keyword">default</span>
# <span class="token keyword">this</span> limit is set to <span class="token number">10000</span> clients<span class="token punctuation">,</span> however <span class="token keyword">if</span> the Redis server is not
# able to configure the process file limit to allow <span class="token keyword">for</span> the specified limit
# the max number of allowed clients is set to the current file limit
# minus <span class="token function">32</span> <span class="token punctuation">(</span>as Redis reserves a few file descriptors <span class="token keyword">for</span> internal uses<span class="token punctuation">)</span><span class="token punctuation">.</span>
# 同时设置最大连接客户端数量。默认情况下这个限制设置为<span class="token number">10000</span>个客户<span class="token punctuation">,</span>
# 但是如果复述<span class="token punctuation">,</span>服务器不能配置过程文件限制允许指定限制允许的最大数量的客户设置为（当前文件限制<span class="token operator">-</span> <span class="token number">32</span>）<span class="token punctuation">(</span>redis本身会用到<span class="token number">32</span>左右的连接<span class="token punctuation">,</span>储备一些为内部使用文件描述符<span class="token punctuation">)</span>。
# Once the limit is reached Redis will close all the <span class="token keyword">new</span> <span class="token class-name">connections</span> sending
# an error <span class="token string">'max number of clients reached'</span><span class="token punctuation">.</span>
# 一旦达到限制，Redis将关闭所有新连接，发送一个错误“达到的客户端最大数量”。
# maxclients <span class="token number">10000</span>

############################## MEMORY MANAGEMENT ################################
# 内存管理
# Set a memory usage limit to the specified amount of bytes<span class="token punctuation">.</span>
# When the memory limit is reached Redis will <span class="token keyword">try</span> to remove keys
# according to the eviction policy <span class="token function">selected</span> <span class="token punctuation">(</span>see maxmemory<span class="token operator">-</span>policy<span class="token punctuation">)</span><span class="token punctuation">.</span>
#
# If Redis can't remove keys according to the policy<span class="token punctuation">,</span> or <span class="token keyword">if</span> the policy is
# set to <span class="token string">'noeviction'</span><span class="token punctuation">,</span> Redis will start to reply with errors to commands
# that would use more memory<span class="token punctuation">,</span> like SET<span class="token punctuation">,</span> LPUSH<span class="token punctuation">,</span> and so on<span class="token punctuation">,</span> and will <span class="token keyword">continue</span>
# to reply to read<span class="token operator">-</span>only commands like GET<span class="token punctuation">.</span>
#
# This option is usually useful when using Redis as an LRU or LFU cache<span class="token punctuation">,</span> or to
# set a hard memory limit <span class="token keyword">for</span> an <span class="token function">instance</span> <span class="token punctuation">(</span>using the <span class="token string">'noeviction'</span> policy<span class="token punctuation">)</span><span class="token punctuation">.</span>
#
# WARNING<span class="token operator">:</span> If you have replicas attached to an instance with maxmemory on<span class="token punctuation">,</span>
# the size of the output buffers needed to feed the replicas are subtracted
# from the used memory count<span class="token punctuation">,</span> so that network problems <span class="token operator">/</span> resyncs will
# not trigger a loop where keys are evicted<span class="token punctuation">,</span> and in turn the output
# buffer of replicas is full with DELs of keys evicted triggering the deletion
# of more keys<span class="token punctuation">,</span> and so forth until the database is completely emptied<span class="token punctuation">.</span>
#
# In <span class="token keyword">short</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">if</span> you have replicas attached it is suggested that you set a lower
# limit <span class="token keyword">for</span> maxmemory so that there is some free RAM on the system <span class="token keyword">for</span> replica
# output <span class="token function">buffers</span> <span class="token punctuation">(</span>but <span class="token keyword">this</span> is not needed <span class="token keyword">if</span> the policy is <span class="token string">'noeviction'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
# 指定Redis最大内存限制
# maxmemory <span class="token operator">&lt;</span>bytes<span class="token operator">></span>

# MAXMEMORY POLICY<span class="token operator">:</span> how Redis will select what to remove when maxmemory
# is reached<span class="token punctuation">.</span> You can select one from the following behaviors<span class="token operator">:</span>
# 当内存使用达到最大值时，redis使用的清除策略。
# <span class="token keyword">volatile</span><span class="token operator">-</span>lru <span class="token operator">-</span><span class="token operator">></span> Evict using approximated LRU<span class="token punctuation">,</span> only keys with an expire set<span class="token punctuation">.</span> 使用近似LRU，仅使用具有过期设置的键。
# allkeys<span class="token operator">-</span>lru <span class="token operator">-</span><span class="token operator">></span> Evict any key using approximated LRU<span class="token punctuation">.</span> 使用近似LRU退出任何key。
# <span class="token keyword">volatile</span><span class="token operator">-</span>lfu <span class="token operator">-</span><span class="token operator">></span> Evict using approximated LFU<span class="token punctuation">,</span> only keys with an expire set<span class="token punctuation">.</span> 使用近似的LFU，仅使用具有过期集的键。
# allkeys<span class="token operator">-</span>lfu <span class="token operator">-</span><span class="token operator">></span> Evict any key using approximated LFU<span class="token punctuation">.</span> 使用近似的LFU退出任何键。
# <span class="token keyword">volatile</span><span class="token operator">-</span>random <span class="token operator">-</span><span class="token operator">></span> Remove a random key having an expire set<span class="token punctuation">.</span> 删除具有过期集的随机key
# allkeys<span class="token operator">-</span>random <span class="token operator">-</span><span class="token operator">></span> Remove a random key<span class="token punctuation">,</span> any key<span class="token punctuation">.</span> 删除一个随机key，任何key。
# <span class="token keyword">volatile</span><span class="token operator">-</span>ttl <span class="token operator">-</span><span class="token operator">></span> Remove the key with the nearest expire <span class="token function">time</span> <span class="token punctuation">(</span>minor TTL<span class="token punctuation">)</span> 删除具有最近过期时间的密钥<span class="token punctuation">(</span>次要TTL<span class="token punctuation">)</span>
# noeviction <span class="token operator">-</span><span class="token operator">></span> Don't evict anything<span class="token punctuation">,</span> just <span class="token keyword">return</span> an error on write operations<span class="token punctuation">.</span> 不删除任何内容，只在写操作时返回一个错误。
#
# LRU means Least Recently Used # LRU的意思是最近最少使用的
# LFU means Least Frequently Used # LFU的意思是最不常用的
#
# Both LRU<span class="token punctuation">,</span> LFU and <span class="token keyword">volatile</span><span class="token operator">-</span>ttl are implemented using approximated
# randomized algorithms<span class="token punctuation">.</span>
# LRU、LFU和<span class="token keyword">volatile</span><span class="token operator">-</span>ttl都是使用近似随机算法实现的。
#
# Note<span class="token operator">:</span> with any of the above policies<span class="token punctuation">,</span> Redis will <span class="token keyword">return</span> an error on write
#       operations<span class="token punctuation">,</span> when there are no suitable keys <span class="token keyword">for</span> eviction<span class="token punctuation">.</span>
#
#       At the date of writing these commands are<span class="token operator">:</span> set setnx setex append
#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd
#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby
#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby
#       getset mset msetnx exec sort
#
# The <span class="token keyword">default</span> is<span class="token operator">:</span>
#
# maxmemory<span class="token operator">-</span>policy noeviction

# LRU<span class="token punctuation">,</span> LFU and minimal TTL algorithms are not precise algorithms but approximated
# <span class="token function">algorithms</span> <span class="token punctuation">(</span>in order to save memory<span class="token punctuation">)</span><span class="token punctuation">,</span> so you can tune it <span class="token keyword">for</span> speed or
# accuracy<span class="token punctuation">.</span> For <span class="token keyword">default</span> Redis will check five keys and pick the one that was
# used less recently<span class="token punctuation">,</span> you can change the sample size using the following
# configuration directive<span class="token punctuation">.</span>
# LRU、LFU和最小TTL算法并不是精确的算法，而是近似的算法<span class="token punctuation">(</span>为了节省内存<span class="token punctuation">)</span>，因此您可以对其进行调优以获得速度或精度。
# 对于默认情况，Redis将检查五个键并选择最近较少使用的键，您可以使用以下配置指令更改样本大小。
#
# The <span class="token keyword">default</span> of <span class="token number">5</span> produces good enough results<span class="token punctuation">.</span> <span class="token number">10</span> Approximates very closely
# <span class="token boolean">true</span> LRU but costs more CPU<span class="token punctuation">.</span> <span class="token number">3</span> is faster but not very accurate<span class="token punctuation">.</span>
# 默认的<span class="token number">5</span>产生足够好的结果。<span class="token number">10</span>非常接近真实的LRU，但是消耗更多的CPU。<span class="token number">3</span>更快，但不是很准确。
# maxmemory<span class="token operator">-</span>samples <span class="token number">5</span>

# Starting from Redis <span class="token number">5</span><span class="token punctuation">,</span> by <span class="token keyword">default</span> a replica will ignore its maxmemory setting
# <span class="token punctuation">(</span>unless it is promoted to master after a failover or manually<span class="token punctuation">)</span><span class="token punctuation">.</span> It means
# that the eviction of keys will be just handled by the master<span class="token punctuation">,</span> sending the
# DEL commands to the replica as keys evict in the master side<span class="token punctuation">.</span>
# 从Redis <span class="token number">5</span>开始，在默认情况下，副本将忽略它的maxmemory设置<span class="token punctuation">(</span>除非在故障转移后或手动将其提升为master<span class="token punctuation">)</span>。
# 这意味着键的回收将只由主进程处理，当主进程中的键被回收时，将DEL命令发送到副本。
# This behavior ensures that masters and replicas stay consistent<span class="token punctuation">,</span> and is usually
# what you want<span class="token punctuation">,</span> however <span class="token keyword">if</span> your replica is writable<span class="token punctuation">,</span> or you want the replica
# to have a different memory setting<span class="token punctuation">,</span> and you are sure all the writes performed
# to the replica are idempotent<span class="token punctuation">,</span> then you may change <span class="token keyword">this</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>but be sure
# to understand what you are doing<span class="token punctuation">)</span><span class="token punctuation">.</span>
#
# Note that since the replica by <span class="token keyword">default</span> does not evict<span class="token punctuation">,</span> it may end using more
# memory than the one set via <span class="token function">maxmemory</span> <span class="token punctuation">(</span>there are certain buffers that may
# be larger on the replica<span class="token punctuation">,</span> or data structures may sometimes take more memory
# and so forth<span class="token punctuation">)</span><span class="token punctuation">.</span> So make sure you monitor your replicas and make sure they
# have enough memory to never hit a real out<span class="token operator">-</span>of<span class="token operator">-</span>memory condition before the
# master hits the configured maxmemory setting<span class="token punctuation">.</span>
# 注意，由于副本在默认情况下不会被逐出，因此它最终使用的内存可能比通过maxmemory设置的内存多<span class="token punctuation">(</span>在副本上有一些缓冲区可能更大，或者数据结构有时会占用更多内存，等等<span class="token punctuation">)</span>。
# 因此，请确保您监控您的副本，并确保他们有足够的内存，从来没有遇到真正的内存不足的情况之前master点击已配置的maxmemory设置。
# replica<span class="token operator">-</span>ignore<span class="token operator">-</span>maxmemory yes

# Redis reclaims expired keys in two ways<span class="token operator">:</span> upon access when those keys are
# found to be expired<span class="token punctuation">,</span> and also in background<span class="token punctuation">,</span> in what is called the
# <span class="token string">"active expire key"</span><span class="token punctuation">.</span> The key space is slowly and interactively scanned
# looking <span class="token keyword">for</span> expired keys to reclaim<span class="token punctuation">,</span> so that it is possible to free memory
# of keys that are expired and will never be accessed again in a <span class="token keyword">short</span> time<span class="token punctuation">.</span>
# Redis以两种方式回收过期的密钥<span class="token operator">:</span>在访问时发现这些密钥已经过期，在后台，也称为“活动过期密钥”。
# 对密钥空间进行缓慢而交互式的扫描，寻找过期的密钥进行回收，以便释放过期的密钥的内存，这些密钥在短时间内永远不会被再次访问。
# The <span class="token keyword">default</span> effort of the expire cycle will <span class="token keyword">try</span> to avoid having more than
# ten percent of expired keys still in memory<span class="token punctuation">,</span> and will <span class="token keyword">try</span> to avoid consuming
# more than <span class="token number">25</span><span class="token operator">%</span> of total memory and to add latency to the system<span class="token punctuation">.</span> However
# it is possible to increase the expire <span class="token string">"effort"</span> that is normally set to
# <span class="token string">"1"</span><span class="token punctuation">,</span> to a greater value<span class="token punctuation">,</span> up to the value <span class="token string">"10"</span><span class="token punctuation">.</span> At its maximum value the
# system will use more CPU<span class="token punctuation">,</span> longer <span class="token function">cycles</span> <span class="token punctuation">(</span>and technically may introduce
# more latency<span class="token punctuation">)</span><span class="token punctuation">,</span> and will tollerate less already expired keys still present
# in the system<span class="token punctuation">.</span> It's a tradeoff betweeen memory<span class="token punctuation">,</span> CPU and latecy<span class="token punctuation">.</span>
# 过期周期的默认工作将尝试避免在内存中保留超过<span class="token number">10</span><span class="token operator">%</span>的过期密钥，并尝试避免消耗超过<span class="token number">25</span><span class="token operator">%</span>的总内存并增加系统延迟。但是，可以将过期的“工作”<span class="token punctuation">(</span>通常设置为“<span class="token number">1</span>”<span class="token punctuation">)</span>增加到更大的值，直到值“<span class="token number">10</span>”。
# 在其最大值时，系统将使用更多的CPU，更长的周期<span class="token punctuation">(</span>技术上可能引入更多的延迟<span class="token punctuation">)</span>，并且将减少系统中仍然存在的过期密钥。这是内存、CPU和延迟之间的权衡。
# active<span class="token operator">-</span>expire<span class="token operator">-</span>effort <span class="token number">1</span>

############################# LAZY FREEING ####################################
# 延迟加载
# Redis has two primitives to delete keys<span class="token punctuation">.</span> One is called DEL and is a blocking
# deletion of the object<span class="token punctuation">.</span> It means that the server stops processing <span class="token keyword">new</span> <span class="token class-name">commands</span>
# in order to reclaim all the memory associated with an object in a synchronous
# way<span class="token punctuation">.</span> If the key deleted is associated with a small object<span class="token punctuation">,</span> the time needed
# in order to execute the DEL command is very small and comparable to most other
# <span class="token function">O</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> or <span class="token function">O</span><span class="token punctuation">(</span>log_N<span class="token punctuation">)</span> commands in Redis<span class="token punctuation">.</span> However <span class="token keyword">if</span> the key is associated with an
# aggregated value containing millions of elements<span class="token punctuation">,</span> the server can block <span class="token keyword">for</span>
# a <span class="token keyword">long</span> <span class="token function">time</span> <span class="token punctuation">(</span>even seconds<span class="token punctuation">)</span> in order to complete the operation<span class="token punctuation">.</span>
# Redis有两个原语来删除键。一个是DEL，是对象的阻塞删除。它意味着服务器停止处理新命令，以便以同步方式回收与对象关联的所有内存。
# 如果删除的键与一个小对象相关联，那么执行DEL命令所需的时间非常短，可以与Redis中的大多数其他<span class="token function">O</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>或<span class="token function">O</span><span class="token punctuation">(</span>log_N<span class="token punctuation">)</span>命令相媲美。
# 但是，如果键与包含数百万个元素的聚合值相关联，服务器可能会阻塞很长时间<span class="token punctuation">(</span>甚至几秒钟<span class="token punctuation">)</span>以完成操作。
# For the above reasons Redis also offers non blocking deletion primitives
# such as <span class="token function">UNLINK</span> <span class="token punctuation">(</span>non blocking DEL<span class="token punctuation">)</span> and the ASYNC option of FLUSHALL and
# FLUSHDB commands<span class="token punctuation">,</span> in order to reclaim memory in background<span class="token punctuation">.</span> Those commands
# are executed in constant time<span class="token punctuation">.</span> Another thread will incrementally free the
# object in the background as fast as possible<span class="token punctuation">.</span>
#
# DEL<span class="token punctuation">,</span> UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user<span class="token operator">-</span>controlled<span class="token punctuation">.</span>
# It's up to the design of the application to understand when it is a good
# idea to use one or the other<span class="token punctuation">.</span> However the Redis server sometimes has to
# delete keys or flush the whole database as a side effect of other operations<span class="token punctuation">.</span>
# Specifically Redis deletes objects independently of a user call in the
# following scenarios<span class="token operator">:</span>
#
# <span class="token number">1</span><span class="token punctuation">)</span> On eviction<span class="token punctuation">,</span> because of the maxmemory and maxmemory policy configurations<span class="token punctuation">,</span>
#    in order to make room <span class="token keyword">for</span> <span class="token keyword">new</span> <span class="token class-name">data</span><span class="token punctuation">,</span> without going over the specified
#    memory limit<span class="token punctuation">.</span>
# <span class="token number">2</span><span class="token punctuation">)</span> Because of expire<span class="token operator">:</span> when a key with an associated time to <span class="token function">live</span> <span class="token punctuation">(</span>see the
#    EXPIRE command<span class="token punctuation">)</span> must be deleted from memory<span class="token punctuation">.</span>
# <span class="token number">3</span><span class="token punctuation">)</span> Because of a side effect of a command that stores data on a key that may
#    already exist<span class="token punctuation">.</span> For example the RENAME command may delete the old key
#    content when it is replaced with another one<span class="token punctuation">.</span> Similarly SUNIONSTORE
#    or SORT with STORE option may delete existing keys<span class="token punctuation">.</span> The SET command
#    itself removes any old content of the specified key in order to replace
#    it with the specified string<span class="token punctuation">.</span>
# 因为将数据存储在可能已经存在的键上的命令的副作用。例如，重命名命令可以删除替换为其他键内容的旧键内容。
# 类似地，SUNIONSTORE或使用STORE选项排序可以删除现有密钥。SET命令本身删除指定键的任何旧内容，以便用指定的字符串替换它。
# <span class="token number">4</span><span class="token punctuation">)</span> During replication<span class="token punctuation">,</span> when a replica performs a full resynchronization with
#    its master<span class="token punctuation">,</span> the content of the whole database is removed in order to
#    load the RDB file just transferred<span class="token punctuation">.</span>
# 在复制期间，当一个副本执行与其主副本的完全重新同步时，将删除整个数据库的内容，以便加载刚刚传输的RDB文件。
#
# In all the above cases the <span class="token keyword">default</span> is to delete objects in a blocking way<span class="token punctuation">,</span>
# like <span class="token keyword">if</span> DEL was called<span class="token punctuation">.</span> However you can configure each <span class="token keyword">case</span> specifically
# in order to instead release memory in a non<span class="token operator">-</span>blocking way like <span class="token keyword">if</span> UNLINK
# was called<span class="token punctuation">,</span> using the following configuration directives<span class="token punctuation">.</span>
# 在上述所有情况下，默认情况是以阻塞的方式删除对象，就像调用DEL一样。
# 但是，您可以专门配置每种情况，以便以非阻塞的方式释放内存，就像调用UNLINK一样，使用以下配置指令。

lazyfree<span class="token operator">-</span>lazy<span class="token operator">-</span>eviction no
# 是否开启基于lazyfree的驱逐功能 yes，表示开启。no，默认值，表示不开启。
lazyfree<span class="token operator">-</span>lazy<span class="token operator">-</span>expire no
# 是否开启基于lazyfree的过期key删除功能，
lazyfree<span class="token operator">-</span>lazy<span class="token operator">-</span>server<span class="token operator">-</span>del no
# RENAME、SUNIONSTORE等命令是否基于lazyfree异步删除数据
replica<span class="token operator">-</span>lazy<span class="token operator">-</span>flush no

# It is also possible<span class="token punctuation">,</span> <span class="token keyword">for</span> the <span class="token keyword">case</span> when to replace the user code DEL calls
# with UNLINK calls is not easy<span class="token punctuation">,</span> to modify the <span class="token keyword">default</span> behavior of the DEL
# command to act exactly like UNLINK<span class="token punctuation">,</span> using the following configuration
# 在用UNLINK调用替换DEL调用的用户代码不容易的情况下，也可以使用以下配置修改DEL命令的默认行为，使其行为与UNLINK完全一样
# directive<span class="token operator">:</span>
# 执行DEL命令时是否基于lazyfree异步删除数据
lazyfree<span class="token operator">-</span>lazy<span class="token operator">-</span>user<span class="token operator">-</span>del no

################################ THREADED I<span class="token operator">/</span>O #################################
# 多线程 
# Redis is mostly single threaded<span class="token punctuation">,</span> however there are certain threaded
# operations such as UNLINK<span class="token punctuation">,</span> slow I<span class="token operator">/</span>O accesses and other things that are
# performed on side threads<span class="token punctuation">.</span>
# Redis主要是单线程的，但是也有一些特定的线程操作，比如断开链接、缓慢的I<span class="token operator">/</span>O访问和其他在侧线程上执行的操作。
# Now it is also possible to handle Redis clients socket reads and writes
# in different I<span class="token operator">/</span>O threads<span class="token punctuation">.</span> Since especially writing is so slow<span class="token punctuation">,</span> normally
# Redis users use pipelining in order to speedup the Redis performances per
# core<span class="token punctuation">,</span> and spawn multiple instances in order to scale more<span class="token punctuation">.</span> Using I<span class="token operator">/</span>O
# threads it is possible to easily speedup two times Redis without resorting
# to pipelining nor sharding of the instance<span class="token punctuation">.</span>
#
# By <span class="token keyword">default</span> threading is disabled<span class="token punctuation">,</span> we suggest enabling it only in machines
# that have at least <span class="token number">4</span> or more cores<span class="token punctuation">,</span> leaving at least one spare core<span class="token punctuation">.</span>
# Using more than <span class="token number">8</span> threads is unlikely to help much<span class="token punctuation">.</span> We also recommend using
# threaded I<span class="token operator">/</span>O only <span class="token keyword">if</span> you actually have performance problems<span class="token punctuation">,</span> with Redis
# instances being able to use a quite big percentage of CPU time<span class="token punctuation">,</span> otherwise
# there is no point in using <span class="token keyword">this</span> feature<span class="token punctuation">.</span>
# 默认情况下，线程是禁用的，我们建议只在拥有至少<span class="token number">4</span>个或更多内核的机器上启用线程，而保留至少一个备用内核。使用<span class="token number">8</span>个以上的线程不太可能有太大的帮助。
# 我们还建议仅当您确实存在性能问题时才使用线程I<span class="token operator">/</span>O，因为Redis实例能够使用相当大的CPU时间百分比，否则使用此特性是没有意义的。
# So <span class="token keyword">for</span> instance <span class="token keyword">if</span> you have a four cores boxes<span class="token punctuation">,</span> <span class="token keyword">try</span> to use <span class="token number">2</span> or <span class="token number">3</span> I<span class="token operator">/</span>O
# threads<span class="token punctuation">,</span> <span class="token keyword">if</span> you have a <span class="token number">8</span> cores<span class="token punctuation">,</span> <span class="token keyword">try</span> to use <span class="token number">6</span> threads<span class="token punctuation">.</span> In order to
# enable I<span class="token operator">/</span>O threads use the following configuration directive<span class="token operator">:</span>
# 例如，如果你有<span class="token number">4</span>个内核，尝试使用<span class="token number">2</span>或<span class="token number">3</span>个I<span class="token operator">/</span>O线程，如果你有<span class="token number">8</span>个内核，尝试使用<span class="token number">6</span>个线程。为了启用I<span class="token operator">/</span>O线程使用以下配置指令<span class="token operator">:</span>
# io<span class="token operator">-</span>threads <span class="token number">4</span>
#
# Setting io<span class="token operator">-</span>threads to <span class="token number">1</span> will just use the main thread as usually<span class="token punctuation">.</span>
# When I<span class="token operator">/</span>O threads are enabled<span class="token punctuation">,</span> we only use threads <span class="token keyword">for</span> writes<span class="token punctuation">,</span> that is
# to thread the <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> syscall and transfer the client buffers to the
# socket<span class="token punctuation">.</span> However it is also possible to enable threading of reads and
# protocol parsing using the following configuration directive<span class="token punctuation">,</span> by setting
# it to yes<span class="token operator">:</span>
# 将io线程设置为<span class="token number">1</span>只会像往常一样使用主线程。当启用I<span class="token operator">/</span>O线程时，我们只使用线程进行写操作，
# 即线程写系统调用并将客户端缓冲区传输到套接字。然而，也可以启用线程读取和协议解析使用以下配置指令，通过设置为yes<span class="token operator">:</span>
#
# io<span class="token operator">-</span>threads<span class="token operator">-</span><span class="token keyword">do</span><span class="token operator">-</span>reads no
#
# Usually threading reads doesn't help much<span class="token punctuation">.</span>
# 通常线程读取不会有太大帮助。哈哈，也就是百分之八十的人用不到这个玩意儿。
# NOTE <span class="token number">1</span><span class="token operator">:</span> This configuration directive cannot be changed at runtime via
# CONFIG SET<span class="token punctuation">.</span> Aso <span class="token keyword">this</span> feature currently does not work when SSL is
# enabled<span class="token punctuation">.</span>
# 这个配置指令不能在运行时通过配置集进行更改。当启用SSL时，此功能当前无法工作。
# NOTE <span class="token number">2</span><span class="token operator">:</span> If you want to test the Redis speedup using redis<span class="token operator">-</span>benchmark<span class="token punctuation">,</span> make
# sure you also run the benchmark itself in threaded mode<span class="token punctuation">,</span> using the
# <span class="token operator">--</span>threads option to match the number of Redis theads<span class="token punctuation">,</span> otherwise you'll not
# be able to notice the improvements<span class="token punctuation">.</span>
# 如果您想使用Redis <span class="token operator">-</span>benchmark测试Redis加速，请确保您也在线程模式下运行基准测试本身，使用——threads选项来匹配Redis头的数量，否则您将无法注意到这些改进。

############################## APPEND ONLY MODE ###############################
# 追加模式
# By <span class="token keyword">default</span> Redis asynchronously dumps the dataset on disk<span class="token punctuation">.</span> This mode is
# good enough in many applications<span class="token punctuation">,</span> but an issue with the Redis process or
# a power outage may result into a few minutes of writes <span class="token function">lost</span> <span class="token punctuation">(</span>depending on
# the configured save points<span class="token punctuation">)</span><span class="token punctuation">.</span>
# 默认情况下，Redis异步地将数据转储到磁盘上。这种模式在许多应用程序中已经足够好了，但是Redis进程或断电可能会导致几分钟的写丢失<span class="token punctuation">(</span>取决于配置的保存点<span class="token punctuation">)</span>。
# The Append Only File is an alternative persistence mode that provides
# much better durability<span class="token punctuation">.</span> For instance using the <span class="token keyword">default</span> data fsync policy
# <span class="token punctuation">(</span>see later in the config file<span class="token punctuation">)</span> Redis can lose just one second of writes in a
# dramatic event like a server power outage<span class="token punctuation">,</span> or a single write <span class="token keyword">if</span> something
# wrong with the Redis process itself happens<span class="token punctuation">,</span> but the operating system is
# still running correctly<span class="token punctuation">.</span>
# Append Only文件是另一种持久性模式，它提供了更好的持久性。
# 例如使用默认数据fsync策略配置文件中<span class="token punctuation">(</span>见后<span class="token punctuation">)</span>复述<span class="token punctuation">,</span>可以失去只是一秒的写在一个戏剧性的事件像一个服务器断电<span class="token punctuation">,</span>或一个写如果复述过程本身出了问题<span class="token punctuation">,</span>但正确操作系统仍在运行。
#
# AOF and RDB persistence can be enabled at the same time without problems<span class="token punctuation">.</span>
# If the AOF is enabled on startup Redis will load the AOF<span class="token punctuation">,</span> that is the file
# with the better durability guarantees<span class="token punctuation">.</span>
# 可以同时启用AOF和RDB持久性，不会出现问题。如果启动时启用了AOF，则Redis将加载AOF，这是具有更好持久性保证的文件。
# Please check http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>redis<span class="token punctuation">.</span>io<span class="token operator">/</span>topics<span class="token operator">/</span>persistence <span class="token keyword">for</span> more information<span class="token punctuation">.</span>
# 是否开启aof持久化。默认不开启
appendonly no

# The name of the append only <span class="token function">file</span> <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"appendonly.aof"</span><span class="token punctuation">)</span>
# 仅追加文件的名称<span class="token punctuation">(</span>默认<span class="token operator">:</span>“appendonly<span class="token punctuation">.</span>aof”<span class="token punctuation">)</span>
appendfilename <span class="token string">"appendonly.aof"</span>

# The <span class="token function">fsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> call tells the Operating System to actually write data on disk
# instead of waiting <span class="token keyword">for</span> more data in the output buffer<span class="token punctuation">.</span> Some OS will really flush
# data on disk<span class="token punctuation">,</span> some other OS will just <span class="token keyword">try</span> to <span class="token keyword">do</span> it ASAP<span class="token punctuation">.</span>
# <span class="token function">fsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>调用告诉操作系统实际在磁盘上写入数据，而不是等待输出缓冲区中的更多数据。一些操作系统会真正地刷新磁盘上的数据，而另一些操作系统只是试图尽快完成。
# Redis supports three different modes<span class="token operator">:</span>
# Redis支持三种不同的模式<span class="token operator">:</span>
# no<span class="token operator">:</span> don't fsync<span class="token punctuation">,</span> just let the OS flush the data when it wants<span class="token punctuation">.</span> Faster<span class="token punctuation">.</span>
# 从不fsync，只需将数据交给操作系统即可。更快，更不安全的方法。通常，Linux使用此配置每<span class="token number">30</span>秒刷新一次数据，但这取决于内核的精确调整。
# always<span class="token operator">:</span> fsync after every write to the append only log<span class="token punctuation">.</span> Slow<span class="token punctuation">,</span> Safest<span class="token punctuation">.</span>
# fsync每次将新命令附加到AOF时。非常非常慢，非常安全。
# everysec<span class="token operator">:</span> fsync only one time every second<span class="token punctuation">.</span> Compromise<span class="token punctuation">.</span>
# fsync每秒。速度足够快（在<span class="token number">2.4</span>中可能与快照速度一样快），如果发生灾难，您可能会丢失<span class="token number">1</span>秒的数据。
#
# The <span class="token keyword">default</span> is <span class="token string">"everysec"</span><span class="token punctuation">,</span> as that's usually the right compromise between
# speed and data safety<span class="token punctuation">.</span> It's up to you to understand <span class="token keyword">if</span> you can relax <span class="token keyword">this</span> to
# <span class="token string">"no"</span> that will let the operating system flush the output buffer when
# it wants<span class="token punctuation">,</span> <span class="token keyword">for</span> better <span class="token function">performances</span> <span class="token punctuation">(</span>but <span class="token keyword">if</span> you can live with the idea of
# some data loss consider the <span class="token keyword">default</span> persistence mode that's snapshotting<span class="token punctuation">)</span><span class="token punctuation">,</span>
# or on the contrary<span class="token punctuation">,</span> use <span class="token string">"always"</span> that's very slow but a bit safer than
# everysec<span class="token punctuation">.</span>
# 默认值是“everysec”，因为这通常是速度和数据安全性之间的正确折衷。由你理解如果你能放松这个“不”字<span class="token punctuation">,</span>让操作系统刷新输出缓冲区时<span class="token punctuation">,</span>
# 为了更好的表现<span class="token punctuation">(</span>但是如果你可以忍受一些数据丢失的想法考虑默认快照的持久性模式<span class="token punctuation">)</span><span class="token punctuation">,</span>或相反<span class="token punctuation">,</span>使用“总是”非常缓慢但比everysec更安全一点。
# More details please check the following article<span class="token operator">:</span>
# http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>antirez<span class="token punctuation">.</span>com<span class="token operator">/</span>post<span class="token operator">/</span>redis<span class="token operator">-</span>persistence<span class="token operator">-</span>demystified<span class="token punctuation">.</span>html
#
# If unsure<span class="token punctuation">,</span> use <span class="token string">"everysec"</span><span class="token punctuation">.</span>
# 如果不确定，使用“everysec”。
# appendfsync always
appendfsync everysec
# appendfsync no

# When the AOF fsync policy is set to always or everysec<span class="token punctuation">,</span> and a background
# saving <span class="token function">process</span> <span class="token punctuation">(</span>a background save or AOF log background rewriting<span class="token punctuation">)</span> is
# performing a lot of I<span class="token operator">/</span>O against the disk<span class="token punctuation">,</span> in some Linux configurations
# Redis may block too <span class="token keyword">long</span> on the <span class="token function">fsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> call<span class="token punctuation">.</span> Note that there is no fix <span class="token keyword">for</span>
# <span class="token keyword">this</span> currently<span class="token punctuation">,</span> as even performing fsync in a different thread will block
# our synchronous <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> call<span class="token punctuation">.</span>
#
# In order to mitigate <span class="token keyword">this</span> problem it's possible to use the following option
# that will prevent <span class="token function">fsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> from being called in the main process <span class="token keyword">while</span> a
# BGSAVE or BGREWRITEAOF is in progress<span class="token punctuation">.</span>
#
# This means that <span class="token keyword">while</span> another child is saving<span class="token punctuation">,</span> the durability of Redis is
# the same as <span class="token string">"appendfsync none"</span><span class="token punctuation">.</span> In practical terms<span class="token punctuation">,</span> <span class="token keyword">this</span> means that it is
# possible to lose up to <span class="token number">30</span> seconds of log in the worst <span class="token function">scenario</span> <span class="token punctuation">(</span>with the
# <span class="token keyword">default</span> Linux settings<span class="token punctuation">)</span><span class="token punctuation">.</span>
#
# If you have latency problems turn <span class="token keyword">this</span> to <span class="token string">"yes"</span><span class="token punctuation">.</span> Otherwise leave it as
# <span class="token string">"no"</span> that is the safest pick from the point of view of durability<span class="token punctuation">.</span>
# 如果你有延迟问题，将此选项变为“yes”。否则，从耐久性的角度来看，“no”是最安全的选择。
no<span class="token operator">-</span>appendfsync<span class="token operator">-</span>on<span class="token operator">-</span>rewrite no

# Automatic rewrite of the append only file<span class="token punctuation">.</span>
# 自动重写仅追加文件。
# Redis is able to automatically rewrite the log file implicitly calling
# BGREWRITEAOF when the AOF log size grows by the specified percentage<span class="token punctuation">.</span>
# Redis能够在日志大小按指定百分比增长时自动重写隐式调用BGREWRITEAOF的日志文件。
# This is how it works<span class="token operator">:</span> Redis remembers the size of the AOF file after the
# latest <span class="token function">rewrite</span> <span class="token punctuation">(</span><span class="token keyword">if</span> no rewrite has happened since the restart<span class="token punctuation">,</span> the size of
# the AOF at startup is used<span class="token punctuation">)</span><span class="token punctuation">.</span>
# 它是这样工作的<span class="token operator">:</span>Redis记住了最近一次重写后的AOF文件的大小<span class="token punctuation">(</span>如果重新启动后没有发生重写，则使用启动时的AOF大小<span class="token punctuation">)</span>。
#
# This base size is compared to the current size<span class="token punctuation">.</span> If the current size is
# bigger than the specified percentage<span class="token punctuation">,</span> the rewrite is triggered<span class="token punctuation">.</span> Also
# you need to specify a minimal size <span class="token keyword">for</span> the AOF file to be rewritten<span class="token punctuation">,</span> <span class="token keyword">this</span>
# is useful to avoid rewriting the AOF file even <span class="token keyword">if</span> the percentage increase
# is reached but it is still pretty small<span class="token punctuation">.</span>
# 这个基本大小与当前大小进行比较。如果当前大小大于指定的百分比，则会触发重写。
# 此外，您还需要为要重写的AOF文件指定最小的大小，这对于避免重写AOF文件非常有用，即使百分比会增加到达，但它仍然是相当小的。
# Specify a percentage of zero in order to disable the automatic AOF
# rewrite feature<span class="token punctuation">.</span>
# 指定零的百分比，以禁用自动AOF重写特性。
# 当文件超过上次rewrite的百分之百的时候就会重写。
# 对于下面的我是这样认为的：
# 当前AOF文件大小超过上一次重写的AOF文件大小的百分之多少才会重写
# 即为：当文件超过64mb开启重写，如果超过<span class="token number">64</span>的百分之百，也就是超过<span class="token number">64</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">128</span>的时候再次重写。

auto<span class="token operator">-</span>aof<span class="token operator">-</span>rewrite<span class="token operator">-</span>percentage <span class="token number">100</span>
auto<span class="token operator">-</span>aof<span class="token operator">-</span>rewrite<span class="token operator">-</span>min<span class="token operator">-</span>size 64mb

# An AOF file may be found to be truncated at the end during the Redis
# startup process<span class="token punctuation">,</span> when the AOF data gets loaded back into memory<span class="token punctuation">.</span>
# This may happen when the system where Redis is running
# crashes<span class="token punctuation">,</span> especially when an ext4 filesystem is mounted without the
# data<span class="token operator">=</span>ordered <span class="token function">option</span> <span class="token punctuation">(</span>however <span class="token keyword">this</span> can't happen when Redis itself
# crashes or aborts but the operating system still works correctly<span class="token punctuation">)</span><span class="token punctuation">.</span>
#
# Redis can either exit with an error when <span class="token keyword">this</span> happens<span class="token punctuation">,</span> or load as much
# data as <span class="token function">possible</span> <span class="token punctuation">(</span>the <span class="token keyword">default</span> now<span class="token punctuation">)</span> and start <span class="token keyword">if</span> the AOF file is found
# to be truncated at the end<span class="token punctuation">.</span> The following option controls <span class="token keyword">this</span> behavior<span class="token punctuation">.</span>
#
# If aof<span class="token operator">-</span>load<span class="token operator">-</span>truncated is set to yes<span class="token punctuation">,</span> a truncated AOF file is loaded and
# the Redis server starts emitting a log to inform the user of the event<span class="token punctuation">.</span>
# Otherwise <span class="token keyword">if</span> the option is set to no<span class="token punctuation">,</span> the server aborts with an error
# and refuses to start<span class="token punctuation">.</span> When the option is set to no<span class="token punctuation">,</span> the user requires
# to fix the AOF file using the <span class="token string">"redis-check-aof"</span> utility before to restart
# the server<span class="token punctuation">.</span>
#
# Note that <span class="token keyword">if</span> the AOF file will be found to be corrupted in the middle
# the server will still exit with an error<span class="token punctuation">.</span> This option only applies when
# Redis will <span class="token keyword">try</span> to read more data from the AOF file but not enough bytes
# will be found<span class="token punctuation">.</span>
# 注意，如果AOF文件在中间被破坏，服务器仍然会带着错误退出。这个选项只适用于当Redis试图从AOF文件读取更多的数据，但没有足够的字节将被发现。
# redis在启动时可以加载被截断的AOF文件
aof<span class="token operator">-</span>load<span class="token operator">-</span>truncated yes

# When rewriting the AOF file<span class="token punctuation">,</span> Redis is able to use an RDB preamble in the
# AOF file <span class="token keyword">for</span> faster rewrites and recoveries<span class="token punctuation">.</span> When <span class="token keyword">this</span> option is turned
# on the rewritten AOF file is composed of two different stanzas<span class="token operator">:</span>
# 当重写AOF文件时，Redis能够在AOF文件中使用一个RDB序言，以便更快地重写和恢复。当这个选项打开时，重写的AOF文件由两个不同的节组成<span class="token operator">:</span>
#   <span class="token punctuation">[</span>RDB file<span class="token punctuation">]</span><span class="token punctuation">[</span>AOF tail<span class="token punctuation">]</span>
#
# When loading Redis recognizes that the AOF file starts with the <span class="token string">"REDIS"</span>
# string and loads the prefixed RDB file<span class="token punctuation">,</span> and continues loading the AOF
# tail<span class="token punctuation">.</span>
# 当加载Redis时，它识别出AOF文件以“Redis”字符串开始并加载前缀RDB文件，然后继续加载AOF尾部。
aof<span class="token operator">-</span>use<span class="token operator">-</span>rdb<span class="token operator">-</span>preamble yes

################################ LUA SCRIPTING  ###############################
# LUA脚本
# Max execution time of a Lua script in milliseconds<span class="token punctuation">.</span>
# Lua脚本的最大执行时间<span class="token punctuation">(</span>以毫秒为单位<span class="token punctuation">)</span>

# If the maximum execution time is reached Redis will log that a script is
# still in execution after the maximum allowed time and will start to
# reply to queries with an error<span class="token punctuation">.</span>
# 如果达到最大执行时间，Redis将记录脚本在最大允许时间之后仍在执行，并开始用错误回复查询。
# When a <span class="token keyword">long</span> running script exceeds the maximum execution time only the
# SCRIPT KILL and SHUTDOWN NOSAVE commands are available<span class="token punctuation">.</span> The first can be
# used to stop a script that did not yet called write commands<span class="token punctuation">.</span> The second
# is the only way to shut down the server in the <span class="token keyword">case</span> a write command was
# already issued by the script but the user doesn't want to wait <span class="token keyword">for</span> the natural
# termination of the script<span class="token punctuation">.</span>
#
# Set it to <span class="token number">0</span> or a negative value <span class="token keyword">for</span> unlimited execution without warnings<span class="token punctuation">.</span>
# 将其设置为<span class="token number">0</span>或负值，以便在没有警告的情况下无限执行。
lua<span class="token operator">-</span>time<span class="token operator">-</span>limit <span class="token number">5000</span>

################################ REDIS CLUSTER  ###############################
# 分布式集群配置
# Normal Redis instances can't be part of a Redis Cluster<span class="token punctuation">;</span> only nodes that are
# started as cluster nodes can<span class="token punctuation">.</span> In order to start a Redis instance as a
# cluster node enable the cluster support uncommenting the following<span class="token operator">:</span>
# 正常的Redis实例不能成为Redis集群的一部分<span class="token punctuation">;</span>只有作为集群节点启动的节点可以。为了启动一个Redis实例作为一个集群节点启用集群支持取消注释如下<span class="token operator">:</span>
# cluster<span class="token operator">-</span>enabled yes

# Every cluster node has a cluster configuration file<span class="token punctuation">.</span> This file is not
# intended to be edited by hand<span class="token punctuation">.</span> It is created and updated by Redis nodes<span class="token punctuation">.</span>
# Every Redis Cluster node requires a different cluster configuration file<span class="token punctuation">.</span>
# Make sure that instances running in the same system <span class="token keyword">do</span> not have
# overlapping cluster configuration file names<span class="token punctuation">.</span>
# 每个集群节点都有一个集群配置文件。此文件不打算手工编辑。它由Redis节点创建和更新。
# 每个Redis集群节点都需要一个不同的集群配置文件。确保在同一系统中运行的实例没有重叠的集群配置文件名。
# cluster<span class="token operator">-</span>config<span class="token operator">-</span>file nodes<span class="token operator">-</span><span class="token number">6379</span><span class="token punctuation">.</span>conf

# Cluster node timeout is the amount of milliseconds a node must be unreachable
# <span class="token keyword">for</span> it to be considered in failure state<span class="token punctuation">.</span>
# 群集节点超时是节点必须不可达的毫秒数，以便将其视为故障状态。
# Most other internal time limits are multiple of the node timeout<span class="token punctuation">.</span>
# 大多数其他内部时间限制是多个节点超时。
# cluster<span class="token operator">-</span>node<span class="token operator">-</span>timeout <span class="token number">15000</span>

# A replica of a failing master will avoid to start a failover <span class="token keyword">if</span> its data
# looks too old<span class="token punctuation">.</span>
# 如果数据看起来太旧，失败主服务器的副本将避免启动故障转移。
# There is no simple way <span class="token keyword">for</span> a replica to actually have an exact measure of
# its <span class="token string">"data age"</span><span class="token punctuation">,</span> so the following two checks are performed<span class="token operator">:</span>
#
# <span class="token number">1</span><span class="token punctuation">)</span> If there are multiple replicas able to failover<span class="token punctuation">,</span> they exchange messages
#    in order to <span class="token keyword">try</span> to give an advantage to the replica with the best
#    replication <span class="token function">offset</span> <span class="token punctuation">(</span>more data from the master processed<span class="token punctuation">)</span><span class="token punctuation">.</span>
#    Replicas will <span class="token keyword">try</span> to get their rank by offset<span class="token punctuation">,</span> and apply to the start
#    of the failover a delay proportional to their rank<span class="token punctuation">.</span>
#
# <span class="token number">2</span><span class="token punctuation">)</span> Every single replica computes the time of the last interaction with
#    its master<span class="token punctuation">.</span> This can be the last ping or command <span class="token function">received</span> <span class="token punctuation">(</span><span class="token keyword">if</span> the master
#    is still in the <span class="token string">"connected"</span> state<span class="token punctuation">)</span><span class="token punctuation">,</span> or the time that elapsed since the
#    disconnection with the <span class="token function">master</span> <span class="token punctuation">(</span><span class="token keyword">if</span> the replication link is currently down<span class="token punctuation">)</span><span class="token punctuation">.</span>
#    If the last interaction is too old<span class="token punctuation">,</span> the replica will not <span class="token keyword">try</span> to failover
#    at all<span class="token punctuation">.</span>
#
# The point <span class="token string">"2"</span> can be tuned by user<span class="token punctuation">.</span> Specifically a replica will not perform
# the failover <span class="token keyword">if</span><span class="token punctuation">,</span> since the last interaction with the master<span class="token punctuation">,</span> the time
# elapsed is greater than<span class="token operator">:</span>
#
#   <span class="token punctuation">(</span>node<span class="token operator">-</span>timeout <span class="token operator">*</span> replica<span class="token operator">-</span>validity<span class="token operator">-</span>factor<span class="token punctuation">)</span> <span class="token operator">+</span> repl<span class="token operator">-</span>ping<span class="token operator">-</span>replica<span class="token operator">-</span>period
#
# So <span class="token keyword">for</span> example <span class="token keyword">if</span> node<span class="token operator">-</span>timeout is <span class="token number">30</span> seconds<span class="token punctuation">,</span> and the replica<span class="token operator">-</span>validity<span class="token operator">-</span>factor
# is <span class="token number">10</span><span class="token punctuation">,</span> and assuming a <span class="token keyword">default</span> repl<span class="token operator">-</span>ping<span class="token operator">-</span>replica<span class="token operator">-</span>period of <span class="token number">10</span> seconds<span class="token punctuation">,</span> the
# replica will not <span class="token keyword">try</span> to failover <span class="token keyword">if</span> it was not able to talk with the master
# <span class="token keyword">for</span> longer than <span class="token number">310</span> seconds<span class="token punctuation">.</span>
#
# A large replica<span class="token operator">-</span>validity<span class="token operator">-</span>factor may allow replicas with too old data to failover
# a master<span class="token punctuation">,</span> <span class="token keyword">while</span> a too small value may prevent the cluster from being able to
# elect a replica at all<span class="token punctuation">.</span>
#
# For maximum availability<span class="token punctuation">,</span> it is possible to set the replica<span class="token operator">-</span>validity<span class="token operator">-</span>factor
# to a value of <span class="token number">0</span><span class="token punctuation">,</span> which means<span class="token punctuation">,</span> that replicas will always <span class="token keyword">try</span> to failover the
# master regardless of the last time they interacted with the master<span class="token punctuation">.</span>
# <span class="token punctuation">(</span>However they'll always <span class="token keyword">try</span> to apply a delay proportional to their
# offset rank<span class="token punctuation">)</span><span class="token punctuation">.</span>
#
# Zero is the only value able to guarantee that when all the partitions heal
# the cluster will always be able to <span class="token keyword">continue</span><span class="token punctuation">.</span>
#
# cluster<span class="token operator">-</span>replica<span class="token operator">-</span>validity<span class="token operator">-</span>factor <span class="token number">10</span>

# Cluster replicas are able to migrate to orphaned masters<span class="token punctuation">,</span> that are masters
# that are left without working replicas<span class="token punctuation">.</span> This improves the cluster ability
# to resist to failures as otherwise an orphaned master can't be failed over
# in <span class="token keyword">case</span> of failure <span class="token keyword">if</span> it has no working replicas<span class="token punctuation">.</span>
#
# Replicas migrate to orphaned masters only <span class="token keyword">if</span> there are still at least a
# given number of other working replicas <span class="token keyword">for</span> their old master<span class="token punctuation">.</span> This number
# is the <span class="token string">"migration barrier"</span><span class="token punctuation">.</span> A migration barrier of <span class="token number">1</span> means that a replica
# will migrate only <span class="token keyword">if</span> there is at least <span class="token number">1</span> other working replica <span class="token keyword">for</span> its master
# and so forth<span class="token punctuation">.</span> It usually reflects the number of replicas you want <span class="token keyword">for</span> every
# master in your cluster<span class="token punctuation">.</span>
#
# Default is <span class="token function">1</span> <span class="token punctuation">(</span>replicas migrate only <span class="token keyword">if</span> their masters remain with at least
# one replica<span class="token punctuation">)</span><span class="token punctuation">.</span> To disable migration just set it to a very large value<span class="token punctuation">.</span>
# A value of <span class="token number">0</span> can be set but is useful only <span class="token keyword">for</span> debugging and dangerous
# in production<span class="token punctuation">.</span>
#
# cluster<span class="token operator">-</span>migration<span class="token operator">-</span>barrier <span class="token number">1</span>

# By <span class="token keyword">default</span> Redis Cluster nodes stop accepting queries <span class="token keyword">if</span> they detect there
# is at least an hash slot <span class="token function">uncovered</span> <span class="token punctuation">(</span>no available node is serving it<span class="token punctuation">)</span><span class="token punctuation">.</span>
# This way <span class="token keyword">if</span> the cluster is partially <span class="token function">down</span> <span class="token punctuation">(</span><span class="token keyword">for</span> example a range of hash slots
# are no longer covered<span class="token punctuation">)</span> all the cluster becomes<span class="token punctuation">,</span> eventually<span class="token punctuation">,</span> unavailable<span class="token punctuation">.</span>
# It automatically returns available as soon as all the slots are covered again<span class="token punctuation">.</span>
#
# However sometimes you want the subset of the cluster which is working<span class="token punctuation">,</span>
# to <span class="token keyword">continue</span> to accept queries <span class="token keyword">for</span> the part of the key space that is still
# covered<span class="token punctuation">.</span> In order to <span class="token keyword">do</span> so<span class="token punctuation">,</span> just set the cluster<span class="token operator">-</span>require<span class="token operator">-</span>full<span class="token operator">-</span>coverage
# option to no<span class="token punctuation">.</span>
#
# cluster<span class="token operator">-</span>require<span class="token operator">-</span>full<span class="token operator">-</span>coverage yes

# This option<span class="token punctuation">,</span> when set to yes<span class="token punctuation">,</span> prevents replicas from trying to failover its
# master during master failures<span class="token punctuation">.</span> However the master can still perform a
# manual failover<span class="token punctuation">,</span> <span class="token keyword">if</span> forced to <span class="token keyword">do</span> so<span class="token punctuation">.</span>
#
# This is useful in different scenarios<span class="token punctuation">,</span> especially in the <span class="token keyword">case</span> of multiple
# data center operations<span class="token punctuation">,</span> where we want one side to never be promoted <span class="token keyword">if</span> not
# in the <span class="token keyword">case</span> of a total DC failure<span class="token punctuation">.</span>
#
# cluster<span class="token operator">-</span>replica<span class="token operator">-</span>no<span class="token operator">-</span>failover no

# This option<span class="token punctuation">,</span> when set to yes<span class="token punctuation">,</span> allows nodes to serve read traffic <span class="token keyword">while</span> the
# the cluster is in a down state<span class="token punctuation">,</span> as <span class="token keyword">long</span> as it believes it owns the slots<span class="token punctuation">.</span> 
#
# This is useful <span class="token keyword">for</span> two cases<span class="token punctuation">.</span>  The first <span class="token keyword">case</span> is <span class="token keyword">for</span> when an application 
# doesn't require consistency of data during node failures or network partitions<span class="token punctuation">.</span>
# One example of <span class="token keyword">this</span> is a cache<span class="token punctuation">,</span> where as <span class="token keyword">long</span> as the node has the data it
# should be able to serve it<span class="token punctuation">.</span> 
#
# The second use <span class="token keyword">case</span> is <span class="token keyword">for</span> configurations that don't meet the recommended  
# three shards but want to enable cluster mode and scale later<span class="token punctuation">.</span> A 
# master outage in a <span class="token number">1</span> or <span class="token number">2</span> shard configuration causes a read<span class="token operator">/</span>write outage to the
# entire cluster without <span class="token keyword">this</span> option set<span class="token punctuation">,</span> with it set there is only a write outage<span class="token punctuation">.</span>
# Without a quorum of masters<span class="token punctuation">,</span> slot ownership will not change automatically<span class="token punctuation">.</span> 
#
# cluster<span class="token operator">-</span>allow<span class="token operator">-</span>reads<span class="token operator">-</span>when<span class="token operator">-</span>down no

# In order to setup your cluster make sure to read the documentation
# available at http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>redis<span class="token punctuation">.</span>io web site<span class="token punctuation">.</span>

########################## CLUSTER DOCKER<span class="token operator">/</span>NAT support  ########################

# In certain deployments<span class="token punctuation">,</span> Redis Cluster nodes address discovery fails<span class="token punctuation">,</span> because
# addresses are NAT<span class="token operator">-</span>ted or because ports are <span class="token function">forwarded</span> <span class="token punctuation">(</span>the typical <span class="token keyword">case</span> is
# Docker and other containers<span class="token punctuation">)</span><span class="token punctuation">.</span>
#
# In order to make Redis Cluster working in such environments<span class="token punctuation">,</span> a <span class="token keyword">static</span>
# configuration where each node knows its <span class="token keyword">public</span> address is needed<span class="token punctuation">.</span> The
# following two options are used <span class="token keyword">for</span> <span class="token keyword">this</span> scope<span class="token punctuation">,</span> and are<span class="token operator">:</span>
#
# <span class="token operator">*</span> cluster<span class="token operator">-</span>announce<span class="token operator">-</span>ip
# <span class="token operator">*</span> cluster<span class="token operator">-</span>announce<span class="token operator">-</span>port
# <span class="token operator">*</span> cluster<span class="token operator">-</span>announce<span class="token operator">-</span>bus<span class="token operator">-</span>port
#
# Each instruct the node about its address<span class="token punctuation">,</span> client port<span class="token punctuation">,</span> and cluster message
# bus port<span class="token punctuation">.</span> The information is then published in the header of the bus packets
# so that other nodes will be able to correctly map the address of the node
# publishing the information<span class="token punctuation">.</span>
#
# If the above options are not used<span class="token punctuation">,</span> the normal Redis Cluster auto<span class="token operator">-</span>detection
# will be used instead<span class="token punctuation">.</span>
#
# Note that when remapped<span class="token punctuation">,</span> the bus port may not be at the fixed offset of
# clients port <span class="token operator">+</span> <span class="token number">10000</span><span class="token punctuation">,</span> so you can specify any port and bus<span class="token operator">-</span>port depending
# on how they get remapped<span class="token punctuation">.</span> If the bus<span class="token operator">-</span>port is not set<span class="token punctuation">,</span> a fixed offset of
# <span class="token number">10000</span> will be used as usually<span class="token punctuation">.</span>
#
# Example<span class="token operator">:</span>
#
# cluster<span class="token operator">-</span>announce<span class="token operator">-</span>ip <span class="token number">10.1</span><span class="token punctuation">.</span><span class="token number">1.5</span>
# cluster<span class="token operator">-</span>announce<span class="token operator">-</span>port <span class="token number">6379</span>
# cluster<span class="token operator">-</span>announce<span class="token operator">-</span>bus<span class="token operator">-</span>port <span class="token number">6380</span>

################################## SLOW LOG ###################################

# The Redis Slow Log is a system to log queries that exceeded a specified
# execution time<span class="token punctuation">.</span> The execution time does not include the I<span class="token operator">/</span>O operations
# like talking with the client<span class="token punctuation">,</span> sending the reply and so forth<span class="token punctuation">,</span>
# but just the time needed to actually execute the <span class="token function">command</span> <span class="token punctuation">(</span><span class="token keyword">this</span> is the only
# stage of command execution where the thread is blocked and can not serve
# other requests in the meantime<span class="token punctuation">)</span><span class="token punctuation">.</span>
# Redis慢日志是一个记录超过指定执行时间的查询的系统。执行时间不包括I <span class="token operator">/</span> O操作<span class="token punctuation">,</span>比如与客户端<span class="token punctuation">,</span>发送应答等等<span class="token punctuation">,</span>
# 但就实际执行命令所需的时间<span class="token punctuation">(</span>这是唯一阶段命令执行的线程被阻塞<span class="token punctuation">,</span>不能同时处理其他请求<span class="token punctuation">)</span>。
# You can configure the slow log with two parameters<span class="token operator">:</span> one tells Redis
# what is the execution time<span class="token punctuation">,</span> in microseconds<span class="token punctuation">,</span> to exceed in order <span class="token keyword">for</span> the
# command to get logged<span class="token punctuation">,</span> and the other parameter is the length of the
# slow log<span class="token punctuation">.</span> When a <span class="token keyword">new</span> <span class="token class-name">command</span> is logged the oldest one is removed from the
# queue of logged commands<span class="token punctuation">.</span>
# 您可以使用两个参数配置慢日志<span class="token operator">:</span>一个参数告诉Redis命令的执行时间<span class="token punctuation">(</span>以微秒为单位<span class="token punctuation">)</span>超过了多少，
# 以便记录命令，另一个参数是慢日志的长度。当记录一个新命令时，将从记录的命令队列中删除最旧的命令。
# The following time is expressed in microseconds<span class="token punctuation">,</span> so <span class="token number">1000000</span> is equivalent
# to one second<span class="token punctuation">.</span> Note that a negative number disables the slow log<span class="token punctuation">,</span> <span class="token keyword">while</span>
# a value of zero forces the logging of every command<span class="token punctuation">.</span>
# 下面的时间用微秒表示，所以<span class="token number">1000000</span>等于<span class="token number">1</span>秒。注意，负数会禁用慢日志，而值<span class="token number">0</span>则强制对每个命令进行日志记录。
slowlog<span class="token operator">-</span>log<span class="token operator">-</span>slower<span class="token operator">-</span>than <span class="token number">10000</span>

# There is no limit to <span class="token keyword">this</span> length<span class="token punctuation">.</span> Just be aware that it will consume memory<span class="token punctuation">.</span>
# You can reclaim memory used by the slow log with SLOWLOG RESET<span class="token punctuation">.</span>
# 这个长度没有限制。请注意，它会消耗内存。您可以通过重新设置慢日志来回收慢日志使用的内存。
slowlog<span class="token operator">-</span>max<span class="token operator">-</span>len <span class="token number">128</span>

################################ LATENCY MONITOR ##############################

# The Redis latency monitoring subsystem samples different operations
# at runtime in order to collect data related to possible sources of
# latency of a Redis instance<span class="token punctuation">.</span>
# Redis延迟监视子系统在运行时采样不同的操作，以便收集与Redis实例的潜在延迟源相关的数据。
# Via the LATENCY command <span class="token keyword">this</span> information is available to the user that can
# print graphs and obtain reports<span class="token punctuation">.</span>
# 通过LATENCY命令，可以将此信息提供给能够打印图形和获取报告的用户。
# The system only logs operations that were performed in a time equal or
# greater than the amount of milliseconds specified via the
# latency<span class="token operator">-</span>monitor<span class="token operator">-</span>threshold configuration directive<span class="token punctuation">.</span> When its value is set
# to zero<span class="token punctuation">,</span> the latency monitor is turned off<span class="token punctuation">.</span>
# 系统只记录在等于或大于通过延迟监视阈值配置指令指定的毫秒数的时间内执行的操作。当其值设置为零时，延迟监控器将被关闭。
# By <span class="token keyword">default</span> latency monitoring is disabled since it is mostly not needed
# <span class="token keyword">if</span> you don't have latency issues<span class="token punctuation">,</span> and collecting data has a performance
# impact<span class="token punctuation">,</span> that <span class="token keyword">while</span> very small<span class="token punctuation">,</span> can be measured under big load<span class="token punctuation">.</span> Latency
# monitoring can easily be enabled at runtime using the command
# <span class="token string">"CONFIG SET latency-monitor-threshold &lt;milliseconds>"</span> <span class="token keyword">if</span> needed<span class="token punctuation">.</span>
# 默认情况下，延迟监视是禁用的，因为如果没有延迟问题，那么基本上不需要延迟监视，而且收集数据对性能有影响，虽然非常小，但是可以在大负载下测量。
# 如果需要，可以在运行时使用“latency<span class="token operator">-</span>monitor<span class="token operator">-</span>threshold <span class="token operator">&lt;</span>milliseconds<span class="token operator">></span>”命令轻松启用延迟监视
# 延时监控的采样时间阈值（最小值）。单位毫秒
latency<span class="token operator">-</span>monitor<span class="token operator">-</span>threshold <span class="token number">0</span>

############################# EVENT NOTIFICATION ##############################
# 事件通知
# Redis can notify Pub<span class="token operator">/</span>Sub clients about events happening in the key space<span class="token punctuation">.</span>
# This feature is documented at http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>redis<span class="token punctuation">.</span>io<span class="token operator">/</span>topics<span class="token operator">/</span>notifications
#
# For instance <span class="token keyword">if</span> keyspace events notification is enabled<span class="token punctuation">,</span> and a client
# performs a DEL operation on key <span class="token string">"foo"</span> stored in the Database <span class="token number">0</span><span class="token punctuation">,</span> two
# messages will be published via Pub<span class="token operator">/</span>Sub<span class="token operator">:</span>
#
# PUBLISH __keyspace<span class="token annotation punctuation">@0__</span><span class="token operator">:</span>foo del
# PUBLISH __keyevent<span class="token annotation punctuation">@0__</span><span class="token operator">:</span>del foo
#
# It is possible to select the events that Redis will notify among a set
# of classes<span class="token punctuation">.</span> Every <span class="token keyword">class</span> <span class="token class-name">is</span> identified by a single character<span class="token operator">:</span>
#
#  K     Keyspace events<span class="token punctuation">,</span> published with __keyspace@<span class="token operator">&lt;</span>db<span class="token operator">></span>__ prefix<span class="token punctuation">.</span>
#  E     Keyevent events<span class="token punctuation">,</span> published with __keyevent@<span class="token operator">&lt;</span>db<span class="token operator">></span>__ prefix<span class="token punctuation">.</span>
#  g     Generic <span class="token function">commands</span> <span class="token punctuation">(</span>non<span class="token operator">-</span>type specific<span class="token punctuation">)</span> like DEL<span class="token punctuation">,</span> EXPIRE<span class="token punctuation">,</span> RENAME<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
#  $     String commands
#  l     List commands
#  s     Set commands
#  h     Hash commands
#  z     Sorted set commands
#  x     Expired <span class="token function">events</span> <span class="token punctuation">(</span>events generated every time a key expires<span class="token punctuation">)</span>
#  e     Evicted <span class="token function">events</span> <span class="token punctuation">(</span>events generated when a key is evicted <span class="token keyword">for</span> maxmemory<span class="token punctuation">)</span>
#  t     Stream commands
#  m     Key<span class="token operator">-</span>miss <span class="token function">events</span> <span class="token punctuation">(</span>Note<span class="token operator">:</span> It is not included in the <span class="token string">'A'</span> <span class="token keyword">class</span><span class="token punctuation">)</span>
#  A     Alias <span class="token keyword">for</span> g$lshzxet<span class="token punctuation">,</span> so that the <span class="token string">"AKE"</span> string means all the events
#        <span class="token punctuation">(</span>Except key<span class="token operator">-</span>miss events which are excluded from <span class="token string">'A'</span> due to their
#         unique nature<span class="token punctuation">)</span><span class="token punctuation">.</span>
#
#  The <span class="token string">"notify-keyspace-events"</span> takes as argument a string that is composed
#  of zero or multiple characters<span class="token punctuation">.</span> The empty string means that notifications
#  are disabled<span class="token punctuation">.</span>
#
#  Example<span class="token operator">:</span> to enable list and generic events<span class="token punctuation">,</span> from the point of view of the
#           event name<span class="token punctuation">,</span> use<span class="token operator">:</span>
#
#  notify<span class="token operator">-</span>keyspace<span class="token operator">-</span>events Elg
#
#  Example <span class="token number">2</span><span class="token operator">:</span> to get the stream of the expired keys subscribing to channel
#             name __keyevent<span class="token annotation punctuation">@0__</span><span class="token operator">:</span>expired use<span class="token operator">:</span>
#
#  notify<span class="token operator">-</span>keyspace<span class="token operator">-</span>events Ex
#
#  By <span class="token keyword">default</span> all notifications are disabled because most users don't need
#  <span class="token keyword">this</span> feature and the feature has some overhead<span class="token punctuation">.</span> Note that <span class="token keyword">if</span> you don't
#  specify at least one of K or E<span class="token punctuation">,</span> no events will be delivered<span class="token punctuation">.</span>
# 键空间通知，配置该参数后客户端可以通过Redis的订阅与发布功能，来接收那些以某种方式改动了Redis数据集的事件。
notify<span class="token operator">-</span>keyspace<span class="token operator">-</span>events <span class="token string">""</span>

############################### GOPHER SERVER #################################

# Redis contains an implementation of the Gopher protocol<span class="token punctuation">,</span> as specified in
# the RFC <span class="token function">1436</span> <span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>ietf<span class="token punctuation">.</span>org<span class="token operator">/</span>rfc<span class="token operator">/</span>rfc1436<span class="token punctuation">.</span>txt<span class="token punctuation">)</span><span class="token punctuation">.</span>
#
# The Gopher protocol was very popular in the late '90s<span class="token punctuation">.</span> It is an alternative
# to the web<span class="token punctuation">,</span> and the implementation both server and client side is so simple
# that the Redis server has just <span class="token number">100</span> lines of code in order to implement <span class="token keyword">this</span>
# support<span class="token punctuation">.</span>
#
# What <span class="token keyword">do</span> you <span class="token keyword">do</span> with Gopher nowadays<span class="token operator">?</span> Well Gopher never <span class="token operator">*</span>really<span class="token operator">*</span> died<span class="token punctuation">,</span> and
# lately there is a movement in order <span class="token keyword">for</span> the Gopher more hierarchical content
# composed of just plain text documents to be resurrected<span class="token punctuation">.</span> Some want a simpler
# internet<span class="token punctuation">,</span> others believe that the mainstream internet became too much
# controlled<span class="token punctuation">,</span> and it's cool to create an alternative space <span class="token keyword">for</span> people that
# want a bit of fresh air<span class="token punctuation">.</span>
#
# Anyway <span class="token keyword">for</span> the 10nth birthday of the Redis<span class="token punctuation">,</span> we gave it the Gopher protocol
# as a gift<span class="token punctuation">.</span>
#
# <span class="token operator">--</span><span class="token operator">-</span> HOW IT WORKS<span class="token operator">?</span> <span class="token operator">--</span><span class="token operator">-</span>
#
# The Redis Gopher support uses the inline protocol of Redis<span class="token punctuation">,</span> and specifically
# two kind of inline requests that were anyway illegal<span class="token operator">:</span> an empty request
# or any request that starts with <span class="token string">"/"</span> <span class="token punctuation">(</span>there are no Redis commands starting
# with such a slash<span class="token punctuation">)</span><span class="token punctuation">.</span> Normal RESP2<span class="token operator">/</span>RESP3 requests are completely out of the
# path of the Gopher protocol implementation and are served as usually as well<span class="token punctuation">.</span>
#
# If you open a connection to Redis when Gopher is enabled and send it
# a string like <span class="token string">"/foo"</span><span class="token punctuation">,</span> <span class="token keyword">if</span> there is a key named <span class="token string">"/foo"</span> it is served via the
# Gopher protocol<span class="token punctuation">.</span>
#
# In order to create a real Gopher <span class="token string">"hole"</span> <span class="token punctuation">(</span>the name of a Gopher site in Gopher
# talking<span class="token punctuation">)</span><span class="token punctuation">,</span> you likely need a script like the following<span class="token operator">:</span>
#
#   https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>antirez<span class="token operator">/</span>gopher2redis
#
# <span class="token operator">--</span><span class="token operator">-</span> SECURITY WARNING <span class="token operator">--</span><span class="token operator">-</span>
#
# If you plan to put Redis on the internet in a publicly accessible address
# to server Gopher pages MAKE SURE TO SET A PASSWORD to the instance<span class="token punctuation">.</span>
# Once a password is set<span class="token operator">:</span>
#
#   <span class="token number">1</span><span class="token punctuation">.</span> The Gopher <span class="token function">server</span> <span class="token punctuation">(</span>when enabled<span class="token punctuation">,</span> not by <span class="token keyword">default</span><span class="token punctuation">)</span> will still serve
#      content via Gopher<span class="token punctuation">.</span>
#   <span class="token number">2</span><span class="token punctuation">.</span> However other commands cannot be called before the client will
#      authenticate<span class="token punctuation">.</span>
#
# So use the <span class="token string">'requirepass'</span> option to protect your instance<span class="token punctuation">.</span>
#
# To enable Gopher support uncomment the following line and set
# the option from <span class="token function">no</span> <span class="token punctuation">(</span>the <span class="token keyword">default</span><span class="token punctuation">)</span> to yes<span class="token punctuation">.</span>
#
# gopher<span class="token operator">-</span>enabled no

############################### ADVANCED CONFIG ###############################
# 高级配置
# Hashes are encoded using a memory efficient data structure when they have a
# small number of entries<span class="token punctuation">,</span> and the biggest entry does not exceed a given
# threshold<span class="token punctuation">.</span> These thresholds can be configured using the following directives<span class="token punctuation">.</span>
# 当有少量条目且最大条目不超过给定阈值时，使用内存有效数据结构对哈希进行编码。可以使用以下指令配置这些阈值。
hash<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>entries <span class="token number">512</span>
hash<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>value <span class="token number">64</span>

# Lists are also encoded in a special way to save a lot of space<span class="token punctuation">.</span>
# The number of entries allowed per internal list node can be specified
# as a fixed maximum size or a maximum number of elements<span class="token punctuation">.</span>
# For a fixed maximum size<span class="token punctuation">,</span> use <span class="token operator">-</span><span class="token number">5</span> through <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> meaning<span class="token operator">:</span>
# <span class="token operator">-</span><span class="token number">5</span><span class="token operator">:</span> max size<span class="token operator">:</span> <span class="token number">64</span> Kb  <span class="token operator">&lt;</span><span class="token operator">--</span> not recommended <span class="token keyword">for</span> normal workloads
# <span class="token operator">-</span><span class="token number">4</span><span class="token operator">:</span> max size<span class="token operator">:</span> <span class="token number">32</span> Kb  <span class="token operator">&lt;</span><span class="token operator">--</span> not recommended
# <span class="token operator">-</span><span class="token number">3</span><span class="token operator">:</span> max size<span class="token operator">:</span> <span class="token number">16</span> Kb  <span class="token operator">&lt;</span><span class="token operator">--</span> probably not recommended
# <span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span> max size<span class="token operator">:</span> <span class="token number">8</span> Kb   <span class="token operator">&lt;</span><span class="token operator">--</span> good
# <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> max size<span class="token operator">:</span> <span class="token number">4</span> Kb   <span class="token operator">&lt;</span><span class="token operator">--</span> good
# Positive numbers mean store up to _exactly_ that number of elements
# per list node<span class="token punctuation">.</span>
# The highest performing option is usually <span class="token operator">-</span><span class="token function">2</span> <span class="token punctuation">(</span><span class="token number">8</span> Kb size<span class="token punctuation">)</span> or <span class="token operator">-</span><span class="token function">1</span> <span class="token punctuation">(</span><span class="token number">4</span> Kb size<span class="token punctuation">)</span><span class="token punctuation">,</span>
# but <span class="token keyword">if</span> your use <span class="token keyword">case</span> is unique<span class="token punctuation">,</span> adjust the settings as necessary<span class="token punctuation">.</span>
list<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>size <span class="token operator">-</span><span class="token number">2</span>

# Lists may also be compressed<span class="token punctuation">.</span>
# Compress depth is the number of quicklist ziplist nodes from <span class="token operator">*</span>each<span class="token operator">*</span> side of
# the list to <span class="token operator">*</span>exclude<span class="token operator">*</span> from compression<span class="token punctuation">.</span>  The head and tail of the list
# are always uncompressed <span class="token keyword">for</span> fast push<span class="token operator">/</span>pop operations<span class="token punctuation">.</span>  Settings are<span class="token operator">:</span>
# <span class="token number">0</span><span class="token operator">:</span> disable all list compression
# <span class="token number">1</span><span class="token operator">:</span> depth <span class="token number">1</span> means "don't start compressing until after <span class="token number">1</span> node into the list<span class="token punctuation">,</span>
#    going from either the head or tail"
#    So<span class="token operator">:</span> <span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span>node<span class="token operator">-</span><span class="token operator">></span>node<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>-<span class="token operator">></span>node<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">[</span>tail<span class="token punctuation">]</span>
#    <span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>tail<span class="token punctuation">]</span> will always be uncompressed<span class="token punctuation">;</span> inner nodes will compress<span class="token punctuation">.</span>
# <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span>node<span class="token operator">-</span><span class="token operator">></span>node<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>-<span class="token operator">></span>node<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">[</span>prev<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">[</span>tail<span class="token punctuation">]</span>
#    <span class="token number">2</span> here means<span class="token operator">:</span> don't compress head or head<span class="token operator">-</span><span class="token operator">></span>next or tail<span class="token operator">-</span><span class="token operator">></span>prev or tail<span class="token punctuation">,</span>
#    but compress all nodes between them<span class="token punctuation">.</span>
# <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span>node<span class="token operator">-</span><span class="token operator">></span>node<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>-<span class="token operator">></span>node<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">[</span>prev<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">[</span>prev<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">[</span>tail<span class="token punctuation">]</span>
# etc<span class="token punctuation">.</span>
list<span class="token operator">-</span>compress<span class="token operator">-</span>depth <span class="token number">0</span>

# Sets have a special encoding in just one <span class="token keyword">case</span><span class="token operator">:</span> when a set is composed
# of just strings that happen to be integers in radix <span class="token number">10</span> in the range
# of <span class="token number">64</span> bit signed integers<span class="token punctuation">.</span>
# The following configuration setting sets the limit in the size of the
# set in order to use <span class="token keyword">this</span> special memory saving encoding<span class="token punctuation">.</span>
set<span class="token operator">-</span>max<span class="token operator">-</span>intset<span class="token operator">-</span>entries <span class="token number">512</span>

# Similarly to hashes and lists<span class="token punctuation">,</span> sorted sets are also specially encoded in
# order to save a lot of space<span class="token punctuation">.</span> This encoding is only used when the length and
# elements of a sorted set are below the following limits<span class="token operator">:</span>
zset<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>entries <span class="token number">128</span>
zset<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>value <span class="token number">64</span>

# HyperLogLog sparse representation bytes limit<span class="token punctuation">.</span> The limit includes the
# <span class="token number">16</span> bytes header<span class="token punctuation">.</span> When an HyperLogLog using the sparse representation crosses
# <span class="token keyword">this</span> limit<span class="token punctuation">,</span> it is converted into the dense representation<span class="token punctuation">.</span>
#
# A value greater than <span class="token number">16000</span> is totally useless<span class="token punctuation">,</span> since at that point the
# dense representation is more memory efficient<span class="token punctuation">.</span>
#
# The suggested value is <span class="token operator">~</span> <span class="token number">3000</span> in order to have the benefits of
# the space efficient encoding without slowing down too much PFADD<span class="token punctuation">,</span>
# which is <span class="token function">O</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span> with the sparse encoding<span class="token punctuation">.</span> The value can be raised to
# <span class="token operator">~</span> <span class="token number">10000</span> when CPU is not a concern<span class="token punctuation">,</span> but space is<span class="token punctuation">,</span> and the data set is
# composed of many HyperLogLogs with cardinality in the <span class="token number">0</span> <span class="token operator">-</span> <span class="token number">15000</span> range<span class="token punctuation">.</span>
hll<span class="token operator">-</span>sparse<span class="token operator">-</span>max<span class="token operator">-</span>bytes <span class="token number">3000</span>

# Streams macro node max size <span class="token operator">/</span> items<span class="token punctuation">.</span> The stream data structure is a radix
# tree of big nodes that encode multiple items inside<span class="token punctuation">.</span> Using <span class="token keyword">this</span> configuration
# it is possible to configure how big a single node can be in bytes<span class="token punctuation">,</span> and the
# maximum number of items it may contain before switching to a <span class="token keyword">new</span> <span class="token class-name">node</span> when
# appending <span class="token keyword">new</span> <span class="token class-name">stream</span> entries<span class="token punctuation">.</span> If any of the following settings are set to
# zero<span class="token punctuation">,</span> the limit is ignored<span class="token punctuation">,</span> so <span class="token keyword">for</span> instance it is possible to set just a
# max entires limit by setting max<span class="token operator">-</span>bytes to <span class="token number">0</span> and max<span class="token operator">-</span>entries to the desired
# value<span class="token punctuation">.</span>
stream<span class="token operator">-</span>node<span class="token operator">-</span>max<span class="token operator">-</span>bytes <span class="token number">4096</span>
stream<span class="token operator">-</span>node<span class="token operator">-</span>max<span class="token operator">-</span>entries <span class="token number">100</span>

# Active rehashing uses <span class="token number">1</span> millisecond every <span class="token number">100</span> milliseconds of CPU time in
# order to help rehashing the main Redis hash <span class="token function">table</span> <span class="token punctuation">(</span>the one mapping top<span class="token operator">-</span>level
# keys to values<span class="token punctuation">)</span><span class="token punctuation">.</span> The hash table implementation Redis <span class="token function">uses</span> <span class="token punctuation">(</span>see dict<span class="token punctuation">.</span>c<span class="token punctuation">)</span>
# performs a lazy rehashing<span class="token operator">:</span> the more operation you run into a hash table
# that is rehashing<span class="token punctuation">,</span> the more rehashing <span class="token string">"steps"</span> are performed<span class="token punctuation">,</span> so <span class="token keyword">if</span> the
# server is idle the rehashing is never complete and some more memory is used
# by the hash table<span class="token punctuation">.</span>
#
# The <span class="token keyword">default</span> is to use <span class="token keyword">this</span> millisecond <span class="token number">10</span> times every second in order to
# actively rehash the main dictionaries<span class="token punctuation">,</span> freeing memory when possible<span class="token punctuation">.</span>
#
# If unsure<span class="token operator">:</span>
# use <span class="token string">"activerehashing no"</span> <span class="token keyword">if</span> you have hard latency requirements and it is
# not a good thing in your environment that Redis can reply from time to time
# to queries with <span class="token number">2</span> milliseconds delay<span class="token punctuation">.</span>
# 当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有<span class="token number">2</span>毫秒的延迟的话，把这项配置为no

# use <span class="token string">"activerehashing yes"</span> <span class="token keyword">if</span> you don't have such hard requirements but
# want to free memory asap when possible<span class="token punctuation">.</span>
# 如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存
activerehashing yes

# The client output buffer limits can be used to force disconnection of clients
# that are not reading data from the server fast enough <span class="token keyword">for</span> some <span class="token function">reason</span> <span class="token punctuation">(</span>a
# common reason is that a Pub<span class="token operator">/</span>Sub client can't consume messages as fast as the
# publisher can produce them<span class="token punctuation">)</span><span class="token punctuation">.</span>
#
# The limit can be set differently <span class="token keyword">for</span> the three different classes of clients<span class="token operator">:</span>
#
# normal <span class="token operator">-</span><span class="token operator">></span> normal clients including MONITOR clients
# replica  <span class="token operator">-</span><span class="token operator">></span> replica clients
# pubsub <span class="token operator">-</span><span class="token operator">></span> clients subscribed to at least one pubsub channel or pattern
#
# The syntax of every client<span class="token operator">-</span>output<span class="token operator">-</span>buffer<span class="token operator">-</span>limit directive is the following<span class="token operator">:</span>
#
# client<span class="token operator">-</span>output<span class="token operator">-</span>buffer<span class="token operator">-</span>limit <span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token operator">></span> <span class="token operator">&lt;</span>hard limit<span class="token operator">></span> <span class="token operator">&lt;</span>soft limit<span class="token operator">></span> <span class="token operator">&lt;</span>soft seconds<span class="token operator">></span>
#
# A client is immediately disconnected once the hard limit is reached<span class="token punctuation">,</span> or <span class="token keyword">if</span>
# the soft limit is reached and remains reached <span class="token keyword">for</span> the specified number of
# <span class="token function">seconds</span> <span class="token punctuation">(</span>continuously<span class="token punctuation">)</span><span class="token punctuation">.</span>
# So <span class="token keyword">for</span> instance <span class="token keyword">if</span> the hard limit is <span class="token number">32</span> megabytes and the soft limit is
# <span class="token number">16</span> megabytes <span class="token operator">/</span> <span class="token number">10</span> seconds<span class="token punctuation">,</span> the client will get disconnected immediately
# <span class="token keyword">if</span> the size of the output buffers reach <span class="token number">32</span> megabytes<span class="token punctuation">,</span> but will also get
# disconnected <span class="token keyword">if</span> the client reaches <span class="token number">16</span> megabytes and continuously overcomes
# the limit <span class="token keyword">for</span> <span class="token number">10</span> seconds<span class="token punctuation">.</span>
#
# By <span class="token keyword">default</span> normal clients are not limited because they don't receive data
# without <span class="token function">asking</span> <span class="token punctuation">(</span>in a push way<span class="token punctuation">)</span><span class="token punctuation">,</span> but just after a request<span class="token punctuation">,</span> so only
# asynchronous clients may create a scenario where data is requested faster
# than it can read<span class="token punctuation">.</span>
#
# Instead there is a <span class="token keyword">default</span> limit <span class="token keyword">for</span> pubsub and replica clients<span class="token punctuation">,</span> since
# subscribers and replicas receive data in a push fashion<span class="token punctuation">.</span>
#
# Both the hard or the soft limit can be disabled by setting them to zero<span class="token punctuation">.</span>
client<span class="token operator">-</span>output<span class="token operator">-</span>buffer<span class="token operator">-</span>limit normal <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>
client<span class="token operator">-</span>output<span class="token operator">-</span>buffer<span class="token operator">-</span>limit replica 256mb 64mb <span class="token number">60</span>
client<span class="token operator">-</span>output<span class="token operator">-</span>buffer<span class="token operator">-</span>limit pubsub 32mb 8mb <span class="token number">60</span>

# Client query buffers accumulate <span class="token keyword">new</span> <span class="token class-name">commands<span class="token punctuation">.</span></span> They are limited to a fixed
# amount by <span class="token keyword">default</span> in order to avoid that a protocol <span class="token function">desynchronization</span> <span class="token punctuation">(</span><span class="token keyword">for</span>
# instance due to a bug in the client<span class="token punctuation">)</span> will lead to unbound memory usage in
# the query buffer<span class="token punctuation">.</span> However you can configure it here <span class="token keyword">if</span> you have very special
# needs<span class="token punctuation">,</span> such us huge multi<span class="token operator">/</span>exec requests or alike<span class="token punctuation">.</span>
#
# client<span class="token operator">-</span>query<span class="token operator">-</span>buffer<span class="token operator">-</span>limit 1gb

# In the Redis protocol<span class="token punctuation">,</span> bulk requests<span class="token punctuation">,</span> that are<span class="token punctuation">,</span> elements representing single
# strings<span class="token punctuation">,</span> are normally limited ot <span class="token number">512</span> mb<span class="token punctuation">.</span> However you can change <span class="token keyword">this</span> limit
# here<span class="token punctuation">.</span>
#
# proto<span class="token operator">-</span>max<span class="token operator">-</span>bulk<span class="token operator">-</span>len 512mb

# Redis calls an internal function to perform many background tasks<span class="token punctuation">,</span> like
# closing connections of clients in timeout<span class="token punctuation">,</span> purging expired keys that are
# never requested<span class="token punctuation">,</span> and so forth<span class="token punctuation">.</span>
#
# Not all tasks are performed with the same frequency<span class="token punctuation">,</span> but Redis checks <span class="token keyword">for</span>
# tasks to perform according to the specified <span class="token string">"hz"</span> value<span class="token punctuation">.</span>
#
# By <span class="token keyword">default</span> <span class="token string">"hz"</span> is set to <span class="token number">10</span><span class="token punctuation">.</span> Raising the value will use more CPU when
# Redis is idle<span class="token punctuation">,</span> but at the same time will make Redis more responsive when
# there are many keys expiring at the same time<span class="token punctuation">,</span> and timeouts may be
# handled with more precision<span class="token punctuation">.</span>
#
# The range is between <span class="token number">1</span> and <span class="token number">500</span><span class="token punctuation">,</span> however a value over <span class="token number">100</span> is usually not
# a good idea<span class="token punctuation">.</span> Most users should use the <span class="token keyword">default</span> of <span class="token number">10</span> and raise <span class="token keyword">this</span> up to
# <span class="token number">100</span> only in environments where very low latency is required<span class="token punctuation">.</span>
hz <span class="token number">10</span>

# Normally it is useful to have an HZ value which is proportional to the
# number of clients connected<span class="token punctuation">.</span> This is useful in order<span class="token punctuation">,</span> <span class="token keyword">for</span> instance<span class="token punctuation">,</span> to
# avoid too many clients are processed <span class="token keyword">for</span> each background task invocation
# in order to avoid latency spikes<span class="token punctuation">.</span>
#
# Since the <span class="token keyword">default</span> HZ value by <span class="token keyword">default</span> is conservatively set to <span class="token number">10</span><span class="token punctuation">,</span> Redis
# offers<span class="token punctuation">,</span> and enables by <span class="token keyword">default</span><span class="token punctuation">,</span> the ability to use an adaptive HZ value
# which will temporary raise when there are many connected clients<span class="token punctuation">.</span>
#
# When dynamic HZ is enabled<span class="token punctuation">,</span> the actual configured HZ will be used
# as a baseline<span class="token punctuation">,</span> but multiples of the configured HZ value will be actually
# used as needed once more clients are connected<span class="token punctuation">.</span> In <span class="token keyword">this</span> way an idle
# instance will use very little CPU time <span class="token keyword">while</span> a busy instance will be
# more responsive<span class="token punctuation">.</span>
dynamic<span class="token operator">-</span>hz yes

# When a child rewrites the AOF file<span class="token punctuation">,</span> <span class="token keyword">if</span> the following option is enabled
# the file will be fsync<span class="token operator">-</span>ed every <span class="token number">32</span> MB of data generated<span class="token punctuation">.</span> This is useful
# in order to commit the file to the disk more incrementally and avoid
# big latency spikes<span class="token punctuation">.</span>
aof<span class="token operator">-</span>rewrite<span class="token operator">-</span>incremental<span class="token operator">-</span>fsync yes

# When redis saves RDB file<span class="token punctuation">,</span> <span class="token keyword">if</span> the following option is enabled
# the file will be fsync<span class="token operator">-</span>ed every <span class="token number">32</span> MB of data generated<span class="token punctuation">.</span> This is useful
# in order to commit the file to the disk more incrementally and avoid
# big latency spikes<span class="token punctuation">.</span>
rdb<span class="token operator">-</span>save<span class="token operator">-</span>incremental<span class="token operator">-</span>fsync yes

# Redis LFU <span class="token function">eviction</span> <span class="token punctuation">(</span>see maxmemory setting<span class="token punctuation">)</span> can be tuned<span class="token punctuation">.</span> However it is a good
# idea to start with the <span class="token keyword">default</span> settings and only change them after investigating
# how to improve the performances and how the keys LFU change over time<span class="token punctuation">,</span> which
# is possible to inspect via the OBJECT FREQ command<span class="token punctuation">.</span>
#
# There are two tunable parameters in the Redis LFU implementation<span class="token operator">:</span> the
# counter logarithm factor and the counter decay time<span class="token punctuation">.</span> It is important to
# understand what the two parameters mean before changing them<span class="token punctuation">.</span>
#
# The LFU counter is just <span class="token number">8</span> bits per key<span class="token punctuation">,</span> it's maximum value is <span class="token number">255</span><span class="token punctuation">,</span> so Redis
# uses a probabilistic increment with logarithmic behavior<span class="token punctuation">.</span> Given the value
# of the old counter<span class="token punctuation">,</span> when a key is accessed<span class="token punctuation">,</span> the counter is incremented in
# <span class="token keyword">this</span> way<span class="token operator">:</span>
#
# <span class="token number">1</span><span class="token punctuation">.</span> A random number R between <span class="token number">0</span> and <span class="token number">1</span> is extracted<span class="token punctuation">.</span>
# <span class="token number">2</span><span class="token punctuation">.</span> A probability P is calculated as <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span>old_value<span class="token operator">*</span>lfu_log_factor<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
# <span class="token number">3</span><span class="token punctuation">.</span> The counter is incremented only <span class="token keyword">if</span> R <span class="token operator">&lt;</span> P<span class="token punctuation">.</span>
#
# The <span class="token keyword">default</span> lfu<span class="token operator">-</span>log<span class="token operator">-</span>factor is <span class="token number">10</span><span class="token punctuation">.</span> This is a table of how the frequency
# counter changes with a different number of accesses with different
# logarithmic factors<span class="token operator">:</span>
#
# <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
# <span class="token operator">|</span> factor <span class="token operator">|</span> <span class="token number">100</span> hits   <span class="token operator">|</span> <span class="token number">1000</span> hits  <span class="token operator">|</span> 100K hits  <span class="token operator">|</span> 1M hits    <span class="token operator">|</span> 10M hits   <span class="token operator">|</span>
# <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
# <span class="token operator">|</span> <span class="token number">0</span>      <span class="token operator">|</span> <span class="token number">104</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span>
# <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
# <span class="token operator">|</span> <span class="token number">1</span>      <span class="token operator">|</span> <span class="token number">18</span>         <span class="token operator">|</span> <span class="token number">49</span>         <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span>
# <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
# <span class="token operator">|</span> <span class="token number">10</span>     <span class="token operator">|</span> <span class="token number">10</span>         <span class="token operator">|</span> <span class="token number">18</span>         <span class="token operator">|</span> <span class="token number">142</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span>
# <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
# <span class="token operator">|</span> <span class="token number">100</span>    <span class="token operator">|</span> <span class="token number">8</span>          <span class="token operator">|</span> <span class="token number">11</span>         <span class="token operator">|</span> <span class="token number">49</span>         <span class="token operator">|</span> <span class="token number">143</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span>
# <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
#
# NOTE<span class="token operator">:</span> The above table was obtained by running the following commands<span class="token operator">:</span>
#
#   redis<span class="token operator">-</span>benchmark <span class="token operator">-</span>n <span class="token number">1000000</span> incr foo
#   redis<span class="token operator">-</span>cli object freq foo
#
# NOTE <span class="token number">2</span><span class="token operator">:</span> The counter initial value is <span class="token number">5</span> in order to give <span class="token keyword">new</span> <span class="token class-name">objects</span> a chance
# to accumulate hits<span class="token punctuation">.</span>
#
# The counter decay time is the time<span class="token punctuation">,</span> in minutes<span class="token punctuation">,</span> that must elapse in order
# <span class="token keyword">for</span> the key counter to be divided by <span class="token function">two</span> <span class="token punctuation">(</span>or decremented <span class="token keyword">if</span> it has a value
# less <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
# 计数器衰减时间是键计数器除以<span class="token function">2</span><span class="token punctuation">(</span>如果值小于<span class="token operator">&lt;=</span> <span class="token number">10</span>，则衰减<span class="token punctuation">)</span>所必须经过的时间<span class="token punctuation">(</span>以分钟为单位<span class="token punctuation">)</span>。
# The <span class="token keyword">default</span> value <span class="token keyword">for</span> the lfu<span class="token operator">-</span>decay<span class="token operator">-</span>time is <span class="token number">1</span><span class="token punctuation">.</span> A Special value of <span class="token number">0</span> means to
# decay the counter every time it happens to be scanned<span class="token punctuation">.</span>
# lfu<span class="token operator">-</span>decay<span class="token operator">-</span>time的默认值是<span class="token number">1</span>。一个特殊的值<span class="token number">0</span>表示在每次扫描计数器时对其进行衰减。
# lfu<span class="token operator">-</span>log<span class="token operator">-</span>factor <span class="token number">10</span>
# lfu<span class="token operator">-</span>decay<span class="token operator">-</span>time <span class="token number">1</span>

########################### ACTIVE DEFRAGMENTATION #######################
#
# What is active defragmentation<span class="token operator">?</span>
# <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
#
# <span class="token function">Active</span> <span class="token punctuation">(</span>online<span class="token punctuation">)</span> defragmentation allows a Redis server to compact the
# spaces left between small allocations and deallocations of data in memory<span class="token punctuation">,</span>
# thus allowing to reclaim back memory<span class="token punctuation">.</span>
#
# Fragmentation is a natural process that happens with every <span class="token function">allocator</span> <span class="token punctuation">(</span>but
# less so with Jemalloc<span class="token punctuation">,</span> fortunately<span class="token punctuation">)</span> and certain workloads<span class="token punctuation">.</span> Normally a server
# restart is needed in order to lower the fragmentation<span class="token punctuation">,</span> or at least to flush
# away all the data and create it again<span class="token punctuation">.</span> However thanks to <span class="token keyword">this</span> feature
# implemented by Oran Agra <span class="token keyword">for</span> Redis <span class="token number">4.0</span> <span class="token keyword">this</span> process can happen at runtime
# in an <span class="token string">"hot"</span> way<span class="token punctuation">,</span> <span class="token keyword">while</span> the server is running<span class="token punctuation">.</span>
#
# Basically when the fragmentation is over a certain <span class="token function">level</span> <span class="token punctuation">(</span>see the
# configuration options below<span class="token punctuation">)</span> Redis will start to create <span class="token keyword">new</span> <span class="token class-name">copies</span> of the
# values in contiguous memory regions by exploiting certain specific Jemalloc
# <span class="token function">features</span> <span class="token punctuation">(</span>in order to understand <span class="token keyword">if</span> an allocation is causing fragmentation
# and to allocate it in a better place<span class="token punctuation">)</span><span class="token punctuation">,</span> and at the same time<span class="token punctuation">,</span> will release the
# old copies of the data<span class="token punctuation">.</span> This process<span class="token punctuation">,</span> repeated incrementally <span class="token keyword">for</span> all the keys
# will cause the fragmentation to drop back to normal values<span class="token punctuation">.</span>
#
# Important things to understand<span class="token operator">:</span>
#
# <span class="token number">1</span><span class="token punctuation">.</span> This feature is disabled by <span class="token keyword">default</span><span class="token punctuation">,</span> and only works <span class="token keyword">if</span> you compiled Redis
#    to use the copy of Jemalloc we ship with the source code of Redis<span class="token punctuation">.</span>
#    This is the <span class="token keyword">default</span> with Linux builds<span class="token punctuation">.</span>
#
# <span class="token number">2</span><span class="token punctuation">.</span> You never need to enable <span class="token keyword">this</span> feature <span class="token keyword">if</span> you don't have fragmentation
#    issues<span class="token punctuation">.</span>
#
# <span class="token number">3</span><span class="token punctuation">.</span> Once you experience fragmentation<span class="token punctuation">,</span> you can enable <span class="token keyword">this</span> feature when
#    needed with the command <span class="token string">"CONFIG SET activedefrag yes"</span><span class="token punctuation">.</span>
#
# The configuration parameters are able to fine tune the behavior of the
# defragmentation process<span class="token punctuation">.</span> If you are not sure about what they mean it is
# a good idea to leave the defaults untouched<span class="token punctuation">.</span>

# Enabled active defragmentation
# activedefrag no

# Minimum amount of fragmentation waste to start active defrag
# active<span class="token operator">-</span>defrag<span class="token operator">-</span>ignore<span class="token operator">-</span>bytes 100mb

# Minimum percentage of fragmentation to start active defrag
# active<span class="token operator">-</span>defrag<span class="token operator">-</span>threshold<span class="token operator">-</span>lower <span class="token number">10</span>

# Maximum percentage of fragmentation at which we use maximum effort
# active<span class="token operator">-</span>defrag<span class="token operator">-</span>threshold<span class="token operator">-</span>upper <span class="token number">100</span>

# Minimal effort <span class="token keyword">for</span> defrag in CPU percentage<span class="token punctuation">,</span> to be used when the lower
# threshold is reached
# active<span class="token operator">-</span>defrag<span class="token operator">-</span>cycle<span class="token operator">-</span>min <span class="token number">1</span>

# Maximal effort <span class="token keyword">for</span> defrag in CPU percentage<span class="token punctuation">,</span> to be used when the upper
# threshold is reached
# active<span class="token operator">-</span>defrag<span class="token operator">-</span>cycle<span class="token operator">-</span>max <span class="token number">25</span>

# Maximum number of set<span class="token operator">/</span>hash<span class="token operator">/</span>zset<span class="token operator">/</span>list fields that will be processed from
# the main dictionary scan
# active<span class="token operator">-</span>defrag<span class="token operator">-</span>max<span class="token operator">-</span>scan<span class="token operator">-</span>fields <span class="token number">1000</span>

# Jemalloc background thread <span class="token keyword">for</span> purging will be enabled by <span class="token keyword">default</span>
jemalloc<span class="token operator">-</span>bg<span class="token operator">-</span>thread yes

# It is possible to pin different threads and processes of Redis to specific
# CPUs in your system<span class="token punctuation">,</span> in order to maximize the performances of the server<span class="token punctuation">.</span>
# This is useful both in order to pin different Redis threads in different
# CPUs<span class="token punctuation">,</span> but also in order to make sure that multiple Redis instances running
# in the same host will be pinned to different CPUs<span class="token punctuation">.</span>
#
# Normally you can <span class="token keyword">do</span> <span class="token keyword">this</span> using the <span class="token string">"taskset"</span> command<span class="token punctuation">,</span> however it is also
# possible to <span class="token keyword">this</span> via Redis configuration directly<span class="token punctuation">,</span> both in Linux and FreeBSD<span class="token punctuation">.</span>
#
# You can pin the server<span class="token operator">/</span>IO threads<span class="token punctuation">,</span> bio threads<span class="token punctuation">,</span> aof rewrite child process<span class="token punctuation">,</span> and
# the bgsave child process<span class="token punctuation">.</span> The syntax to specify the cpu list is the same as
# the taskset command<span class="token operator">:</span>
#
# Set redis server<span class="token operator">/</span>io threads to cpu affinity <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token operator">:</span>
# server_cpulist <span class="token number">0</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">:</span><span class="token number">2</span>
#
# Set bio threads to cpu affinity <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">:</span>
# bio_cpulist <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span>
#
# Set aof rewrite child process to cpu affinity <span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token operator">:</span>
# aof_rewrite_cpulist <span class="token number">8</span><span class="token operator">-</span><span class="token number">11</span>
#
# Set bgsave child process to cpu affinity <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span>
# bgsave_cpulist <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">11</span>
</code></pre>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>新特性</tag>
      </tags>
  </entry>
  <entry>
    <title>Yapi的安装与使用</title>
    <url>/2020/20200518/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>YApi 是高效、易用、功能强大的 api 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。可以帮助开发者轻松创建、发布、维护 API，YApi 还为用户提供了优秀的交互体验，开发人员只需利用平台提供的接口数据写入工具以及简单的点击操作就可以实现接口的管理。</p>
</blockquote>
<p>简单来说，就是提供写接口文档的地方，后端人员写接口文档，前端人员直接在上面进行接口查看与开发。<br><a href="https://hellosean1025.github.io/yapi/index.html" target="_blank" rel="noopener">官网链接</a></p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p><code>linux</code>下安装<code>Yapi</code>需要先安装它的依赖环境</p>
<h3 id="安装nodejs（7-6"><a href="#安装nodejs（7-6" class="headerlink" title="安装nodejs（7.6+)"></a>安装nodejs（7.6+)</h3><p> <strong>下载<code>nodejs</code>安装包</strong><br><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p>
<p>然后通过<code>ftp</code>上传到<code>linux</code>上。</p>
<p>或者直接在<code>linux</code>下载</p>
<pre class=" language-java"><code class="language-java">#  wget https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>nodejs<span class="token punctuation">.</span>org<span class="token operator">/</span>dist<span class="token operator">/</span>v12<span class="token number">.16</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">/</span>node<span class="token operator">-</span>v12<span class="token number">.16</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">-</span>linux<span class="token operator">-</span>x64<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>xz</code></pre>
<p> <strong>解压</strong></p>
<pre class=" language-java"><code class="language-java"># tar xf node<span class="token operator">-</span>v12<span class="token number">.16</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">-</span>linux<span class="token operator">-</span>x64<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>xz</code></pre>
<p>解压文件的 bin 目录底下包含了 node、npm 等命令，我们可以使用 ln 命令来设置软连接：</p>
<pre class=" language-java"><code class="language-java"># ln <span class="token operator">-</span>s <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>node<span class="token operator">-</span>v12<span class="token number">.16</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">-</span>linux<span class="token operator">-</span>x64<span class="token operator">/</span>bin<span class="token operator">/</span>npm <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin
# ln <span class="token operator">-</span>s <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>node<span class="token operator">-</span>v12<span class="token number">.16</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">-</span>linux<span class="token operator">-</span>x64<span class="token operator">/</span>bin<span class="token operator">/</span>node <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin</code></pre>
<p><strong>检查</strong></p>
<p>检查是否安装正确</p>
<pre class=" language-java"><code class="language-java"># node <span class="token operator">-</span>v</code></pre>
<pre class=" language-java"><code class="language-java"># npm <span class="token operator">-</span>v</code></pre>
<h3 id="安装mongodb（2-6-）"><a href="#安装mongodb（2-6-）" class="headerlink" title="安装mongodb（2.6+）"></a>安装mongodb（2.6+）</h3><p><strong>下载<code>mongodb</code>安装包</strong><br><a href="https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.18.tgz" target="_blank" rel="noopener">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.18.tgz</a></p>
<p>也可以去官网下载其他版本<br><a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/community</a><br>然后通过<code>ftp</code>上传到<code>linux</code>上。<br><strong>解压</strong></p>
<pre class=" language-java"><code class="language-java"># tar <span class="token operator">-</span>zxvf mongodb<span class="token operator">-</span>linux<span class="token operator">-</span>x86_64<span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">.</span><span class="token number">18</span><span class="token punctuation">.</span>tgz </code></pre>
<p><strong>拷贝到指定目录</strong></p>
<pre class=" language-java"><code class="language-java"># mv mongodb<span class="token operator">-</span>linux<span class="token operator">-</span>x86_64<span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">.</span><span class="token number">18</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>mongodb</code></pre>
<p><strong>配置环境变量</strong></p>
<pre class=" language-java"><code class="language-java"># vi <span class="token operator">/</span>etc<span class="token operator">/</span>profile</code></pre>
<p>在最下面添加</p>
<pre class=" language-java"><code class="language-java">export PATH<span class="token operator">=</span>$PATH<span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>mongodb<span class="token operator">/</span>bin</code></pre>
<p><strong>创建文件夹</strong><br>一个存放数据，一个存放日志</p>
<pre class=" language-java"><code class="language-java"># mkdir <span class="token operator">-</span>p <span class="token operator">/</span>data<span class="token operator">/</span>db
# mkdir <span class="token operator">-</span>p <span class="token operator">/</span>logs</code></pre>
<p><strong>创建<code>mongodb</code>配置文件</strong><br>进入bin目录</p>
<pre class=" language-java"><code class="language-java"># cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>mongodb<span class="token operator">/</span>bin</code></pre>
<p>创建<code>mongodb.conf</code>配置文件</p>
<pre class=" language-java"><code class="language-java"># vi mongodb<span class="token punctuation">.</span>conf</code></pre>
<p>直接拷贝写进去</p>
<pre class=" language-powershell"><code class="language-powershell">dbpath = <span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>db <span class="token comment" spellcheck="true"># 数据文件存放目录</span>
logpath = <span class="token operator">/</span>logs<span class="token operator">/</span>mongodb<span class="token punctuation">.</span>log <span class="token comment" spellcheck="true"># 日志文件存放目录</span>
port = 27017 <span class="token comment" spellcheck="true"># 端口</span>
fork = true <span class="token comment" spellcheck="true"># 以守护程序的方式启用，即在后台运行</span>
noauth = true <span class="token comment" spellcheck="true"># 不进行安全验证</span>
<span class="token comment" spellcheck="true"># auth=true # 需要认证。如果放开注释，就必须创建MongoDB的账号，使用账号与密码才可远程</span>
访问，第一次安装建议注释
bind_ip=0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0 <span class="token comment" spellcheck="true"># 允许远程访问，或者直接注释，127.0.0.1是只允许本地访问</span></code></pre>
<p><strong>启动mongodb</strong></p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># ./mongod -f mongodb.conf</span></code></pre>
<p><strong>检查是否启动成功</strong></p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># netstat -nltp|grep mongod</span></code></pre>
<p>或者</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># ps -ef | grep mongod</span></code></pre>
<h2 id="安装yapi-cli"><a href="#安装yapi-cli" class="headerlink" title="安装yapi-cli"></a>安装yapi-cli</h2><p>直接在线安装</p>
<pre class=" language-powershell"><code class="language-powershell">npm install <span class="token operator">-</span>g yapi<span class="token operator">-</span><span class="token function">cli</span> <span class="token operator">--</span>registry https:<span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org</code></pre>
<p>配置<code>yapi</code></p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># ln -s /usr/local/node-v12.16.3-linux-x64/bin/yapi /usr/bin/yapi</span></code></pre>
<p>启动</p>
<pre class=" language-powershell"><code class="language-powershell">yapi server</code></pre>
<p>如果访问没效果，请打开<code>9090</code>端口，重启防火墙<br>永久打开端口</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># firewall-cmd --zone=public --add-port=9090/tcp --permanent</span></code></pre>
<p>重启防火墙</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># firewall-cmd --reload</span></code></pre>
<p>然后再次启动<code>yapi server</code></p>
<p><img src="https://img-blog.csdnimg.cn/20200518160859328.png" alt=""><br>写上公司名称，其余一般默认，直接部署即可。</p>
<p>部署成功，请切换到部署目录，输入： “<code>node vendors/server/app.js</code>“ 指令启动服务器, 然后在浏览器打开 <code>http://127.0.0.1:3000</code> 访问</p>
<p>切换目录</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># cd /usr/local/mongodb/bin/my-yapi/</span></code></pre>
<p>启动服务器</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># node vendors/server/app.js </span></code></pre>
<p>或者 以守护进程启动</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># node vendors/server/app.js &amp;</span></code></pre>
<p>打开<code>http://127.0.0.1:3000</code> 访问<br>记得开3000端口，重启防火墙！！！<br><img src="https://img-blog.csdnimg.cn/20200518161619569.png" alt=""><br>very good！！！</p>
<h2 id="使用yapi"><a href="#使用yapi" class="headerlink" title="使用yapi"></a>使用yapi</h2><p>使用默认账号登录<br>账号：<code>admin@admin.com</code><br>密码：<code>ymfe.org</code></p>
<p>只有超级管理员可以管理分组</p>
<p><strong>创建分组</strong><br><img src="https://img-blog.csdnimg.cn/20200518164158266.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20200518164102488.png" alt=""></p>
<p>创建新项目<br><img src="https://img-blog.csdnimg.cn/20200518164340890.png" alt=""></p>
<p>部分接口预览<br><img src="https://img-blog.csdnimg.cn/20200518164559897.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20200518164618719.png" alt=""><br>其中还有<code>Mock</code>地址等，前端直接访问。爽歪歪的，后端不管功能有没有做好，只要把接口定义好了，前端可以直接对比着开发。多爽，再也不用和前端说话了。/滑稽</p>
<h2 id="新成员加入"><a href="#新成员加入" class="headerlink" title="新成员加入"></a>新成员加入</h2><p>当技术老大，也就是<code>admin</code>把项目弄好， 所有开发都可以页面注册账号，然后查看接口和维护接口了。</p>
<p>所有成员注册账号<br><img src="https://img-blog.csdnimg.cn/20200518162825197.png" alt=""><br>然后管理员把他们都拉近项目组<br><img src="https://img-blog.csdnimg.cn/20200518164958389.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20200518165030112.png" alt=""><br>此时所有成员都可以看到接口啦。<br>登录成员账号查看<br><img src="https://img-blog.csdnimg.cn/20200518165312595.png" alt=""></p>
<h2 id="安装浏览器插件"><a href="#安装浏览器插件" class="headerlink" title="安装浏览器插件"></a>安装浏览器插件</h2><p>其实写完接口的同时，可以直接进行浏览器访问本地服务，进行测试，就好比<code>postman</code>接口自测一样。<br><img src="https://img-blog.csdnimg.cn/20200518165730684.png" alt=""><br>这个可以直接点击截图里面的教程，安装浏览器插件<br><img src="https://img-blog.csdnimg.cn/20200518165816205.png" alt=""><br>此时本地启动我的项目（这个是前几篇写微服务写的，拿来用用）</p>
<p><img src="https://img-blog.csdnimg.cn/20200518170117666.png" alt=""></p>
<p>测试一个 <code>get</code>请求<code>user/test</code></p>
<p><img src="https://img-blog.csdnimg.cn/20200518170725536.png" alt=""><br>直接省去了postman。哈哈</p>
<h2 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h2><p>如果项目开发完，是备份也好，是给别人看也好，还是第三方使用也好，直接导出！<br><img src="https://img-blog.csdnimg.cn/20200518171125966.png" alt=""><br>导出效果查看<br><img src="https://img-blog.csdnimg.cn/20200518171227243.png" alt=""></p>
<p>其实还有好多的功能，没有完全写到。慢慢体会吧。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Yapi</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot Admin 监控</title>
    <url>/2020/20200509/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>Spring Boot Admin 用于监控基于 Spring Boot 的应用，它是在 Spring Boot Actuator 的基础上提供简洁的可视化 WEB UI。Spring Boot Admin 提供了很多功能，如显示 name、id 和 version，显示在线状态，Loggers 的日志级别管理，Threads 线程管理，Environment 管理等。</p>
</blockquote>
<p>具体有什么好处，有什么作用，官网说的很清楚。<a href="https://github.com/codecentric/spring-boot-admin" target="_blank" rel="noopener">github地址</a></p>
<h2 id="spring-boot-amdin-的服务端"><a href="#spring-boot-amdin-的服务端" class="headerlink" title="spring boot amdin 的服务端"></a>spring boot amdin 的服务端</h2><p>新增项目<code>gmaya-springbootadmin</code>。作为<code>spring boot amdin</code> 的服务端</p>
<h3 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h3><p>新增pom文件</p>
<pre class=" language-yaml"><code class="language-yaml">        &lt;dependency<span class="token punctuation">></span>
            &lt;groupId<span class="token punctuation">></span>de.codecentric&lt;/groupId<span class="token punctuation">></span>
            &lt;artifactId<span class="token punctuation">></span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>admin<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>server&lt;/artifactId<span class="token punctuation">></span>
            &lt;version<span class="token punctuation">></span>2.2.2&lt;/version<span class="token punctuation">></span>
        &lt;/dependency<span class="token punctuation">></span>
        &lt;dependency<span class="token punctuation">></span>
            &lt;groupId<span class="token punctuation">></span>org.springframework.cloud&lt;/groupId<span class="token punctuation">></span>
            &lt;artifactId<span class="token punctuation">></span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>netflix<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>client&lt;/artifactId<span class="token punctuation">></span>
        &lt;/dependency<span class="token punctuation">></span></code></pre>
<h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><pre class=" language-yaml"><code class="language-yaml">@SpringBootApplication
@EnableDiscoveryClient
@EnableAdminServer</code></pre>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>修改<code>application.yml</code></p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9100</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> gmaya<span class="token punctuation">-</span>springbootadmin
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8000/eureka/
    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 开启健康检查</span>

<span class="token comment" spellcheck="true"># 监控</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 通过HTTP公开所有的端点， 默认是info,health</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span>
  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>
    <span class="token key atrule">health</span><span class="token punctuation">:</span>
      <span class="token comment" spellcheck="true"># 显示完整信息，#默认是never（简要信息）</span>
      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always
</code></pre>
<p>因为是使用的<code>Eureka</code>注册中心，所以不需要单独客户端了， 直接在想要监控的客户端直接暴露端点即可。</p>
<h2 id="客户端修改"><a href="#客户端修改" class="headerlink" title="客户端修改"></a>客户端修改</h2><p>比如此时，我想要监控<code>gmaya-wepapi-admin</code>，<code>gmaya-service-admin</code><br>只需要在这两个项目的配置类新增</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 监控</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 通过HTTP公开所有的端点， 默认是info,health</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span>
  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>
    <span class="token key atrule">health</span><span class="token punctuation">:</span>
      <span class="token comment" spellcheck="true"># 显示完整信息，#默认是never（简要信息）</span>
      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always</code></pre>
<h2 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h2><p>启动注册中心，<code>admin</code>服务端，两个客户端。</p>
<p>注册中心页面<br><img src="https://img-blog.csdnimg.cn/20200509094113525.png" alt=""></p>
<p><code>spring boot admin</code> 页面<br><img src="https://img-blog.csdnimg.cn/20200509094208467.png" alt=""><br>点进去，可以查看服务的详细信息</p>
<p><img src="https://img-blog.csdnimg.cn/20200509094258625.png" alt=""></p>
<h2 id="添加登录页面"><a href="#添加登录页面" class="headerlink" title="添加登录页面"></a>添加登录页面</h2><p>在<code>spring boot amdin</code>  服务端修改</p>
<p>可参考<a href="https://github.com/codecentric/spring-boot-admin/tree/master/spring-boot-admin-samples/spring-boot-admin-sample-eureka" target="_blank" rel="noopener">官方示例</a></p>
<p>pom新增</p>
<pre class=" language-yaml"><code class="language-yaml">        &lt;dependency<span class="token punctuation">></span>
            &lt;groupId<span class="token punctuation">></span>org.springframework.boot&lt;/groupId<span class="token punctuation">></span>
            &lt;artifactId<span class="token punctuation">></span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>security&lt;/artifactId<span class="token punctuation">></span>
        &lt;/dependency<span class="token punctuation">></span></code></pre>
<p>配置文件</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> gmaya<span class="token punctuation">-</span>springbootadmin
  <span class="token key atrule">security</span><span class="token punctuation">:</span>
    <span class="token key atrule">user</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"gmaya"</span>
      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"gmaya"</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8000/eureka/
    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 开启健康检查</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata-map</span><span class="token punctuation">:</span>
      <span class="token key atrule">user.name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.security.user.name<span class="token punctuation">}</span>
      <span class="token key atrule">user.password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.security.user.password<span class="token punctuation">}</span>
</code></pre>
<p>新增配置类<br><code>SecuritySecureConfig</code>，直接将官方给出的示例改造一下拿过来了。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>gmayaspringbootadmin<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpMethod<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Customizer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>HttpSecurity<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>WebSecurityConfigurerAdapter<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>SavedRequestAwareAuthenticationSuccessHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>csrf<span class="token punctuation">.</span>CookieCsrfTokenRepository<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>util<span class="token punctuation">.</span>matcher<span class="token punctuation">.</span>AntPathRequestMatcher<span class="token punctuation">;</span>

<span class="token keyword">import</span> de<span class="token punctuation">.</span>codecentric<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>server<span class="token punctuation">.</span>config<span class="token punctuation">.</span>AdminServerProperties<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * spring boot admin 官网示例 
 * @author GMaya
 * @dateTime 2020/5/9 10:30
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecuritySecureConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> String adminContextPath<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">SecuritySecureConfig</span><span class="token punctuation">(</span>AdminServerProperties adminServerProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>adminContextPath <span class="token operator">=</span> adminServerProperties<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        SavedRequestAwareAuthenticationSuccessHandler successHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SavedRequestAwareAuthenticationSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        successHandler<span class="token punctuation">.</span><span class="token function">setTargetUrlParameter</span><span class="token punctuation">(</span><span class="token string">"redirectTo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        successHandler<span class="token punctuation">.</span><span class="token function">setDefaultTargetUrl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">(</span>authorizeRequests<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> authorizeRequests
            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/assets/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>formLogin<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> formLogin<span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/login"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">successHandler</span><span class="token punctuation">(</span>successHandler<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">(</span>logout<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> logout<span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/logout"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span>Customizer<span class="token punctuation">.</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>csrf<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> csrf<span class="token punctuation">.</span><span class="token function">csrfTokenRepository</span><span class="token punctuation">(</span>CookieCsrfTokenRepository<span class="token punctuation">.</span><span class="token function">withHttpOnlyFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">ignoringRequestMatchers</span><span class="token punctuation">(</span>
                    <span class="token keyword">new</span> <span class="token class-name">AntPathRequestMatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/instances"</span><span class="token punctuation">,</span>
                        HttpMethod<span class="token punctuation">.</span>POST<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token class-name">AntPathRequestMatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/instances/*"</span><span class="token punctuation">,</span>
                        HttpMethod<span class="token punctuation">.</span>DELETE<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token class-name">AntPathRequestMatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/actuator/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>重启，查看效果</p>
<p><img src="https://img-blog.csdnimg.cn/20200509103652944.png" alt=""></p>
<h2 id="邮件通知"><a href="#邮件通知" class="headerlink" title="邮件通知"></a>邮件通知</h2><p>如果服务下线，会进行邮件通知<br>在<code>spring boot amdin</code>  服务端修改</p>
<p><code>pom</code>新增</p>
<pre class=" language-java"><code class="language-java">       <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>邮件通知<span class="token operator">--</span><span class="token operator">></span>
       <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
           <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
           <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>mail<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
       <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre>
<p>配置文件<code>application.yml</code>修改</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> gmaya<span class="token punctuation">-</span>springbootadmin
  <span class="token key atrule">security</span><span class="token punctuation">:</span>
    <span class="token key atrule">user</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"gmaya"</span>
      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"gmaya"</span>
  <span class="token key atrule">mail</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 发件人使用的qq邮箱服务</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> smtp.qq.com
    <span class="token key atrule">username</span><span class="token punctuation">:</span> gmaya@qq.com
    <span class="token comment" spellcheck="true"># 授权码，不是密码，在qq邮箱设置-账号里面有生成授权码</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> ceevfekeeeeeeeee
  <span class="token key atrule">boot</span><span class="token punctuation">:</span>
    <span class="token key atrule">admin</span><span class="token punctuation">:</span>
      <span class="token key atrule">notify</span><span class="token punctuation">:</span>
        <span class="token key atrule">mail</span><span class="token punctuation">:</span>
          <span class="token comment" spellcheck="true"># 收件人，多个中间用,分隔</span>
          <span class="token key atrule">to</span><span class="token punctuation">:</span> xxx@xxx.com
          <span class="token comment" spellcheck="true"># 发件人</span>
          <span class="token key atrule">from</span><span class="token punctuation">:</span> gmaya@qq.com</code></pre>
<p><img src="https://img-blog.csdnimg.cn/2020050912443692.png" alt=""></p>
<p>重启服务，然后将一个客户端关闭<br><img src="https://img-blog.csdnimg.cn/2020050912433838.png" alt=""></p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>SpringBoot Admin</tag>
      </tags>
  </entry>
  <entry>
    <title>有关Druid的一些配置</title>
    <url>/2020/20200507/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>Druid 是 Java 语言中最好的数据库连接池。 Druid 能够提供强大的监控和扩展功能。</p>
</blockquote>
<p>官方链接<a href="https://github.com/alibaba/druid" target="_blank" rel="noopener">https://github.com/alibaba/druid</a></p>
<p>以下所有配置基于<code>springboot2.2.6</code>配置</p>
<h2 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h2><p>maven项目直接引用</p>
<pre class=" language-java"><code class="language-java">     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>阿里数据库连接池 <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>druid<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">14</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre>
<h2 id="Druid的一些常用配置"><a href="#Druid的一些常用配置" class="headerlink" title="Druid的一些常用配置"></a>Druid的一些常用配置</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource
    <span class="token key atrule">druid</span><span class="token punctuation">:</span>
      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/gmaya<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai
      <span class="token key atrule">username</span><span class="token punctuation">:</span> root
      <span class="token key atrule">password</span><span class="token punctuation">:</span> root
      <span class="token comment" spellcheck="true"># 初始化时建立物理连接的个数</span>
      <span class="token key atrule">initial-size</span><span class="token punctuation">:</span> <span class="token number">5</span>
      <span class="token comment" spellcheck="true"># 最大连接池数量，并不是连接池越大越好。</span>
      <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">10</span>
      <span class="token comment" spellcheck="true"># 最小连接池数量</span>
      <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>
      <span class="token comment" spellcheck="true"># 获取连接时最大等待时间，单位毫秒。</span>
      <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">60000</span>
      <span class="token comment" spellcheck="true"># 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大.</span>
      <span class="token key atrule">pool-prepared-statements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token comment" spellcheck="true"># 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</span>
      <span class="token key atrule">max-pool-prepared-statement-per-connection-size</span><span class="token punctuation">:</span> <span class="token number">20</span>
      <span class="token comment" spellcheck="true"># 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能.官方写的默认true，但是看源码里面好像是默认false</span>
      <span class="token key atrule">test-on-borrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
      <span class="token comment" spellcheck="true"># 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为false</span>
      <span class="token key atrule">test-on-return</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
      <span class="token comment" spellcheck="true"># 合并多个DruidDataSource的监控数据</span>
      <span class="token comment" spellcheck="true"># 设置为true会和time-between-log-stats-millis冲突，启动项目失败</span>
      <span class="token key atrule">use-global-data-source-stat</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
      <span class="token comment" spellcheck="true"># 配置扩展插件</span>
      <span class="token comment" spellcheck="true">#监控统计用的filter:stat</span>
      <span class="token comment" spellcheck="true">#日志用的filter:log4j</span>
      <span class="token comment" spellcheck="true">#防御sql注入的filter:wall</span>
      <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall<span class="token punctuation">,</span>slf4j
      <span class="token comment" spellcheck="true"># 用来检测连接是否有效的sql 必须是一个查询语句</span>
      <span class="token comment" spellcheck="true"># mysql中为 select 'x'</span>
      <span class="token comment" spellcheck="true"># oracle中为 select 1 from dual</span>
      <span class="token key atrule">validation-query</span><span class="token punctuation">:</span> select 'x'
      <span class="token comment" spellcheck="true"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span>
      <span class="token key atrule">connect-properties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      <span class="token comment" spellcheck="true"># 定时输出统计信息到日志中，并每次输出日志会导致清零（reset）连接池相关的计数器。</span>
      <span class="token key atrule">time-between-log-stats-millis</span><span class="token punctuation">:</span> <span class="token number">300000</span>
      <span class="token comment" spellcheck="true">#验证连接的有效性,建议配置为true，不影响性能，并且保证安全性。</span>
      <span class="token key atrule">test-while-idle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token comment" spellcheck="true">#1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。</span>
      <span class="token comment" spellcheck="true">#2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</span>
      <span class="token key atrule">time-between-eviction-runs-millis</span><span class="token punctuation">:</span> <span class="token number">60000</span>
      <span class="token comment" spellcheck="true"># 连接保持空闲而不被驱逐的最小时间(连接池空闲连接的有效时间)</span>
      <span class="token key atrule">min-evictable-idle-time-millis</span><span class="token punctuation">:</span> <span class="token number">300000</span>
      <span class="token comment" spellcheck="true"># 浏览器监控页面</span>
      <span class="token key atrule">stat-view-servlet</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 是否启用监控页面，启用建议设置密码或白名单以保障安全</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">url-pattern</span><span class="token punctuation">:</span> <span class="token string">'/druid/*'</span>
        <span class="token comment" spellcheck="true"># IP白名单(没有配置或者为空，则允许所有访问)</span>
        <span class="token key atrule">allow</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">,</span>192.168.0.1
        <span class="token comment" spellcheck="true"># IP黑名单 (存在共同时，deny优先于allow)</span>
        <span class="token key atrule">deny</span><span class="token punctuation">:</span> 192.168.0.1
        <span class="token key atrule">login-username</span><span class="token punctuation">:</span> gmaya
        <span class="token key atrule">login-password</span><span class="token punctuation">:</span> gmaya

      <span class="token comment" spellcheck="true"># 配置DruidStatFilter</span>
      <span class="token key atrule">web-stat-filter</span><span class="token punctuation">:</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">url-pattern</span><span class="token punctuation">:</span> <span class="token string">'/*'</span>
        <span class="token comment" spellcheck="true"># 排除一些不必要的url，比如.js,/css/等等</span>
        <span class="token key atrule">exclusions</span><span class="token punctuation">:</span> <span class="token string">'*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*'</span>

</code></pre>
<p>注意：建议配置白名单，密码访问。<br><strong>test-on-borrow默认值问题：</strong><br>官方文档解释：<br><img src="https://img-blog.csdnimg.cn/20200507142829844.png" alt=""><br>然而自己查看实际效果却不一样，不知道是不是我的问题。<br>在源码中发现</p>
<pre class=" language-java"><code class="language-java">dataMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"TestOnBorrow"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isTestOnBorrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
dataMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"TestOnReturn"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isTestOnReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>testOnBorrow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>testOnReturn <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> DEFAULT_TEST_ON_BORROW <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> DEFAULT_TEST_ON_RETURN <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre>
<p>或者把这两个参数注释。启动查看页面<br><img src="https://img-blog.csdnimg.cn/20200507142735819.png" alt=""></p>
<h2 id="数据库密码加密"><a href="#数据库密码加密" class="headerlink" title="数据库密码加密"></a>数据库密码加密</h2><p>找到<code>maven</code>仓库中<code>druid</code> 的<code>jar</code>包</p>
<pre class=" language-java"><code class="language-java">D<span class="token operator">:</span>\maven<span class="token operator">-</span>repository\com\alibaba\druid\<span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">14</span></code></pre>
<p>然后打开<code>cmd</code>输入</p>
<pre class=" language-java"><code class="language-java">java <span class="token operator">-</span>cp druid<span class="token operator">-</span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">14</span><span class="token punctuation">.</span>jar com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ConfigTools 你的密码</code></pre>
<p>然后得到</p>
<pre class=" language-java"><code class="language-java">privateKey<span class="token operator">:</span>MIIBVgIBADANBgkqhkiG9w0BAQEFAASCAUAwggE8AgEAAkEAty<span class="token operator">+</span>xzmC<span class="token operator">/</span>4596DAoD<span class="token operator">+</span>OI0zThfJq6P5ZdcBx<span class="token operator">+</span>iTrBisD9ViQSwOUktzYi1o4ZiJ<span class="token operator">+</span>Akv2rR9Q47<span class="token operator">+</span>CpEvjH123nvQIDAQABAkEAj<span class="token operator">+</span>IycrujfRKCNnqXbCGg<span class="token operator">/</span>6BLfIKYG<span class="token operator">+</span>mrKx05yzzYBz4e8R1<span class="token operator">/</span>c1HCOn8D5YWDtKEXX5o1FKmJPHFyd0<span class="token operator">/</span>OL8MhsQIhAP<span class="token operator">/</span>P35Vitx7jN1B8gmgcmRhKYTgc6bVrkwNG8oLZaYr<span class="token operator">/</span>AiEAt1IobJLPTOZffLkAY9K365IsK9Ky7a7uq4KniN8yOUMCIHWMbP41PVZ5LHrUrAvxUDxEOYZSauZNx2FTIa8U<span class="token operator">/</span>pW7AiEArQv47MSIuuacLHfWTmSTCOQqnhN<span class="token operator">+</span>o68FzRDAZQuLtVECIQCdBeUAddQSBtT7n32N36PWZS3oKnQ1sGVY2xCRC8o5Iw<span class="token operator">==</span>
publicKey<span class="token operator">:</span>MFwwDQYJKoZIhvcNAQEBBQADS32sc5gv<span class="token operator">+</span>OfegwKA<span class="token operator">/</span>jiNM04Xyauj<span class="token operator">+</span>WXXAcfok6wYrA<span class="token operator">/</span>VYkEsDlJLc2ItaOGYifgJL9q0fUOO<span class="token operator">/</span>gqRL4x0K1gJ70CAwEAAQ<span class="token operator">==</span>
password<span class="token operator">:</span>FsnBV<span class="token operator">+</span>3RyPMUBHjG4unvXV21Z1tC<span class="token operator">+</span>xi19Xy5f<span class="token operator">/</span>JSm0ktb5m17<span class="token operator">+</span>B5fOzyDNTcFACmhx3zg<span class="token operator">/</span>lMaFOIy0UfOA<span class="token operator">==</span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200507133602139.png" alt=""><br>然后更改配置<br>将明文密码替换</p>
<pre class=" language-java"><code class="language-java">password<span class="token operator">:</span> gMs08dqeyRQC3fsgEvb4pgmr2W<span class="token operator">/</span>xVDgewGJLOJFZZOm8wfsVI0397uXGIe1W0rXJQl<span class="token operator">/</span>meyB<span class="token operator">/</span>GhqLt82fD8kiZw<span class="token operator">==</span></code></pre>
<p>新增密码解密，同时<code>config.decrypt.key=</code>上面生成的<code>publicKey</code>.</p>
<pre class=" language-yaml"><code class="language-yaml">      <span class="token comment" spellcheck="true"># ConfigFilter,开启密码加密功能</span>
      <span class="token key atrule">filter</span><span class="token punctuation">:</span>
        <span class="token key atrule">config</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token comment" spellcheck="true"># 配置参数，让ConfigFilter解密密码</span>
      <span class="token key atrule">connection-properties</span><span class="token punctuation">:</span> config.decrypt=true;config.decrypt.key=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAK23puqpHZjqJ7+DQkJBWKIYdc0nkSqZeLVrQtwMvRwXCRgtG5+/IKO8xhMTSGwhjglloiTiVnJ9IynvpyFVpgUCAwEAAQ==
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200507140225156.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Druid</tag>
      </tags>
  </entry>
  <entry>
    <title>给个人博客添加腾讯cos存储</title>
    <url>/2020/20200426/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>图片，视频等一些静态资源放到自己网站会有一定的访问延迟。</p>
<h2 id="开通存储桶"><a href="#开通存储桶" class="headerlink" title="开通存储桶"></a>开通存储桶</h2><p>在控制台找到对象存储,选择和云服务器一个地方的对象存储。<br><img src="https://img-blog.csdnimg.cn/20200426103440374.png" alt=""><br>按照步骤一步一步创建即可。</p>
<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>一般都是专门创建一个用户来操作的，当然至高无上的主账号也没啥毛病。<br>将新建的用户加上几个策略</p>
<pre class=" language-java"><code class="language-java">QcloudCOSGetServiceAccess 对象存储（COS）存储桶列表访问权限
QcloudCOSFullAccess 对象存储（COS）全读写访问权限
QcloudCOSDataFullControl 对象存储（COS）数据读、写、删除、列出的访问权限</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200426104928263.png" alt=""><br>然后在列表中权限管理设置上，    <strong>公有读私有写。数据读取、数据写入权限</strong>。<br><img src="https://img-blog.csdnimg.cn/20200426105025653.png" alt=""></p>
<h2 id="域名管理"><a href="#域名管理" class="headerlink" title="域名管理"></a>域名管理</h2><p>默认的链接一般都是<br><a href="https://blog-xxx.cos.ap-shanghai.myqcloud.com/imgs/MegellanicCloud_ZH-CN5132305226_1920x1080.jpg" target="_blank" rel="noopener">https://blog-xxx.cos.ap-shanghai.myqcloud.com/imgs/MegellanicCloud_ZH-CN5132305226_1920x1080.jpg</a><br>如果想要使用自己的子域名，比如：<br><a href="https://cos.gmaya.top/imgs/MegellanicCloud_ZH-CN5132305226_1920x1080.jpg" target="_blank" rel="noopener">https://cos.gmaya.top/imgs/MegellanicCloud_ZH-CN5132305226_1920x1080.jpg</a></p>
<ol>
<li>添加自定义域名</li>
<li>设置<code>nginx</code>的<code>https</code>代理</li>
</ol>
<p>首先在<code>DNS</code> 解析 中 解析一个 <code>cos</code> 指向自己服务器<code>ip</code>的子域名，然后去申请一个免费的证书。<br><img src="https://img-blog.csdnimg.cn/2020042611085940.png" alt=""></p>
<p>然后在域名管理里面添加自定义域名</p>
<p><img src="https://img-blog.csdnimg.cn/20200426105728973.png" alt=""><br>之后修改<code>nginx</code>配置。<br>因为我全站都是<code>https</code>的，不想因为几个图片没有<code>https</code>，导致全站又变成不安全的了。强迫症</p>
<pre class=" language-java"><code class="language-java">    server <span class="token punctuation">{</span>
        listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>
        server_name  cos<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>top<span class="token punctuation">;</span>

        ssl on<span class="token punctuation">;</span>
        ssl_certificate      1_cos<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>top_bundle<span class="token punctuation">.</span>crt<span class="token punctuation">;</span> # 你的证书
        ssl_certificate_key  2_cos<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>top<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
        ssl_session_cache    shared<span class="token operator">:</span>SSL<span class="token operator">:</span>1m<span class="token punctuation">;</span>
        ssl_session_timeout  5m<span class="token punctuation">;</span>

        ssl_ciphers  HIGH<span class="token operator">:</span><span class="token operator">!</span>aNULL<span class="token operator">:</span><span class="token operator">!</span>MD5<span class="token punctuation">;</span>
        ssl_prefer_server_ciphers  on<span class="token punctuation">;</span>

        location <span class="token operator">/</span> <span class="token punctuation">{</span>
            access_log off<span class="token punctuation">;</span> 
            expires <span class="token number">30d</span><span class="token punctuation">;</span> # 缓存<span class="token number">30</span>天，自己决定

            root <span class="token operator">/</span>data<span class="token operator">/</span>www<span class="token operator">/</span><span class="token punctuation">;</span> # 必须
            proxy_pass  https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token operator">-</span>xxx<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>ap<span class="token operator">-</span>shanghai<span class="token punctuation">.</span>myqcloud<span class="token punctuation">.</span>com<span class="token punctuation">;</span> # 你的桶路径
            proxy_set_header Host $http_host<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        error_page  <span class="token number">404</span>      <span class="token operator">/</span><span class="token number">404</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>

    <span class="token punctuation">}</span></code></pre>
<h2 id="防盗链设置"><a href="#防盗链设置" class="headerlink" title="防盗链设置"></a>防盗链设置</h2><p>如果不开启防盗链，那么哪个网站都可以引用你的图片。</p>
<p><img src="https://img-blog.csdnimg.cn/20200426110345344.png" alt=""></p>
<h2 id="客户端工具"><a href="#客户端工具" class="headerlink" title="客户端工具"></a>客户端工具</h2><p>在控制台直接进行下载<br><img src="https://img-blog.csdnimg.cn/2020042611062841.png" alt=""><br>在用户管理里面找到刚才新开的账户，然后根据<code>API</code> 密钥登录接口。以后上传图片就可以直接拖拽了</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>cos</tag>
        <tag>存储</tag>
      </tags>
  </entry>
  <entry>
    <title>添加feign熔断降级之后启动报错</title>
    <url>/2020/20200425/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在<code>springcloud</code>中，我使用<code>feign</code>自带的<code>Hystrix</code>实现熔断降级，但是却报错了。</p>
<pre class=" language-java"><code class="language-java">Error starting ApplicationContext<span class="token punctuation">.</span> To display the conditions report re<span class="token operator">-</span>run your application with <span class="token string">'debug'</span> enabled<span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">59</span> ERROR main<span class="token punctuation">]</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication <span class="token operator">-</span> Application run failed
org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>UnsatisfiedDependencyException<span class="token operator">:</span> Error creating bean with name <span class="token string">'userController'</span><span class="token operator">:</span> Unsatisfied dependency expressed through field <span class="token string">'userFacade'</span><span class="token punctuation">;</span> nested exception is org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>BeanCreationException<span class="token operator">:</span> Error creating bean with name <span class="token string">'gmaya.service.admin.api.facade.UserFacade'</span><span class="token operator">:</span> FactoryBean threw exception on object creation<span class="token punctuation">;</span> nested exception is java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalStateException<span class="token operator">:</span> No fallbackFactory instance of type <span class="token keyword">class</span> <span class="token class-name">gmaya<span class="token punctuation">.</span>service<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>api<span class="token punctuation">.</span>facade<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>UserFallbackFactory</span> found <span class="token keyword">for</span> feign client gmaya<span class="token operator">-</span>service<span class="token operator">-</span>admin
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>AutowiredAnnotationBeanPostProcessor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">643</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InjectionMetadata<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>InjectionMetadata<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">130</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AutowiredAnnotationBeanPostProcessor<span class="token punctuation">.</span><span class="token function">postProcessProperties</span><span class="token punctuation">(</span>AutowiredAnnotationBeanPostProcessor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">399</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span><span class="token function">populateBean</span><span class="token punctuation">(</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1422</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span><span class="token function">doCreateBean</span><span class="token punctuation">(</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">594</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span><span class="token function">createBean</span><span class="token punctuation">(</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">517</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractBeanFactory<span class="token punctuation">.</span>lambda$doGetBean$<span class="token function">0</span><span class="token punctuation">(</span>AbstractBeanFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">323</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultSingletonBeanRegistry<span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span>DefaultSingletonBeanRegistry<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">222</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractBeanFactory<span class="token punctuation">.</span><span class="token function">doGetBean</span><span class="token punctuation">(</span>AbstractBeanFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">321</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>AbstractBeanFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">202</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultListableBeanFactory<span class="token punctuation">.</span><span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span>DefaultListableBeanFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">882</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractApplicationContext<span class="token punctuation">.</span><span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>AbstractApplicationContext<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">878</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>context<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractApplicationContext<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span>AbstractApplicationContext<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">550</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>context<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ServletWebServerApplicationContext<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span>ServletWebServerApplicationContext<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">141</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span>SpringApplication<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">747</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">.</span><span class="token function">refreshContext</span><span class="token punctuation">(</span>SpringApplication<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">397</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringApplication<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">315</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringApplication<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1226</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringApplication<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1215</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at top<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>gmayawepapiadmin<span class="token punctuation">.</span>GmayaWepapiAdminApplication<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>GmayaWepapiAdminApplication<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>classes<span class="token operator">/</span><span class="token operator">:</span>na<span class="token punctuation">]</span>
Caused by<span class="token operator">:</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>BeanCreationException<span class="token operator">:</span> Error creating bean with name <span class="token string">'gmaya.service.admin.api.facade.UserFacade'</span><span class="token operator">:</span> FactoryBean threw exception on object creation<span class="token punctuation">;</span> nested exception is java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalStateException<span class="token operator">:</span> No fallbackFactory instance of type <span class="token keyword">class</span> <span class="token class-name">gmaya<span class="token punctuation">.</span>service<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>api<span class="token punctuation">.</span>facade<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>UserFallbackFactory</span> found <span class="token keyword">for</span> feign client gmaya<span class="token operator">-</span>service<span class="token operator">-</span>admin
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>FactoryBeanRegistrySupport<span class="token punctuation">.</span><span class="token function">doGetObjectFromFactoryBean</span><span class="token punctuation">(</span>FactoryBeanRegistrySupport<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">178</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>FactoryBeanRegistrySupport<span class="token punctuation">.</span><span class="token function">getObjectFromFactoryBean</span><span class="token punctuation">(</span>FactoryBeanRegistrySupport<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">101</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractBeanFactory<span class="token punctuation">.</span><span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>AbstractBeanFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1818</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span><span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1266</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractBeanFactory<span class="token punctuation">.</span><span class="token function">doGetBean</span><span class="token punctuation">(</span>AbstractBeanFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">260</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>AbstractBeanFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">202</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>DependencyDescriptor<span class="token punctuation">.</span><span class="token function">resolveCandidate</span><span class="token punctuation">(</span>DependencyDescriptor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">276</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultListableBeanFactory<span class="token punctuation">.</span><span class="token function">addCandidateEntry</span><span class="token punctuation">(</span>DefaultListableBeanFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1515</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultListableBeanFactory<span class="token punctuation">.</span><span class="token function">findAutowireCandidates</span><span class="token punctuation">(</span>DefaultListableBeanFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1472</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultListableBeanFactory<span class="token punctuation">.</span><span class="token function">doResolveDependency</span><span class="token punctuation">(</span>DefaultListableBeanFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1253</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultListableBeanFactory<span class="token punctuation">.</span><span class="token function">resolveDependency</span><span class="token punctuation">(</span>DefaultListableBeanFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1210</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>AutowiredAnnotationBeanPostProcessor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">640</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">19</span> common frames omitted
Caused by<span class="token operator">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalStateException<span class="token operator">:</span> No fallbackFactory instance of type <span class="token keyword">class</span> <span class="token class-name">gmaya<span class="token punctuation">.</span>service<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>api<span class="token punctuation">.</span>facade<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>UserFallbackFactory</span> found <span class="token keyword">for</span> feign client gmaya<span class="token operator">-</span>service<span class="token operator">-</span>admin
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>HystrixTargeter<span class="token punctuation">.</span><span class="token function">getFromContext</span><span class="token punctuation">(</span>HystrixTargeter<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">81</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>openfeign<span class="token operator">-</span>core<span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>HystrixTargeter<span class="token punctuation">.</span><span class="token function">targetWithFallbackFactory</span><span class="token punctuation">(</span>HystrixTargeter<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">63</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>openfeign<span class="token operator">-</span>core<span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>HystrixTargeter<span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>HystrixTargeter<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>openfeign<span class="token operator">-</span>core<span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>FeignClientFactoryBean<span class="token punctuation">.</span><span class="token function">loadBalance</span><span class="token punctuation">(</span>FeignClientFactoryBean<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">253</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>openfeign<span class="token operator">-</span>core<span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>FeignClientFactoryBean<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span>FeignClientFactoryBean<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">282</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>openfeign<span class="token operator">-</span>core<span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>FeignClientFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>FeignClientFactoryBean<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">262</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>openfeign<span class="token operator">-</span>core<span class="token operator">-</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>FactoryBeanRegistrySupport<span class="token punctuation">.</span><span class="token function">doGetObjectFromFactoryBean</span><span class="token punctuation">(</span>FactoryBeanRegistrySupport<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">171</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">]</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">30</span> common frames omitted

Process finished with exit code <span class="token number">1</span></code></pre>
<p>首先先去看了几个点：</p>
<ol>
<li>降级实现类是否加注解<code>@Component</code><br><img src="https://img-blog.csdnimg.cn/2020042515525663.png" alt=""></li>
<li>是否开启了<code>Hystrix</code>熔断支持</li>
</ol>
<pre class=" language-java"><code class="language-java">feign<span class="token operator">:</span>
  hystrix<span class="token operator">:</span>
    enabled<span class="token operator">:</span> <span class="token boolean">true</span></code></pre>
<p>发现都没问题。</p>
<p>反正是知道加上<code>UserFallbackFactory</code>才报错的，之前没加就没报错。</p>
<p>觉得是<code>spring</code>注入不了这个<code>bean</code>。然后突然想起来，之前说项目的所有包都要在<code>springboot</code>启动类下面或者同级。</p>
<p>然后我就去看了一下我的项目结构<br><img src="https://img-blog.csdnimg.cn/20200425155843672.png" alt=""><br>这包名不一样啊，那么我启动<code>web</code>项目能发现在<code>api</code>项目中注册的<code>bean</code>？<br><img src="https://img-blog.csdnimg.cn/2020042516022796.png" alt=""><br>注解 <code>springbootapplication</code>源码中解释： 自动扫描所在包及其子包，会将有注解的加入到<code>spring</code>容器中。</p>
<p>然后就在<code>web</code>暴露接口项目的启动类中添加</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>scanBasePackages <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"top.gmaya.gmayawepapiadmin"</span><span class="token punctuation">,</span> <span class="token string">"gmaya.service.admin.api"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>第一个扫描自己的包，第二个扫描<code>feign</code>接口包</p>
<p>然后就启动成功了，奇怪之前不加为什么可以呢。<br>然后看了一下，之前是<code>@EnableFeignClients</code>已经将接口扫描注册了。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"gmaya.service.admin.api.facade"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动，访问，没问题。<br>关闭<code>impl</code>实现项目，访问，出现熔断，降级。</p>
<p>顺便测测负载均衡，默认是开启的。<br>刚才启动的<code>impl</code>实现项目端口是<code>9001</code>，然后使用</p>
<pre class=" language-java"><code class="language-java">java <span class="token operator">-</span>Dserver<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">9003</span> <span class="token operator">-</span>jar gmaya<span class="token operator">-</span>service<span class="token operator">-</span>admin<span class="token operator">-</span>impl<span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT<span class="token punctuation">.</span>jar  server<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">9003</span></code></pre>
<p>再次启动一个<code>9003</code>端口的项目。<br><img src="https://img-blog.csdnimg.cn/20200425160724961.png" alt=""><br>这个时候再次访问接口，发现这两个<code>impl</code>实现项目交替打印。因为默认负载均衡方式是轮询。<br><img src="https://img-blog.csdnimg.cn/20200425161033468.png" alt=""></p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>feign熔断</tag>
      </tags>
  </entry>
  <entry>
    <title>撞库、脱库和洗库</title>
    <url>/2020/20200424/</url>
    <content><![CDATA[<h2 id="撞库"><a href="#撞库" class="headerlink" title="撞库"></a>撞库</h2><p>“撞库”一般就是指黑客拿到已经泄露的用户信息，然后去各个网站进行登录，一旦你的账号密码在各个网站都一样，那么就相当于撞库成功。<br>建议：各个网站的登录账号和密码不要一样。</p>
<h2 id="脱库"><a href="#脱库" class="headerlink" title="脱库"></a>脱库</h2><p>“拖库”就是黑客通过技术手段，盗取数据库信息的过程。<br>建议：做防<code>sql</code>注入，文件上传漏洞等。</p>
<h2 id="洗库"><a href="#洗库" class="headerlink" title="洗库"></a>洗库</h2><p>“洗库”就是将得到的数据信息进行贩卖。变现。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>泰山版《Java开发手册》</title>
    <url>/2020/20200422/</url>
    <content><![CDATA[<p>每次阿里推出最新的开发手册，自己都会去喵一眼，看一下。养成好习惯<br>泰山版：<br>新增<code>5</code>条日期时间规约；新增<code>2</code>条表别名<code>sql</code>规约；新增统一错误码规约。</p>
<p>官网地址：<a href="https://developer.aliyun.com/topic/java2020" target="_blank" rel="noopener">https://developer.aliyun.com/topic/java2020</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式雪花算法工具类</title>
    <url>/2020/20200421/</url>
    <content><![CDATA[<blockquote>
<p>SnowFlake 算法，是 Twitter 开源的分布式 id 生成算法。</p>
</blockquote>
<p><code>SnowFlake</code>算法的优点：</p>
<ul>
<li>高性能高可用：生成时不依赖于数据库，完全在内存中生成。</li>
<li>容量大：每秒中能生成数百万的自增<code>ID</code>。</li>
<li><code>ID</code>自增：存入数据库中，索引效率高。</li>
</ul>
<p><code>SnowFlake</code>算法的缺点：<br>依赖与系统时间的一致性，如果系统时间被回调，或者改变，可能会造成<code>id</code>冲突或者重复。</p>
<p><code>SnowFlakeUtil</code>工具类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>springbootrabbitmq<span class="token punctuation">.</span>utils<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ConcurrentHashMap<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 雪花算法 分布式 id生成工具类
 * @author GMaya
 * @dateTime 2020/4/21 9:36
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SnowFlakeUtil</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 时间起始标记点，作为基准，一般取系统的最近时间
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> epoch <span class="token operator">=</span> 1587433423721L<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 机器标识位数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> workerIdBits <span class="token operator">=</span> 10L<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 机器ID最大值: 1023
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxWorkerId <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token operator">-</span>1L <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>workerIdBits<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 0，并发控制
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> sequence <span class="token operator">=</span> 0L<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 毫秒内自增位
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> sequenceBits <span class="token operator">=</span> 12L<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 12
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> workerIdShift <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sequenceBits<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 22
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timestampLeftShift <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sequenceBits <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>workerIdBits<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 4095,111111111111,12位
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> sequenceMask <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token operator">-</span>1L <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sequenceBits<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 记录产生时间毫秒数，判断是否是同1毫秒
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> lastTimestamp <span class="token operator">=</span> <span class="token operator">-</span>1L<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 传入机器id
     * @param id
     */</span>
    <span class="token keyword">private</span> <span class="token function">SnowFlakeUtil</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxWorkerId <span class="token operator">||</span> id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"机器id不能大于%d或小于0"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxWorkerId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 获取当前时间毫秒数</span>
        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastTimestamp <span class="token operator">==</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//如果上一个timestamp与新产生的相等，则sequence加一(最大4095)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>sequence <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sequence <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sequenceMask<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sequence <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 超过最大值进行按位与，结果为0，也就是当这一毫秒序号超过最大值，就会循环等待下一毫秒</span>
                timestamp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tilNextMillis</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>sequence <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 如果时间回退，则报错或者返回-1，调用端进行判断</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"时钟回退，拒绝 %d 毫秒内生成雪花id"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastTimestamp <span class="token operator">-</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>lastTimestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 当前时间-初始时间，然后左移timestampLeftShift。</span>
        <span class="token comment" spellcheck="true">// 将机器id左移workerIdShift</span>
        <span class="token comment" spellcheck="true">// | 是按位或运算符，例如：x | y，只有当x，y都为0的时候结果才为0，其它情况结果都为1。</span>
        <span class="token keyword">return</span> timestamp <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>epoch <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>timestampLeftShift <span class="token operator">|</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>workerIdShift <span class="token operator">|</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sequence<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 如果说几十年后id重复了，把机器id加1，再用几十年
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> SnowFlakeUtil flowIdWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnowFlakeUtil</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getSnowFlakeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> flowIdWorker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 等待下一个毫秒的到来, 保证返回的毫秒数在参数lastTimestamp之后
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span><span class="token keyword">long</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;=</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> timestamp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获得系统当前毫秒数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//判断生成的记录是否有重复记录</span>
        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> s <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">;</span> s<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">long</span> snowFlakeId <span class="token operator">=</span> SnowFlakeUtil<span class="token punctuation">.</span><span class="token function">getSnowFlakeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"生成雪花ID={}"</span><span class="token punctuation">,</span>snowFlakeId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    Integer put <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>snowFlakeId<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>put <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"主键重复"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>雪花算法</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot+RabbitMQ削峰入门</title>
    <url>/2020/20200420/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/20/NeistPoint_ZH-CN3115403132_1920x1080.jpg) -->

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当大量的客户访问请求打到后端，去访问数据库等，瞬间会爆炸的。<br>经过前端或者其他的方案进行限流外。<br>还是有大量的请求，这个时候需要削峰了。</p>
<h2 id="简单的削峰例子"><a href="#简单的削峰例子" class="headerlink" title="简单的削峰例子"></a>简单的削峰例子</h2><p>先设置小一点，然后循环往队列里面放消息，消费的时候延迟<code>2</code>秒</p>
<pre class=" language-javascript"><code class="language-javascript">spring<span class="token punctuation">:</span>
  rabbitmq<span class="token punctuation">:</span>
    host<span class="token punctuation">:</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">21.129</span>
    port<span class="token punctuation">:</span> <span class="token number">5672</span>
    username<span class="token punctuation">:</span> guest
    password<span class="token punctuation">:</span> guest
    virtual<span class="token operator">-</span>host<span class="token punctuation">:</span> <span class="token operator">/</span>
    listener<span class="token punctuation">:</span>
      type<span class="token punctuation">:</span> simple
      simple<span class="token punctuation">:</span>
        prefetch<span class="token punctuation">:</span> <span class="token number">1</span> # 消费者每次从队列获取的消息数量
        concurrency<span class="token punctuation">:</span> <span class="token number">1</span> # 消费者数量
        max<span class="token operator">-</span>concurrency<span class="token punctuation">:</span> <span class="token number">1</span> # 启动消费者最大数量</code></pre>
<p>调用生产者</p>
<pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 调用消息生产者</span>
            sender<span class="token punctuation">.</span><span class="token function">sender</span><span class="token punctuation">(</span>msg<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span></code></pre>
<p>消费者</p>
<pre class=" language-javascript"><code class="language-javascript">    @<span class="token function">RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> MQConfig<span class="token punctuation">.</span>QUEUE<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiver</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> throws InterruptedException <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>2000L<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 模拟处理需要2秒</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消费者消费。。。。。。{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>页面访问：</p>
<p><a href="http://localhost:8088/hello?msg=GMaya" target="_blank" rel="noopener">http://localhost:8088/hello?msg=GMaya</a></p>
<p>此时消息会全部放到列队，但是会一条一条消费。简单的实现了削峰处理</p>
<p><img src="https://img-blog.csdnimg.cn/20200420163647431.png" alt=""><br>调整消费者的数量</p>
<pre class=" language-javascript"><code class="language-javascript">        prefetch<span class="token punctuation">:</span> <span class="token number">1</span> # 消费者每次从队列获取的消息数量
        concurrency<span class="token punctuation">:</span> <span class="token number">2</span> # 消费者数量
        max<span class="token operator">-</span>concurrency<span class="token punctuation">:</span> <span class="token number">10</span> # 启动消费者最大数量</code></pre>
<p>此时就会有两个消费者同时去消费队列中的消息。所以这个消费者数量需要根据实际的情况去设置所能承受的一个值，也就是峰值。</p>
<p><img src="https://img-blog.csdnimg.cn/20200420164005437.png" alt=""></p>
<h2 id="重试策略"><a href="#重试策略" class="headerlink" title="重试策略"></a>重试策略</h2><p>如果说消费者在消费的过程中失败了，那么会一直消费，一直到成功为止。</p>
<p>但是也可以添加重试策略，比如失败三次就不在消费了。</p>
<pre class=" language-javascript"><code class="language-javascript">    listener<span class="token punctuation">:</span>
      type<span class="token punctuation">:</span> simple
      simple<span class="token punctuation">:</span>
        prefetch<span class="token punctuation">:</span> <span class="token number">1</span> # 消费者每次从队列获取的消息数量
        concurrency<span class="token punctuation">:</span> <span class="token number">2</span> # 消费者数量
        max<span class="token operator">-</span>concurrency<span class="token punctuation">:</span> <span class="token number">10</span> # 启动消费者最大数量
        # 重试策略相关配置
        retry<span class="token punctuation">:</span>
          enabled<span class="token punctuation">:</span> <span class="token boolean">true</span> #开启消费者重试
          max<span class="token operator">-</span>attempts<span class="token punctuation">:</span> <span class="token number">2</span> #最大重试次数
          initial<span class="token operator">-</span>interval<span class="token punctuation">:</span> <span class="token number">2000</span> #重试间隔时间</code></pre>
<p>模拟异常</p>
<pre class=" language-javascript"><code class="language-javascript">    @<span class="token function">RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> MQConfig<span class="token punctuation">.</span>QUEUE<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiver</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> throws InterruptedException <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>2000L<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 模拟处理需要2秒</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"GMaya8"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消费者消费。。。。。。{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>此时的结果就是其他的消息被消费，但是这个<code>GMaya8</code>没了，失败三次之后就没了。队列中也消失了。</p>
<h2 id="如何保证rabbitmq消息不丢失"><a href="#如何保证rabbitmq消息不丢失" class="headerlink" title="如何保证rabbitmq消息不丢失"></a>如何保证rabbitmq消息不丢失</h2><p>丢失数据场景：</p>
<ol>
<li>生产者没有生产成功，即生产者丢失</li>
<li><code>rabbitmq</code>丢失了</li>
<li>消费端丢失，即消费端没消费成功。</li>
</ol>
<p>开启<code>confirm</code>回调，启动手动确定消息消费。</p>
<pre class=" language-java"><code class="language-java">server<span class="token operator">:</span>
  port<span class="token operator">:</span> <span class="token number">8088</span>
spring<span class="token operator">:</span>
  rabbitmq<span class="token operator">:</span>
    host<span class="token operator">:</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">21.129</span>
    port<span class="token operator">:</span> <span class="token number">5672</span>
    username<span class="token operator">:</span> guest
    password<span class="token operator">:</span> guest
    virtual<span class="token operator">-</span>host<span class="token operator">:</span> <span class="token operator">/</span>
    publisher<span class="token operator">-</span>returns<span class="token operator">:</span> <span class="token boolean">true</span> # 实现ReturnCallback接口，如果消息从交换器发送到对应队列失败时触发
    publisher<span class="token operator">-</span>confirm<span class="token operator">-</span>type<span class="token operator">:</span> correlated
    listener<span class="token operator">:</span>
      type<span class="token operator">:</span> simple
      simple<span class="token operator">:</span>
        acknowledge<span class="token operator">-</span>mode<span class="token operator">:</span> manual # 消息消费确认，可以手动确认
        prefetch<span class="token operator">:</span> <span class="token number">1</span> # 消费者每次从队列获取的消息数量
        concurrency<span class="token operator">:</span> <span class="token number">2</span> # 消费者数量
        max<span class="token operator">-</span>concurrency<span class="token operator">:</span> <span class="token number">10</span> # 启动消费者最大数量
        # 重试策略相关配置
        retry<span class="token operator">:</span>
          enabled<span class="token operator">:</span> <span class="token boolean">true</span> #开启消费者重试
          max<span class="token operator">-</span>attempts<span class="token operator">:</span> <span class="token number">3</span> #最大重试次数
          initial<span class="token operator">-</span>interval<span class="token operator">:</span> <span class="token number">2000</span> #重试间隔时间
    template<span class="token operator">:</span>
      #在消息没有被路由到合适队列情况下会将消息返还给消息发布者
      #当mandatory标志位设置为<span class="token boolean">true</span>时，如果exchange根据自身类型和消息routingKey无法找到一个合适的queue存储消息，
      # 那么broker会调用basic<span class="token punctuation">.</span><span class="token keyword">return</span>方法将消息返还给生产者<span class="token punctuation">;</span>当mandatory设置为<span class="token boolean">false</span>时，
      # 出现上述情况broker会直接将消息丢弃<span class="token punctuation">;</span>通俗的讲，mandatory标志告诉broker代理服务器至少将消息route到一个队列中，
      # 否则就将消息<span class="token keyword">return</span>给发送者<span class="token punctuation">;</span>
      #<span class="token operator">:</span> <span class="token boolean">true</span> # 启用强制信息
      mandatory<span class="token operator">:</span> <span class="token boolean">true</span></code></pre>
<p>使用交换机模式<br>生产者</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sender</span> <span class="token keyword">implements</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Sender</span><span class="token punctuation">(</span>RabbitTemplate rabbitTemplate<span class="token punctuation">)</span><span class="token punctuation">{</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * fanout 模式
     * @param msg
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fanoutSender</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"fanout生产者生产消息。。。。。{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 会把消息发送给 所有绑定到此交换机的全部列队；routing_key会被忽略。</span>
        CorrelationData correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>MQConfig<span class="token punctuation">.</span>FANOUT_EXCHANGE<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span>CorrelationData correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息生产成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息生产失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 可以自己写重新发送消息</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>消费者</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> MQConfig<span class="token punctuation">.</span>QUEUE_A<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiverA</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"QUEUE_A消费者消费。。。。。。{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> MQConfig<span class="token punctuation">.</span>QUEUE_B<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiverB</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"QUEUE_B消费者消费。。。。。。{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>这个时候已经解决出现问题，倒是消息消失的情况。当处理好问题之后，重启就会重新消费</p>
]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>给hexo博客加404公益页面</title>
    <url>/2020/20200419/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/19/VernalFalls_ZH-CN2664125316_1920x1080.jpg) -->

<p>腾讯公益<code>404</code>页面，寻找丢失儿童，让大家一起关注此项公益事业！<br>效果如：<br><a href="https://gmaya.top/404.html">https://gmaya.top/404.html</a></p>
<p>目的：<br>如果访问网站不存在的页面，则返回腾讯公益<code>404</code>页面</p>
<p>使用方法，新建 <code>404.html</code> 页面，放到主题的 <code>source</code> 目录下，内容如下：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE HTML<span class="token operator">></span>
<span class="token operator">&lt;</span>html<span class="token operator">></span>
<span class="token operator">&lt;</span>head<span class="token operator">></span>
  <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"content-type"</span> content<span class="token operator">=</span><span class="token string">"text/html;charset=utf-8;"</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge,chrome=1"</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"robots"</span> content<span class="token operator">=</span><span class="token string">"all"</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"robots"</span> content<span class="token operator">=</span><span class="token string">"index,follow"</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"https://qzone.qq.com/gy/404/style/404style.css"</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>
<span class="token operator">&lt;</span>body<span class="token operator">></span>
  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/plain"</span> src<span class="token operator">=</span><span class="token string">"https://www.qq.com/404/search_children.js"</span>
          charset<span class="token operator">=</span><span class="token string">"utf-8"</span> homePageUrl<span class="token operator">=</span><span class="token string">"/"</span>
          homePageName<span class="token operator">=</span><span class="token string">"回到我的主页"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://qzone.qq.com/gy/404/data.js"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://qzone.qq.com/gy/404/page.js"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre>
<p>修改<code>nginx</code>配置，只要访问的页面不存在则跳转到<code>404</code>公益页面。</p>
<p>在<code>nginx.conf</code>的<code>443</code>端口下添加</p>
<pre class=" language-javascript"><code class="language-javascript">error_page  <span class="token number">404</span>      <span class="token operator">/</span><span class="token number">404</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span></code></pre>
<p>重启即可</p>
]]></content>
      <categories>
        <category>优化</category>
      </categories>
      <tags>
        <tag>优化</tag>
        <tag>公益</tag>
      </tags>
  </entry>
  <entry>
    <title>win10系统hexo博客自动发布自动拉取</title>
    <url>/2020/20200417-2/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/17/NBNMSipapu_ZH-CN2293681419_1920x1080.jpg) -->
<a id="more"></a>
<p>我之前的流程是这样发布个人博客的。</p>
<ol>
<li>本地(<code>win10</code>)编写博客</li>
<li>本地上传博客到<code>github</code></li>
<li>服务器（<code>win10</code>）通过<code>git</code>拉取最新代码</li>
<li>因为是<code>nginx</code>代理的，所以这个时候直接域名访问就是最新的了。</li>
</ol>
<p><strong>问题</strong>：<br>每次本地上传完都需要远程控制服务器，然后手动拉取代码。</p>
<p>更改后实现的效果：</p>
<ol>
<li>本地(<code>win10</code>)编写博客</li>
<li>本地上传博客到<code>github</code></li>
</ol>
<p>其实就是 本地编写完，然后 <code>hexo s</code> 查看没问题，然后 <code>hexo g</code>  <code>hexo d</code> ，完事！</p>
<p>本地（<code>win</code>）无需做任何修改，<code>hexo d</code> 只要吧博客上传到<code>github</code>就行。</p>
<p><strong>服务器（win）做以下更改：</strong><br>存放博客根目录新建文件 <code>pull.bat</code>   名称随意<br>里面加上一句命令</p>
<pre class=" language-java"><code class="language-java">git pull</code></pre>
<p>对，就是这么简单粗暴的一个命令。</p>
<p><strong>然后win系统新增任务计划</strong><br><img src="https://img-blog.csdnimg.cn/20200417172615283.png" alt=""><br>点击<strong>创建任务</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20200417172735415.png" alt=""><br>常规设置<br><img src="https://img-blog.csdnimg.cn/20200417172853501.png" alt=""><br>触发器设置<br>看自己想法设置间隔时间，博客没那么频繁，所以一个小时拉取一次<br><img src="https://img-blog.csdnimg.cn/20200417173000618.png" alt=""><br>操作设置</p>
<p><img src="https://img-blog.csdnimg.cn/20200417173159535.png" alt=""></p>
<p>保存！哈哈。</p>
<p>我服务器有点东西必须用<code>win</code>，没办法。 等到时候用<code>linux</code>在弄一个，原理应该都是这样！</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>win10</tag>
        <tag>自动拉取git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下RabbitMQ另外一种延迟功能实现</title>
    <url>/2020/20200417/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/17/HimachalFalls_ZH-CN2187203976_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面写了使用死信对列实现了：<br>订单下单之后 <code>30</code> 分钟后，用户如果没有付钱，系统需要自动取消订单。<br>今天在研究一下另外一种<br><code>rabbitmq-delayed-message-exchange</code>插件</p>
<blockquote>
<p>注意：延迟插件 rabbitmq-delayed-message-exchange 是在 RabbitMQ 3.5.7 及以上的版本才支持的，依赖 Erlang/OPT 18.0 及以上运行环境。</p>
</blockquote>
<p>完整代码链接<a href="https://gitee.com/GMaya/springboot-rabbitmq" target="_blank" rel="noopener">https://gitee.com/GMaya/springboot-rabbitmq</a></p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>首先找到<code>RabbitMQ</code>插件目录<br>我的是在</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>rabbitmq<span class="token operator">/</span>lib<span class="token operator">/</span>rabbitmq_server<span class="token operator">-</span><span class="token number">3.6</span><span class="token punctuation">.</span><span class="token number">15</span><span class="token operator">/</span>plugins</code></pre>
<p>然后下载插件<br><a href="https://www.rabbitmq.com/community-plugins.html" target="_blank" rel="noopener">https://www.rabbitmq.com/community-plugins.html</a><br>下载需要的版本，我下载的是<code>3.6.x</code><br><img src="https://img-blog.csdnimg.cn/20200417140527781.png" alt=""><br>解压之后把rabbitmq_delayed_message_exchange-20171215-3.6.x.ez文件上传到<code>plugins</code>目录</p>
<p>然后开启插件</p>
<pre class=" language-java"><code class="language-java">rabbitmq<span class="token operator">-</span>plugins enable rabbitmq_delayed_message_exchange</code></pre>
<p>查看开启的插件列表</p>
<pre class=" language-java"><code class="language-java">rabbitmq<span class="token operator">-</span>plugins list</code></pre>
<p>重启服务</p>
<h2 id="集成到spring-boot"><a href="#集成到spring-boot" class="headerlink" title="集成到spring boot"></a>集成到spring boot</h2><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 使用rabbitmq-delayed-message-exchange 构建一个的延迟队列
 * @author GMaya
 * @dateTime 2020/4/17 14:17
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayMQConfig</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 创建Queue
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">delayedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"delayedQueue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 创建延迟交换机
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    CustomExchange <span class="token function">customExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-delayed-type"</span><span class="token punctuation">,</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//参数二为类型：必须是x-delayed-message</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomExchange</span><span class="token punctuation">(</span><span class="token string">"delayed-Exchange"</span><span class="token punctuation">,</span> <span class="token string">"x-delayed-message"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     *  绑定队列到交换器
     * @param queue
     * @param exchange
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    Binding <span class="token function">binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">delayedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">customExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"delayedQueue"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * delayed消息生产着
 * @author GMaya
 * @dateTime 2020/4/17 14:20
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelaySender</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> AmqpTemplate amqpTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"生产者===订单号：{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 这里把消息生产出来，指定交换机和queue</span>
        amqpTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"delayed-Exchange"</span><span class="token punctuation">,</span> <span class="token string">"delayedQueue"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessagePostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> Message <span class="token function">postProcessMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token keyword">throws</span> AmqpException <span class="token punctuation">{</span>
                MessageProperties messageProperties <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 这里是延迟时间，单位ms，这里延迟10s</span>
                messageProperties<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"x-delay"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> message<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 消费者
 * @author GMaya
 * @dateTime 2020/4/17 14:27
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayReceiver</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"delayedQueue"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orderMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消费者===订单号：{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在<code>HelloController</code>中注入调用<br>启动项目访问测试<br><a href="http://localhost:8088/hello?msg=hello,delay" target="_blank" rel="noopener">http://localhost:8088/hello?msg=hello,delay</a><br><img src="https://img-blog.csdnimg.cn/20200417144124808.png" alt=""><br>完美延迟！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用<code>RabbitMQ</code>两种延迟消息方法，</p>
<ol>
<li>通过消息过期后进入死信交换器，再由交换器转发到延迟消费队列，实现延迟功能</li>
<li>使用 <code>rabbitmq-delayed-message-exchange</code> 插件实现延迟功能。<br>如果版本合适，第二种方法比第一个简单点，没那么绕。。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次优化我的个人博客</title>
    <url>/2020/20200414-2/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/13/SneezeSpring_ZH-CN1577114008_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>优化一下自己的博客访问速度等！不要求画面多么炫酷，但是，必须要快！快！！<br>我的博客：<a href="https://gmaya.top">https://gmaya.top</a>欢迎访问哟！</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>话不多说，先看效果<br>优化前：<br><img src="https://img-blog.csdnimg.cn/20200414142404240.png" alt="优化前"><br>优化后：<br><img src="https://img-blog.csdnimg.cn/2020041414265240.png" alt="优化后"></p>
<h2 id="Hexo内部优化"><a href="#Hexo内部优化" class="headerlink" title="Hexo内部优化"></a>Hexo内部优化</h2><p>我的个人博客站点使用<code>hexo</code>搭建，使用<code>next</code>模板。<br>模板配置文件搜索：<code>motion</code><br><code>enable</code>：是否开启页面动画，就是刚进来有没有那个慢吞吞的特效<br><code>async</code>：是否开启异步加载，就是你的页面内容和特效是一起加载的。<br><img src="https://img-blog.csdnimg.cn/20200414141036404.png" alt=""></p>
<h2 id="Nginx优化访问"><a href="#Nginx优化访问" class="headerlink" title="Nginx优化访问"></a>Nginx优化访问</h2><p>我的博客静态页面是通过Nginx代理的</p>
<h3 id="修改worker-connections"><a href="#修改worker-connections" class="headerlink" title="修改worker_connections"></a>修改worker_connections</h3><p>默认是<code>1024</code>，相对而言扩大<code>5</code>倍，根据自己服务器决定</p>
<pre class=" language-java"><code class="language-java">events <span class="token punctuation">{</span>
    worker_connections  <span class="token number">5024</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="修改http配置"><a href="#修改http配置" class="headerlink" title="修改http配置"></a>修改http配置</h3><p>需要哪个就加上哪个</p>
<pre class=" language-java"><code class="language-java">http <span class="token punctuation">{</span>
    include       mime<span class="token punctuation">.</span>types<span class="token punctuation">;</span>
    default_type  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>

    #log_format  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" '</span>
    #                  <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>
    #                  <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span>

    #access_log  logs<span class="token operator">/</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>
    # 关闭日志
    access_log      off<span class="token punctuation">;</span>
    # 隐藏响应头中的有关操作系统和web server（Nginx）版本号的信息，这样对于安全性是有好处的。
    server_tokens   off<span class="token punctuation">;</span>
    sendfile        on<span class="token punctuation">;</span>
    # 等数据包累计到一定大小发送，启用 sendfile 生效
    tcp_nopush     on<span class="token punctuation">;</span>

    #keepalive_timeout  <span class="token number">0</span><span class="token punctuation">;</span>
    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>
    # 开启gzip
    gzip  on<span class="token punctuation">;</span>
    # 启用gzip压缩的最小文件；小于设置值的文件将不会被压缩
    gzip_min_length 1k<span class="token punctuation">;</span>
    # gzip 压缩级别 <span class="token number">1</span><span class="token operator">-</span><span class="token number">10</span>
    gzip_comp_level <span class="token number">2</span><span class="token punctuation">;</span>
    # 禁用IE <span class="token number">6</span> gzip
    gzip_disable <span class="token string">"MSIE [1-6]\."</span><span class="token punctuation">;</span>
    gzip_types text<span class="token operator">/</span>plain application<span class="token operator">/</span>javascript application<span class="token operator">/</span>x<span class="token operator">-</span>javascript text<span class="token operator">/</span>css application<span class="token operator">/</span>xml text<span class="token operator">/</span>javascript application<span class="token operator">/</span>x<span class="token operator">-</span>httpd<span class="token operator">-</span>php<span class="token punctuation">;</span>
    # 是否在http header中添加Vary<span class="token operator">:</span> Accept<span class="token operator">-</span>Encoding，建议开启
    gzip_vary on<span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="开启https访问"><a href="#开启https访问" class="headerlink" title="开启https访问"></a>开启https访问</h3><p>不喜欢网站一直显示不安全。<br>如果是<code>http</code>请求，将转发到<code>https</code></p>
<pre class=" language-java"><code class="language-java">    server <span class="token punctuation">{</span>
        listen       <span class="token number">80</span><span class="token punctuation">;</span>
        server_name  gmaya<span class="token punctuation">.</span>top<span class="token punctuation">;</span>
        rewrite <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">.</span>*<span class="token punctuation">)</span>$ https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>$host<span class="token operator">:</span><span class="token number">443</span><span class="token operator">/</span>$<span class="token number">1</span> permanent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h3 id="静态资源缓存"><a href="#静态资源缓存" class="headerlink" title="静态资源缓存"></a>静态资源缓存</h3><p>如果不是<code>https</code>，直接把内容加到<code>80</code>端口即可</p>
<pre class=" language-java"><code class="language-java">    server <span class="token punctuation">{</span>
        listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>
        server_name  gmaya<span class="token punctuation">.</span>top<span class="token punctuation">;</span>
        # 添加自己的证书
        ssl_certificate      xxx<span class="token punctuation">.</span>crt<span class="token punctuation">;</span>
        ssl_certificate_key  xxx<span class="token punctuation">.</span>key<span class="token punctuation">;</span>

        ssl_session_cache    shared<span class="token operator">:</span>SSL<span class="token operator">:</span>1m<span class="token punctuation">;</span>
        ssl_session_timeout  5m<span class="token punctuation">;</span>

        ssl_ciphers  HIGH<span class="token operator">:</span><span class="token operator">!</span>aNULL<span class="token operator">:</span><span class="token operator">!</span>MD5<span class="token punctuation">;</span>
        ssl_prefer_server_ciphers  on<span class="token punctuation">;</span>

        location <span class="token operator">~</span><span class="token operator">*</span> \<span class="token punctuation">.</span><span class="token punctuation">(</span>css<span class="token operator">|</span>js<span class="token operator">|</span>ico<span class="token operator">|</span>gif<span class="token operator">|</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>png<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>
            # 同上，通配所有以<span class="token punctuation">.</span>css<span class="token operator">/</span><span class="token punctuation">.</span>js<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>结尾的请求 
            access_log off<span class="token punctuation">;</span> 
            #忽略头部禁止缓存申明，类似与CDN的强制缓存功能
            proxy_ignore_headers <span class="token string">"Cache-Control"</span> <span class="token string">"Expires"</span> <span class="token string">"Set-Cookie"</span><span class="token punctuation">;</span>
            # 开启缓存，时间<span class="token number">864000</span>秒，
            add_header Cache<span class="token operator">-</span>Control <span class="token string">"public,max-age=864000"</span><span class="token punctuation">;</span>
            root   C<span class="token operator">:</span>\dev\blog<span class="token punctuation">;</span>
            index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        location <span class="token operator">~</span><span class="token operator">*</span> \<span class="token punctuation">.</span><span class="token punctuation">(</span>html<span class="token operator">|</span>xml<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>
            access_log off<span class="token punctuation">;</span>
            # max<span class="token operator">-</span>age<span class="token operator">&lt;=</span><span class="token number">0</span> 时向server发送http请求确认 <span class="token punctuation">,</span>该资源是否有修改<span class="token punctuation">,</span> 有的话 返回<span class="token number">200</span> <span class="token punctuation">,</span> 无的话 返回<span class="token number">304</span>。
            add_header Cache<span class="token operator">-</span>Control no<span class="token operator">-</span>cache<span class="token punctuation">;</span>
            root   C<span class="token operator">:</span>\dev\blog<span class="token punctuation">;</span>
            index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        location <span class="token operator">/</span> <span class="token punctuation">{</span>
            access_log off<span class="token punctuation">;</span>
            root   C<span class="token operator">:</span>\dev\blog<span class="token punctuation">;</span>
            index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span></code></pre>
<p>我博客上还有很多外链，哎，懒得换咯！（如果有一天外链挂了，再迁移过来。）</p>
<p>虽然一天到晚，总浏览量还不到<code>20</code>，哈哈。</p>
]]></content>
      <categories>
        <category>优化</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下Nginx的入门学习记录</title>
    <url>/2020/20200414/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/14/BWFlipper_ZH-CN1813139386_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前两篇文章已经把环境等都安装完了。</p>
<h2 id="反向代理demo1"><a href="#反向代理demo1" class="headerlink" title="反向代理demo1"></a>反向代理demo1</h2><p>进入<code>tomcat/webapps</code><br>新建<code>java</code>文件夹，里面放入一个<code>html</code><br>访问效果<br><code>http://192.168.21.129:8080/java/index.html</code><br><img src="https://img-blog.csdnimg.cn/20200413143633806.png" alt=""><br>一般情况下都是直接访问域名+路径，没有端口号的。这就该<code>nginx</code>上场了<br>修改<code>nginx</code>配置<br>进入<code>conf</code>文件夹</p>
<pre class=" language-java"><code class="language-java">vi nginx<span class="token punctuation">.</span>conf</code></pre>
<pre class=" language-java"><code class="language-java">    server <span class="token punctuation">{</span>
        listen       <span class="token number">80</span><span class="token punctuation">;</span>
        server_name  localhost<span class="token punctuation">;</span>
        location <span class="token operator">/</span> <span class="token punctuation">{</span>
               proxy_pass http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">8080</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span></code></pre>
<p>然后重启<code>nginx</code></p>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span>/nginx <span class="token operator">-</span>s reload</code></pre>
<p>访问<code>http://192.168.21.129/java/index.html</code><br>完美实现！</p>
<h2 id="反向代理demo2"><a href="#反向代理demo2" class="headerlink" title="反向代理demo2"></a>反向代理demo2</h2><p>复制一个<code>tomcat</code>，然后修改端口为<code>8081</code></p>
<pre class=" language-java"><code class="language-java">cp <span class="token operator">-</span>r tomcat tomcat8081</code></pre>
<p>修改<code>tomcat8081</code>的端口，进入<code>conf</code>文件夹</p>
<pre class=" language-java"><code class="language-java">vi server<span class="token punctuation">.</span>xml</code></pre>
<p>直接输入<code>/8080</code>搜索<br>将<code>8080</code> 修改为<code>8081</code><br><img src="https://img-blog.csdnimg.cn/20200413150727257.png" alt=""><br>关闭端口 <code>8005</code>  修改为  <code>8006</code>.<br><img src="https://img-blog.csdnimg.cn/20200413152934484.png" alt=""><br>修改一下此<code>tomcat/webapps</code>的文件<br>将之前的<code>java/inde.html</code>,修改为<code>gmaya</code>，内容也修改一下，用于区别。<br>访问不了，不要忘记开启<code>8081</code>端口哟<br>最终为：<br><a href="http://192.168.21.129:8080/java/index.html" target="_blank" rel="noopener">http://192.168.21.129:8080/java/index.html</a><br><a href="http://192.168.21.129:8081/gmaya/index.html" target="_blank" rel="noopener">http://192.168.21.129:8081/gmaya/index.html</a></p>
<p>修改<code>nginx</code>配置<br><img src="https://img-blog.csdnimg.cn/20200413153439872.png" alt=""><br>重启，访问看效果<br><img src="https://img-blog.csdnimg.cn/20200413154331962.png" alt=""></p>
<h2 id="Nginx-配置-负载均衡"><a href="#Nginx-配置-负载均衡" class="headerlink" title="Nginx 配置-负载均衡"></a>Nginx 配置-负载均衡</h2><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>还是上面的两个<code>tomcat</code>，直接修改<code>nginx</code></p>
<pre class=" language-java"><code class="language-java">http <span class="token punctuation">{</span>
    upstream myserver <span class="token punctuation">{</span>
        server <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">8080</span><span class="token punctuation">;</span>
        server <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">8081</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    server <span class="token punctuation">{</span>
        listen <span class="token number">80</span><span class="token punctuation">;</span>
        location <span class="token operator">/</span> <span class="token punctuation">{</span>
            proxy_pass http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>myserver<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>默认轮询的方式，每次打开新窗口，<code>8080</code>和<code>8081</code>会交替出现。<br>提示：修改<code>webapps/ROOR</code>下<code>index</code>文件会看的效果更明显<br><img src="https://img-blog.csdnimg.cn/20200413160258481.png" alt=""></p>
<h3 id="Nginx-分配策略："><a href="#Nginx-分配策略：" class="headerlink" title="Nginx 分配策略："></a>Nginx 分配策略：</h3><ol>
<li>轮询（默认） 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 <code>down</code> 掉，能自动剔除</li>
<li>权重，默认<code>1</code>，权重越高被分配的客户端越多 指定轮询几率，<code>weight</code> 和访问比率成正比。比如一台服务器性能好，一台不好，那就分配性能好的多一点<br><img src="https://img-blog.csdnimg.cn/20200413160839814.png" alt=""></li>
<li><code>ip_hash</code> 每个请求按访问 <code>ip</code> 的 <code>hash</code> 结果分配，这样每个访客固定访问一个后端服务器，可以解决 <code>session</code> 的问题。<br><img src="https://img-blog.csdnimg.cn/20200413161216835.png" alt=""></li>
<li><code>fair</code>（第三方） 按后端服务器的响应时间来分配请求，响应时间短的优先分配。</li>
</ol>
<h2 id="Nginx-高可用"><a href="#Nginx-高可用" class="headerlink" title="Nginx 高可用"></a>Nginx 高可用</h2><p><code>tomcat</code>搞了多个，也就是咱们<code>web</code>服务器搞了集群，不用担心某个<code>tomcat</code>挂了。<br>但是现在只有一台<code>Nginx</code>，如果<code>Nginx</code>挂了，也是<code>gg</code><br>所以我们需要两台以上Nginx来实现故障转移和高可用。</p>
<h3 id="keepalived简介"><a href="#keepalived简介" class="headerlink" title="keepalived简介"></a>keepalived简介</h3><blockquote>
<p>Keepalived的作用是检测服务器的状态，如果有一台web服务器宕机，或工作出现故障，Keepalived将检测到，并将有故障的服务器从系统中剔除，同时使用其他服务器代替该服务器的工作，当服务器工作正常后Keepalived自动将服务器加入到服务器群中，这些工作全部自动完成，不需要人工干涉，需要人工做的只是修复故障的服务器。</p>
</blockquote>
<p>安装<code>keepalived</code></p>
<pre class=" language-java"><code class="language-java">yum install keepalived <span class="token operator">-</span>y</code></pre>
<p>查看网卡<code>ifconfig</code><br>如果<code>ifconfig</code>使用不了</p>
<pre class=" language-java"><code class="language-java">yum install net<span class="token operator">-</span>tools</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200413164500176.png?" alt=""><br><code>CentOS7</code>里面的网卡名称默认不再是<code>eth0</code>，而是<code>ens33</code></p>
<p>我没有那么多服务器，所以我是使用的虚拟机。做到这一步，然后克隆一个一模一样的。<br>一个主机为：<code>192.168.21.129</code><br>一个从机为：<code>192.168.21.130</code></p>
<h3 id="修改主从keepalived配置"><a href="#修改主从keepalived配置" class="headerlink" title="修改主从keepalived配置"></a>修改主从keepalived配置</h3><h4 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h4><pre class=" language-java"><code class="language-java">#主机
#检测脚本
vrrp_script chk_http_port <span class="token punctuation">{</span>
    script <span class="token string">"/usr/local/src/check_nginx.sh"</span> #心跳执行的脚本，检测nginx是否启动
    interval <span class="token number">2</span>                          #（检测脚本执行的间隔，单位是秒）
    weight <span class="token number">2</span>                            #权重
<span class="token punctuation">}</span>
#vrrp 实例定义部分
vrrp_instance VI_1 <span class="token punctuation">{</span>
    state MASTER            # 指定keepalived的角色，MASTER为主，BACKUP为从
    <span class="token keyword">interface</span> <span class="token class-name">ens33</span>         # 当前进行vrrp通讯的网络接口卡<span class="token punctuation">(</span>当前centos的网卡<span class="token punctuation">)</span> 用ifconfig查看你具体的网卡
    virtual_router_id <span class="token number">52</span>    # 虚拟路由编号，主从要一直
    priority <span class="token number">100</span>            # 优先级，数值越大，获取处理请求的优先级越高
    advert_int <span class="token number">1</span>            # 检查间隔，默认为<span class="token function">1s</span><span class="token punctuation">(</span>vrrp组播周期秒数<span class="token punctuation">)</span>
    #授权访问
    authentication <span class="token punctuation">{</span>
        auth_type PASS #设置验证类型和密码，MASTER和BACKUP必须使用相同的密码才能正常通信
        auth_pass <span class="token number">1111</span>
    <span class="token punctuation">}</span>
    track_script <span class="token punctuation">{</span>
        chk_http_port            #（调用检测脚本）
    <span class="token punctuation">}</span>
    virtual_ipaddress <span class="token punctuation">{</span>
        <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">21.133</span>            # 定义虚拟<span class="token function">ip</span><span class="token punctuation">(</span>VIP<span class="token punctuation">)</span>，可多设，每行一个
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="从机"><a href="#从机" class="headerlink" title="从机"></a>从机</h4><pre class=" language-java"><code class="language-java">#从机
#检测脚本
vrrp_script chk_http_port <span class="token punctuation">{</span>
    script <span class="token string">"/usr/local/src/check_nginx.sh"</span> #心跳执行的脚本，检测nginx是否启动
    interval <span class="token number">2</span>                          #（检测脚本执行的间隔，单位是秒）
    weight <span class="token number">2</span>                            #权重
<span class="token punctuation">}</span>
#vrrp 实例定义部分
vrrp_instance VI_1 <span class="token punctuation">{</span>
    state BACKUP            # 指定keepalived的角色，MASTER为主，BACKUP为从
    <span class="token keyword">interface</span> <span class="token class-name">ens33</span>         # 当前进行vrrp通讯的网络接口卡<span class="token punctuation">(</span>当前centos的网卡<span class="token punctuation">)</span> 用ifconfig查看你具体的网卡
    virtual_router_id <span class="token number">52</span>    # 虚拟路由编号，主从要一直
    priority <span class="token number">99</span>            # 优先级，数值越大，获取处理请求的优先级越高
    advert_int <span class="token number">1</span>            # 检查间隔，默认为<span class="token function">1s</span><span class="token punctuation">(</span>vrrp组播周期秒数<span class="token punctuation">)</span>
    #授权访问
    authentication <span class="token punctuation">{</span>
        auth_type PASS #设置验证类型和密码，MASTER和BACKUP必须使用相同的密码才能正常通信
        auth_pass <span class="token number">1111</span>
    <span class="token punctuation">}</span>
    track_script <span class="token punctuation">{</span>
        chk_http_port            #（调用检测脚本）
    <span class="token punctuation">}</span>
    virtual_ipaddress <span class="token punctuation">{</span>
        <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">21.133</span>           # 定义虚拟<span class="token function">ip</span><span class="token punctuation">(</span>VIP<span class="token punctuation">)</span>，可多设，每行一个
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="检测nginx脚本"><a href="#检测nginx脚本" class="headerlink" title="检测nginx脚本"></a>检测nginx脚本</h4><p>在<code>/usr/local/src/check_nginx.sh</code>路径创建</p>
<pre class=" language-java"><code class="language-java">#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash
#检测nginx是否启动了
A<span class="token operator">=</span>`ps <span class="token operator">-</span>C nginx <span class="token operator">--</span>no<span class="token operator">-</span>header <span class="token operator">|</span>wc <span class="token operator">-</span>l`
<span class="token keyword">if</span> <span class="token punctuation">[</span> $A <span class="token operator">-</span>eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>then    #如果nginx没有启动就启动nginx
      systemctl start nginx                #重启nginx
      <span class="token keyword">if</span> <span class="token punctuation">[</span> `ps <span class="token operator">-</span>C nginx <span class="token operator">--</span>no<span class="token operator">-</span>header <span class="token operator">|</span>wc <span class="token operator">-</span>l` <span class="token operator">-</span>eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>then    #nginx重启失败，则停掉keepalived服务，进行VIP转移
              killall keepalived
      fi
fi</code></pre>
<p>修改文件访问权限</p>
<pre class=" language-java"><code class="language-java">chmod <span class="token number">775</span> check_nginx<span class="token punctuation">.</span>sh</code></pre>
<p>启动主从<code>tomcat</code>，<code>nginx</code><br>启动主从<code>keepalived</code></p>
<pre class=" language-java"><code class="language-java">systemctl start keepalived<span class="token punctuation">.</span>service</code></pre>
<p>重启<code>keepalived</code>命令</p>
<pre class=" language-java"><code class="language-java">service keepalived restart</code></pre>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>如果启动<code>http://192.168.21.133/</code> 发现访问不了，可能影响的原因有</p>
<ol>
<li>默认的<code>global_defs</code>配置中 ，将<code>vrrp_strict</code>注释！<br><img src="https://img-blog.csdnimg.cn/20200413181812875.png" alt=""></li>
<li>定义的<code>virtual_ipaddress</code>虚拟<code>ip</code>，要和自己本身的虚拟机<code>ip</code>段一样，比如：我的虚拟机<code>ip</code>为：<br><a href="http://192.168.21.130/" target="_blank" rel="noopener">http://192.168.21.130/</a> ，<a href="http://192.168.21.129/" target="_blank" rel="noopener">http://192.168.21.129/</a> ； 那么我的虚拟<code>ip</code> 也在<a href="http://192.168.21.*/" target="_blank" rel="noopener">http://192.168.21.*/</a> 范围内，我刚开始配置的192.168.200.100，就一直ping不通，改成192.168.21.133，解决。<br><img src="https://img-blog.csdnimg.cn/2020041318223412.png" alt=""></li>
<li><code>virtual_router_id</code> 默认的是<code>51</code>， 可以修改成<code>52</code>，然后重启一下看看。</li>
<li><code>priority</code> 主从的优先级不一样。</li>
</ol>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>现在已经能通过虚拟<code>ip</code>访问了， 现在直接把主机关闭。<br>再次访问，发现还是可以访问。说明咱们的高可用<code>ok</code>了。</p>
<p>如果发现检测<code>nginx</code>脚本，中的启动命令不能够直接启动<code>Nginx</code>，所以还要把自己服务器上的<br><code>systemctl start nginx</code> 配置一下。</p>
<h2 id="Nginx优化"><a href="#Nginx优化" class="headerlink" title="Nginx优化"></a>Nginx优化</h2><blockquote>
<p>Nginx默认采用多进程工作方式，Nginx启动后，会运行一个master进程和多个worker进程。其中master充当整个进程组与用户的交互接口，同时对进程进行监护，管理worker进程来实现重启服务、平滑升级、更换日志文件、配置文件实时生效等功能。worker用来处理基本的网络事件，worker之间是平等的，他们共同竞争来处理来自客户端的请求</p>
</blockquote>
<h3 id="调整worker-processes"><a href="#调整worker-processes" class="headerlink" title="调整worker_processes"></a>调整worker_processes</h3><p><strong><code>worker</code> 数和服务器的 <code>cpu</code> 数相等是最为适宜</strong></p>
<pre class=" language-java"><code class="language-java">默认：worker_processes<span class="token operator">:</span> <span class="token number">1</span>
调大：worker_processes<span class="token operator">:</span> CPU核心数，<span class="token punctuation">(</span>双核<span class="token number">4</span>线程，可以设置为<span class="token number">4</span><span class="token punctuation">)</span></code></pre>
<h3 id="最大化worker-connections"><a href="#最大化worker-connections" class="headerlink" title="最大化worker_connections"></a>最大化worker_connections</h3><p><strong><code>worker_processes</code>与<code>worker_connections</code> 设置好合适大小，可以提示<code>nginx</code>处理性能，非常重要。</strong><br>数字越大，能同时处理的连接越多</p>
<pre class=" language-java"><code class="language-java">默认：worker_connections<span class="token operator">:</span> <span class="token number">1024</span>
调大：worker_connections<span class="token operator">:</span> <span class="token number">100000</span>，（调大到<span class="token number">10</span>万连接）</code></pre>
<p><code>connections</code>不是随便设置的，而是与两个指标有重要关联，一是内存，二是操作系统级别的“进程最大可打开文件数”。<br>具体可以翻阅资料查看。不再絮叨了。</p>
<h3 id="启用Gzip压缩"><a href="#启用Gzip压缩" class="headerlink" title="启用Gzip压缩"></a>启用Gzip压缩</h3><p>压缩文件大小，减少了客户端<code>http</code>的传输带宽，因此提高了页面加载速度</p>
<h3 id="为静态文件启用缓存"><a href="#为静态文件启用缓存" class="headerlink" title="为静态文件启用缓存"></a>为静态文件启用缓存</h3><p>根据具体情况区别要不要开启</p>
<h3 id="禁用access-logs"><a href="#禁用access-logs" class="headerlink" title="禁用access_logs"></a>禁用access_logs</h3><p>访问日志记录，它记录每个<code>nginx</code>请求，因此消耗了大量<code>CPU</code>资源，从而降低了<code>nginx</code>性能</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装Nginx</title>
    <url>/2020/20200413-3/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/13/RapaNuiFestival_ZH-CN1417623441_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇安装完<code>jdk</code>，<code>tomcat</code> 就在来一个<code>Nginx</code>。</p>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>进入你想要安装的目录</p>
<pre class=" language-powershell"><code class="language-powershell">cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span></code></pre>
<p>创建<code>nginx</code>文件夹</p>
<pre class=" language-powershell"><code class="language-powershell">mkdir nginx</code></pre>
<p>进入<code>nginx</code>目录下</p>
<pre class=" language-powershell"><code class="language-powershell">cd nginx<span class="token operator">/</span></code></pre>
<p>下载<code>nginx</code><br>在线下载或者自己下载好然后上传过来。</p>
<pre class=" language-powershell"><code class="language-powershell">wget http:<span class="token operator">/</span><span class="token operator">/</span>nginx<span class="token punctuation">.</span>org<span class="token operator">/</span>download<span class="token operator">/</span>nginx<span class="token operator">-</span>1<span class="token punctuation">.</span>16<span class="token punctuation">.</span>1<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz</code></pre>
<p>提示: 如果你没有<code>wget</code>,请先安装<code>wget</code></p>
<pre class=" language-powershell"><code class="language-powershell">yum <span class="token operator">-</span>y install wget</code></pre>
<p>安装所需的插件</p>
<pre class=" language-java"><code class="language-java">yum install gcc c<span class="token operator">++</span>
yum install <span class="token operator">-</span>y pcre pcre<span class="token operator">-</span>devel
yum install <span class="token operator">-</span>y zlib zlib<span class="token operator">-</span>devel
yum install <span class="token operator">-</span>y openssl openssl<span class="token operator">-</span>devel</code></pre>
<blockquote>
<p>用于编译c、c++代码的GCC；<br>用<code>c</code>语言编写的正则表达式函数库<code>Pcre</code>(使用<code>rewrite</code>模块)；<br>用于数据压缩的函式库的<code>Zlib</code>；<br>安全套接字层密码库<code>OpenSSL</code>（启用<code>SSL</code>支持）</p>
</blockquote>
<p>解压，编译<br>按照顺序执行</p>
<pre class=" language-java"><code class="language-java">tar <span class="token operator">-</span>zxvf nginx<span class="token operator">-</span><span class="token number">1.16</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz </code></pre>
<pre class=" language-java"><code class="language-java">cd nginx<span class="token operator">-</span><span class="token number">1.16</span><span class="token punctuation">.</span><span class="token number">1</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span>/configure</code></pre>
<pre class=" language-java"><code class="language-java">make <span class="token operator">&amp;&amp;</span> sudo make install</code></pre>
<h2 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h2><p><strong>启动</strong></p>
<pre class=" language-java"><code class="language-java">cd sbin<span class="token operator">/</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span>/nginx</code></pre>
<p><strong>停用</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span>/nginx <span class="token operator">-</span>s stop</code></pre>
<p><strong>重启</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span>/nginx <span class="token operator">-</span>s reload</code></pre>
<p>检查修改的<code>nginx.conf</code>配置是否正确</p>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span>/nginx <span class="token operator">-</span>t</code></pre>
<p>启动完之后，浏览器访问<code>http://192.168.21.129/</code><br>如果没有开启<code>80</code>端口，是不行的<br>开启<code>80</code>端口<br>我使用的是<code>centos7</code><br>加入<code>80</code>规则<br><code>–permanent</code> #永久生效，没有此参数设置，重启后会失效。</p>
<pre class=" language-java"><code class="language-java">firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>zone<span class="token operator">=</span><span class="token keyword">public</span> <span class="token operator">--</span>add<span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token operator">/</span>tcp <span class="token operator">--</span>permanent</code></pre>
<p>重启防火墙</p>
<pre class=" language-java"><code class="language-java">firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>reload</code></pre>
<p>刷新页面<code>http://192.168.21.129/</code><br><img src="https://img-blog.csdnimg.cn/20200413141903835.png" alt=""></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装Tomcat</title>
    <url>/2020/20200413-2/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/13/CorsicaHeart_ZH-CN2795615037_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇安装完<code>jdk</code>，就在来一个<code>Tomcat</code>。</p>
<h2 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h2><p>进入你想要安装的目录</p>
<pre class=" language-powershell"><code class="language-powershell">cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span></code></pre>
<p>创建<code>tomcat</code>文件夹</p>
<pre class=" language-powershell"><code class="language-powershell">mkdir tomcat</code></pre>
<p>进入<code>tomcat</code>目录下</p>
<pre class=" language-powershell"><code class="language-powershell">cd tomcat<span class="token operator">/</span></code></pre>
<p>下载<code>tomcat 8</code><br>在线下载或者自己下载好然后上传过来。</p>
<pre class=" language-powershell"><code class="language-powershell">wget https:<span class="token operator">/</span><span class="token operator">/</span>mirror<span class="token punctuation">.</span>bit<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>apache<span class="token operator">/</span>tomcat<span class="token operator">/</span>tomcat<span class="token operator">-</span>8<span class="token operator">/</span>v8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>54<span class="token operator">/</span>bin<span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token operator">-</span>8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>54<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz</code></pre>
<p>提示: 如果你没有<code>wget</code>,请先安装<code>wget</code></p>
<pre class=" language-powershell"><code class="language-powershell">yum <span class="token operator">-</span>y install wget</code></pre>
<p>解压</p>
<pre class=" language-powershell"><code class="language-powershell">tar <span class="token operator">-</span>zxvf apache<span class="token operator">-</span>tomcat<span class="token operator">-</span>8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>54<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz </code></pre>
<p>开启默认<code>8080</code>端口<br>我使用的是<code>centos7</code><br>加入<code>8080</code> 规则<br><code>--permanent</code> #永久生效，没有此参数设置，重启后会失效。</p>
<pre class=" language-powershell"><code class="language-powershell">firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>zone=public <span class="token operator">--</span>add<span class="token operator">-</span>port=8080<span class="token operator">/</span>tcp <span class="token operator">--</span>permanent</code></pre>
<p>重启防火墙</p>
<pre class=" language-powershell"><code class="language-powershell">firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>reload</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200413134305824.png" alt=""></p>
<p>启动</p>
<pre class=" language-powershell"><code class="language-powershell"> <span class="token punctuation">.</span><span class="token operator">/</span>bin<span class="token operator">/</span>startup<span class="token punctuation">.</span>sh</code></pre>
<p>浏览器访问： <a href="http://192.168.21.129:8080/" target="_blank" rel="noopener">http://192.168.21.129:8080/</a><br><img src="https://img-blog.csdnimg.cn/2020041313435613.png" alt=""></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装jdk1.8</title>
    <url>/2020/20200413/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/13/EastereggsBerlin_ZH-CN7293755224_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直都想写一遍这个，虽然不是经常用到。这次准备搞一下<code>Nginx</code>,所以就从<code>0</code>开始，记录一下。</p>
<h2 id="安装jdk1-8"><a href="#安装jdk1-8" class="headerlink" title="安装jdk1.8"></a>安装jdk1.8</h2><p>进入你想要安装的目录</p>
<pre class=" language-java"><code class="language-java">cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span></code></pre>
<p>创建jdk文件夹</p>
<pre class=" language-java"><code class="language-java">mkdir jdk1<span class="token number">.8</span></code></pre>
<p>进入<code>jdk</code>目录下</p>
<pre class=" language-java"><code class="language-java">cd jdk1<span class="token number">.8</span><span class="token operator">/</span></code></pre>
<p>下载<code>jdk1.8</code></p>
<p>在线下载或者自己下载好然后上传过来。</p>
<pre class=" language-java"><code class="language-java">wget <span class="token operator">--</span>no<span class="token operator">-</span>check<span class="token operator">-</span>certificate <span class="token operator">--</span>no<span class="token operator">-</span>cookies <span class="token operator">--</span>header <span class="token string">"Cookie: oraclelicense=accept-securebackup-cookie"</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>download<span class="token punctuation">.</span>oracle<span class="token punctuation">.</span>com<span class="token operator">/</span>otn<span class="token operator">-</span>pub<span class="token operator">/</span>java<span class="token operator">/</span>jdk<span class="token operator">/</span>8u131<span class="token operator">-</span>b11<span class="token operator">/</span>d54c1d3a095b4ff2b6607d096fa80163<span class="token operator">/</span>jdk<span class="token operator">-</span>8u131<span class="token operator">-</span>linux<span class="token operator">-</span>x64<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz</code></pre>
<p>耐心等待。。。<br><img src="https://img-blog.csdnimg.cn/20200413112955686.png" alt=""><br>解压</p>
<pre class=" language-java"><code class="language-java">tar <span class="token operator">-</span>zxvf jdk<span class="token operator">-</span>8u131<span class="token operator">-</span>linux<span class="token operator">-</span>x64<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz</code></pre>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>先找到你的<code>jdk</code>安装目录记录一下</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_131</code></pre>
<p>添加环境变量</p>
<pre class=" language-java"><code class="language-java">vi <span class="token operator">/</span>etc<span class="token operator">/</span>profile</code></pre>
<p>输入<code>a</code>，在文本最后面加上</p>
<pre class=" language-java"><code class="language-java">export JAVA_HOME<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_131
export CLASSPATH<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">:</span>$JAVA_HOME<span class="token operator">/</span>lib<span class="token operator">/</span>dt<span class="token punctuation">.</span>jar<span class="token operator">:</span>$JAVA_HOME<span class="token operator">/</span>lib<span class="token operator">/</span>tools<span class="token punctuation">.</span>jar
export PATH<span class="token operator">=</span>$PATH<span class="token operator">:</span>$JAVA_HOME<span class="token operator">/</span>bin
</code></pre>
<p>按 <code>esc</code>，然后<code>：wq</code>保存退出。<br>加载环境变量</p>
<pre class=" language-java"><code class="language-java">source <span class="token operator">/</span>etc<span class="token operator">/</span>profile</code></pre>
<p>查看版本号，看是否安装成功！</p>
<pre class=" language-java"><code class="language-java">java <span class="token operator">-</span>version</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200413130521190.png" alt=""></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>分享一下Typora工具</title>
    <url>/2020/20200411/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/11/SeventeenSolstice_ZH-CN4901756341_1920x1080.jpg) -->
<a id="more"></a>
<p>分享 一个自己正在使用的工具</p>
<blockquote>
<p>Typora 是一款支持实时预览的 Markdown 文本编辑器。</p>
</blockquote>
<p><code>Typora</code>官网<a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a><br>简直是编辑博客的不二之选！免费免费免费！！！<br>同时你也可以编写文档，编写简历，支持导出多种模式。太香了<br><img src="https://img-blog.csdnimg.cn/20200411210630663.png" alt=""></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合RabbitMQ入门</title>
    <url>/2020/20200410/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/10/UnicornoftheSea_ZH-CN2949385175_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>RabbitMQ 即一个消息队列，主要是用来实现应用程序的异步和解耦，同时也能起到消息缓冲，消息分发的作用。</p>
</blockquote>
<p>安装完<code>MQ</code>，就该写个例子研究研究了。<br>新建<code>Spring Boot</code> 项目。</p>
<h2 id="修改pom文件"><a href="#修改pom文件" class="headerlink" title="修改pom文件"></a>修改pom文件</h2><p>新增<code>RabbitMQ</code> 支持</p>
<pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>amqp<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
</code></pre>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>默认网页<code>guest</code>用户是不允许访问的，需要修改一下权限。上篇有写</p>
<pre class=" language-java"><code class="language-java">server<span class="token operator">:</span>
  port<span class="token operator">:</span> <span class="token number">8088</span>
spring<span class="token operator">:</span>
  rabbitmq<span class="token operator">:</span>
    host<span class="token operator">:</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">21.129</span>
    port<span class="token operator">:</span> <span class="token number">5672</span>
    username<span class="token operator">:</span> guest
    password<span class="token operator">:</span> guest
    virtual<span class="token operator">-</span>host<span class="token operator">:</span> <span class="token operator">/</span>
</code></pre>
<h2 id="四种交换机"><a href="#四种交换机" class="headerlink" title="四种交换机"></a>四种交换机</h2><p>交换机的功能主要是接收消息并且转发到绑定的队列，交换机不存储消息。</p>
<p>交换机有四种类型：<code>Direct</code>, <code>topic</code>, <code>Headers</code> and <code>Fanout</code></p>
<blockquote>
<p>Direct是RabbitMQ默认的交换机模式,也是最简单的模式.即创建消息队列的时候,指定一个BindingKey.当发送者发送消息的时候,指定对应的Key.当Key和消息队列的BindingKey一致的时候,消息将会被发送到该消息队列中.</p>
</blockquote>
<blockquote>
<p>topic转发信息主要是依据通配符,队列和交换机的绑定主要是依据一种模式(通配符+字符串),而当发送消息的时候,只有指定的Key和该模式相匹配的时候,消息才会被发送到该消息队列中.</p>
</blockquote>
<blockquote>
<p>headers也是根据一个规则进行匹配,在消息队列和交换机绑定的时候会指定一组键值对规则,而发送消息的时候也会指定一组键值对规则,当两组键值对规则相匹配的时候,消息会被发送到匹配的消息队列中.</p>
</blockquote>
<blockquote>
<p>Fanout是路由广播的形式,将会把消息发给绑定它的全部队列,即便设置了key,也会被忽略.</p>
</blockquote>
<h2 id="Direct"><a href="#Direct" class="headerlink" title="Direct"></a>Direct</h2><h3 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h3><pre class=" language-java"><code class="language-java">
<span class="token comment" spellcheck="true">/**
 * 消息队列配置类
 * @author GMaya
 * @dateTime 2020/4/9 16:02
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQConfig</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE <span class="token operator">=</span> <span class="token string">"hello-top-gmaya"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * Direct Exchange（交换机最简单的方式）
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// durable = true 开启持久化</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h3 id="创建生产者"><a href="#创建生产者" class="headerlink" title="创建生产者"></a>创建生产者</h3><p>用来提供消息产生的</p>
<pre class=" language-java"><code class="language-java">
<span class="token comment" spellcheck="true">/**
 * 消息队列生产者,比如订单下完,需要生产一个邮件推送的消息
 * @author GMaya
 * @dateTime 2020/4/9 15:42
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sender</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> AmqpTemplate amqpTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sender</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"生产者生产消息。。。。。{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 向key = MQConfig.QUEUE 中发送消息</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>amqpTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>MQConfig<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h3 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h3><p>用来消费消息的</p>
<pre class=" language-java"><code class="language-java">
<span class="token comment" spellcheck="true">/**
 * 消息列队 , 消费者, 用来消费队列中的消息
 * @author GMaya
 * @dateTime 2020/4/9 15:58
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Receiver</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 接收key = MQConfig.QUEUE 中消息</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> MQConfig<span class="token punctuation">.</span>QUEUE<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiver</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消费者消费。。。。。。{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>写个<code>hello</code>，然后调用。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> Sender sender<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello自己的业务。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sender<span class="token punctuation">.</span><span class="token function">sender</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"hello rabbitmq!!!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>浏览器访问 <code>http://localhost:8088/hello?msg=你好啊</code></p>
<p><img src="https://img-blog.csdnimg.cn/20200410104352630.png" alt=""></p>
<h2 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h2><h3 id="修改配置类"><a href="#修改配置类" class="headerlink" title="修改配置类"></a>修改配置类</h3><pre class=" language-java"><code class="language-java">
<span class="token comment" spellcheck="true">/**
 * 消息队列配置类
 * @author GMaya
 * @dateTime 2020/4/9 16:02
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQConfig</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE <span class="token operator">=</span> <span class="token string">"hello-top-gmaya"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_A <span class="token operator">=</span> <span class="token string">"topic-a"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_B <span class="token operator">=</span> <span class="token string">"topic-b"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ROUTING_KEYA <span class="token operator">=</span> <span class="token string">"topic.gmaya"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ROUTING_KEYB <span class="token operator">=</span> <span class="token string">"topic.#"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TOPIC_EXCHANGE <span class="token operator">=</span> <span class="token string">"TOPIC_EXCHANGE"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// topic 交换机名称</span>

    <span class="token comment" spellcheck="true">// Direct Exchange（交换机最简单的方式）----begin</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// durable = true 开启持久化</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// Direct Exchange（交换机最简单的方式）----end</span>

    <span class="token comment" spellcheck="true">// Topic Exchange 可以用通配符 ---begin</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">topicQueueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_A<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">topicQueueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_B<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// 定义topic交换机</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> TopicExchange <span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span>TOPIC_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// routing_key为topic.gmaya,就是完全匹配</span>
    <span class="token comment" spellcheck="true">// 其实就相当于，你发送的时候 routing_key 和我的一样， 我就进入我的队列中，不然就不进</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">topicBindingA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">topicQueueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>ROUTING_KEYA<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// routing_key为topic.#,就是模糊匹配</span>
    <span class="token comment" spellcheck="true">// 其实就相当于，你发送的时候 routing_key 满足我的routing_key， 就进入我的队列中，不然就不进</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">topicBindingB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">topicQueueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>ROUTING_KEYB<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// Topic Exchange 可以用通配符 ---begin</span>

<span class="token punctuation">}</span>
</code></pre>
<h3 id="修改生产者"><a href="#修改生产者" class="headerlink" title="修改生产者"></a>修改生产者</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 消息队列生产者,比如订单下完,需要生产一个邮件推送的消息
 * @author GMaya
 * @dateTime 2020/4/9 15:42
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sender</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> AmqpTemplate amqpTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sender</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"生产者生产消息。。。。。{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 向key = MQConfig.QUEUE 中发送消息</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>amqpTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>MQConfig<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">topicSender</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"topic生产者生产消息。。。。。{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 交换机中发送消息</span>
        <span class="token comment" spellcheck="true">// 这次是完全匹配， 结果应该a和b都能接收到</span>
        <span class="token comment" spellcheck="true">// 因为b是模糊， 此条件满足模糊的条件，所有b会接收</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>amqpTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>MQConfig<span class="token punctuation">.</span>TOPIC_EXCHANGE<span class="token punctuation">,</span>MQConfig<span class="token punctuation">.</span>ROUTING_KEYA<span class="token punctuation">,</span> msg <span class="token operator">+</span> <span class="token string">"完全匹配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 这次是模糊匹配，不满足a的条件，所以只有b模糊可以接收</span>
<span class="token comment" spellcheck="true">//        this.amqpTemplate.convertAndSend(MQConfig.TOPIC_EXCHANGE,"topic.xixihaha", msg + "模糊匹配");</span>
        <span class="token comment" spellcheck="true">// 这次是routing_key 不满足a，也不满足b。所以两个都接收不到。</span>
<span class="token comment" spellcheck="true">//        this.amqpTemplate.convertAndSend(MQConfig.TOPIC_EXCHANGE,"gmaya.top", msg + "不存在");</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="修改消费者"><a href="#修改消费者" class="headerlink" title="修改消费者"></a>修改消费者</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 消息列队 , 消费者, 用来消费队列中的消息
 * @author GMaya
 * @dateTime 2020/4/9 15:58
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Receiver</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 接收key = MQConfig.QUEUE 中消息</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> MQConfig<span class="token punctuation">.</span>QUEUE<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiver</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消费者消费。。。。。。{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> MQConfig<span class="token punctuation">.</span>QUEUE_A<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiverA</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"QUEUE_A消费者消费。。。。。。{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> MQConfig<span class="token punctuation">.</span>QUEUE_B<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiverB</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"QUEUE_B消费者消费。。。。。。{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>完全匹配<br><img src="https://img-blog.csdnimg.cn/20200410113651384.png" alt=""><br>模糊匹配<br><img src="https://img-blog.csdnimg.cn/20200410113741617.png" alt=""></p>
<h2 id="Fanout"><a href="#Fanout" class="headerlink" title="Fanout"></a>Fanout</h2><h3 id="修改配置类-1"><a href="#修改配置类-1" class="headerlink" title="修改配置类"></a>修改配置类</h3><p>在<code>topic</code>配置类基础上新增代码</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// Fanout Exchange 消息广播的模式 ---begin</span>

    <span class="token comment" spellcheck="true">// 定义Fanout交换机名称</span>
    <span class="token comment" spellcheck="true">// 不管路由键或者是路由模式，会把消息发给绑定给它的全部队列，如果配置了routing_key会被忽略。</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> FanoutExchange <span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span>FANOUT_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">fanoutBindingA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">topicQueueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">fanoutBindingB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">topicQueueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// Fanout Exchange 消息广播的模式 ---end</span></code></pre>
<p>消费者不需要更改（因为是使用的<code>topic</code>中的两个，已经写过了）</p>
<h3 id="修改生产者-1"><a href="#修改生产者-1" class="headerlink" title="修改生产者"></a>修改生产者</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * fanout 模式
     * @param msg
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fanoutSender</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"fanout生产者生产消息。。。。。{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 会把消息发送给 所有绑定到此交换机的全部列队；routing_key会被忽略。</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>amqpTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>MQConfig<span class="token punctuation">.</span>FANOUT_EXCHANGE<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> Sender sender<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello自己的业务。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//        sender.sender(msg);</span>
<span class="token comment" spellcheck="true">//        sender.topicSender(msg);</span>
        sender<span class="token punctuation">.</span><span class="token function">fanoutSender</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"hello rabbitmq!!!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200410141531194.png" alt=""></p>
<h2 id="延迟队列（死信队列）"><a href="#延迟队列（死信队列）" class="headerlink" title="延迟队列（死信队列）"></a>延迟队列（死信队列）</h2><p>模拟订单创建完，如果<code>30</code>分钟后还没有支付，则取消订单。<br>要实现的办法很多， 使用<code>RabbitMQ</code>延迟队列是其中一个办法！</p>
<p>使用死信队列大致思路：<br><img src="https://img-blog.csdnimg.cn/202004101700583.png" alt=""></p>
<h3 id="订单MQ配置类"><a href="#订单MQ配置类" class="headerlink" title="订单MQ配置类"></a>订单MQ配置类</h3><pre class=" language-java"><code class="language-java">
<span class="token comment" spellcheck="true">/**
 * 订单业务配置
 * 死信对列使用的 orderTTLExchange，orderTTLQueue，orderTTLKey
 * 正常对列使用的 orderExchange，orderQueue，orderKey
 * 在orderTTLQueue中设置，当消息设置的时间到了，消失了，那么我就去调用orderQueue，orderKey，通知它。
 * 其实没有对应的rderTTLQueue消费类，肯定到期就没了，然后就实现了一定时间后把消息传给某个队列。
 * @author GMaya
 * @dateTime 2020/4/10 15:37
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderMQConfig</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 创建延迟队列(死信对列)交换机orderTTLExchange
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> DirectExchange <span class="token function">orderTTLExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"orderTTLExchange"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 创建实际消费交换机orderExchange
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> DirectExchange <span class="token function">orderExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"orderExchange"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 创建延迟队列(死信对列)orderTTLQueue
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">orderTTLQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> <span class="token string">"orderExchange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 到期后转发的交换机</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> <span class="token string">"orderKey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 到期后转发的路由key</span>
        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">"orderTTLQueue"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 创建实际orderQueue
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">orderQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"orderQueue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 将（延迟队列orderTTLQueue）和（交换机orderTTLExchange）绑定
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">orderTTLBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">orderTTLQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">orderTTLExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"orderTTLKey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 将（延迟队列orderQueue）和（交换机orderExchange）绑定
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">orderBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">orderQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">orderExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"orderKey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h3 id="订单生产者"><a href="#订单生产者" class="headerlink" title="订单生产者"></a>订单生产者</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 订单消息生产着
 * @author GMaya
 * @dateTime 2020/4/10 15:48
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderSender</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> AmqpTemplate amqpTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"生产者===订单号：{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 这里把消息生产出来，传到TTL的队列中去，那么到期还没有被消费，就认为死信息，就会调用设置好的队列了</span>
        amqpTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"orderTTLExchange"</span><span class="token punctuation">,</span> <span class="token string">"orderTTLKey"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessagePostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> Message <span class="token function">postProcessMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token keyword">throws</span> AmqpException <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 设置失效时间，毫秒，一般订单设置30分钟,30*60*1000</span>
                <span class="token comment" spellcheck="true">// 过期直接转发到指定的路由</span>
                <span class="token comment" spellcheck="true">// 由于模拟设置20秒</span>
                MessageProperties messageProperties <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                messageProperties<span class="token punctuation">.</span><span class="token function">setContentEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                messageProperties<span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token string">"20000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> message<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h3 id="订单消费者"><a href="#订单消费者" class="headerlink" title="订单消费者"></a>订单消费者</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 订单消息消费者
 * 主要用于检查订单状态是否支付
 * @author GMaya
 * @dateTime 2020/4/10 15:54
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderReceiver</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 这里只是消费了orderQueue。没有人去消费orderTTLQueue.一旦写了TTL那么就是实时消费了，不叫死信了。</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"orderQueue"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orderMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消费者===订单号：{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// TODO 处理判断此订单状态是否支付，如果没有支付则取消订单！</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="调用测试"><a href="#调用测试" class="headerlink" title="调用测试"></a>调用测试</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 *
 * @author GMaya
 * @dateTime 2020/4/9 15:37
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> OrderSender orderSender<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Order创建成功。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderSender<span class="token punctuation">.</span><span class="token function">sendMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"order创建成功！"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>模拟<code>20</code>秒后进行实际调用处理<br>将<code>20</code>秒换成<code>30</code>分钟，实现超过<code>30</code>分钟还未支付的订单处理<br><img src="https://img-blog.csdnimg.cn/20200410170553124.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20200410170805913.png" alt=""><br>上述代码全部上传到<code>gitee</code>。<br>项目地址：<a href="https://gitee.com/GMaya/springboot-rabbitmq" target="_blank" rel="noopener">https://gitee.com/GMaya/springboot-rabbitmq</a><br>欢迎<code>star</code></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下安装RabbitMQ入门级别</title>
    <url>/2020/20200409/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/09/SantoriniAerial_ZH-CN9367767863_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="Linux安装RabbitMQ"><a href="#Linux安装RabbitMQ" class="headerlink" title="Linux安装RabbitMQ"></a>Linux安装RabbitMQ</h2><h3 id="安装erlang环境"><a href="#安装erlang环境" class="headerlink" title="安装erlang环境"></a>安装erlang环境</h3><blockquote>
<p>由于RabbitMQ是基于Erlang（面向高并发的语言）语言开发，所以在安装RabbitMQ之前，需要先安装Erlang。</p>
</blockquote>
<pre class=" language-powershell"><code class="language-powershell">yum <span class="token operator">-</span>y install epel<span class="token operator">-</span>release
yum <span class="token operator">-</span>y update
yum <span class="token operator">-</span>y install erlang socat
</code></pre>
<p>查看<code>erlang</code>版本</p>
<pre class=" language-powershell"><code class="language-powershell">erl <span class="token operator">-</span>version</code></pre>
<p><img src="https://img-blog.csdnimg.cn/2020040915052285.png" alt=""></p>
<h3 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h3><p><strong>下载RabbitMQ</strong></p>
<pre class=" language-powershell"><code class="language-powershell">wget http:<span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>com<span class="token operator">/</span>releases<span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server<span class="token operator">/</span>v3<span class="token punctuation">.</span>6<span class="token punctuation">.</span>15<span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server<span class="token operator">-</span>3<span class="token punctuation">.</span>6<span class="token punctuation">.</span>15<span class="token operator">-</span>1<span class="token punctuation">.</span>el7<span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm</code></pre>
<p><strong>提示:</strong> 如果你没有wget,请先安装wget </p>
<pre class=" language-powershell"><code class="language-powershell">yum <span class="token operator">-</span>y install wget</code></pre>
<p><strong>安装RabbitMQ</strong></p>
<pre class=" language-powershell"><code class="language-powershell">yum install rabbitmq<span class="token operator">-</span>server<span class="token operator">-</span>3<span class="token punctuation">.</span>6<span class="token punctuation">.</span>15<span class="token operator">-</span>1<span class="token punctuation">.</span>el7<span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm</code></pre>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>添加开机启动<code>RabbitMQ</code>服务</p>
<pre class=" language-powershell"><code class="language-powershell">systemctl enable rabbitmq<span class="token operator">-</span>server<span class="token punctuation">.</span>service</code></pre>
<p>启动web控制台</p>
<pre class=" language-powershell"><code class="language-powershell">rabbitmq<span class="token operator">-</span>plugins enable rabbitmq_management</code></pre>
<p>防火墙开放<code>15672</code>和<code>5672</code>端口</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token operator">/</span>sbin<span class="token operator">/</span>iptables <span class="token operator">-</span>I INPUT <span class="token operator">-</span>p tcp <span class="token operator">--</span>dport 15672 <span class="token operator">-</span>j ACCEPT
<span class="token operator">/</span>sbin<span class="token operator">/</span>iptables <span class="token operator">-</span>I INPUT <span class="token operator">-</span>p tcp <span class="token operator">--</span>dport 5672 <span class="token operator">-</span>j ACCEPT
</code></pre>
<p>默认网页<code>guest</code>用户是不允许访问的，需要修改一下权限</p>
<p>修改配置文件</p>
<pre class=" language-powershell"><code class="language-powershell">vi <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>rabbitmq<span class="token operator">/</span>lib<span class="token operator">/</span>rabbitmq_server<span class="token operator">-</span>3<span class="token punctuation">.</span>6<span class="token punctuation">.</span>5<span class="token operator">/</span>ebin<span class="token operator">/</span>rabbit<span class="token punctuation">.</span>app</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200409195424631.png" alt=""><br>启动, 停止 , 重启</p>
<pre class=" language-powershell"><code class="language-powershell">service rabbitmq<span class="token operator">-</span>server <span class="token function">start</span>
service rabbitmq<span class="token operator">-</span>server stop
service rabbitmq<span class="token operator">-</span>server restart</code></pre>
<p>注：有可能起不来 。。。</p>
<p>进入</p>
<pre class=" language-powershell"><code class="language-powershell">cd <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>rabbitmq<span class="token operator">/</span>bin</code></pre>
<p>启动 加 -detached 后台启动</p>
<pre class=" language-powershell"><code class="language-powershell"> <span class="token punctuation">.</span><span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server <span class="token function">start</span> <span class="token operator">-</span>detached</code></pre>
<p>浏览器输入<code>ip:15672</code><br>输入<code>guest</code>     <code>guest</code><br><img src="https://img-blog.csdnimg.cn/20200409153400333.png" alt=""></p>
<p>服气，各种版本不一致问题，提不起来，项目访问不到，端口不通，这个安装感觉比<code>oracle</code>都麻烦！！！</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的多重for循环怎么跳出最外层</title>
    <url>/2020/20200408/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/08/PinkMoon_ZH-CN9026483067_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="笔记记录"><a href="#笔记记录" class="headerlink" title="笔记记录"></a>笔记记录</h2><p>不加任何代码,最里层的<code>break</code>,只能跳出最内层的循环, 如果想要跳出最外面的,就要新增一个标记.<br>在想要跳出循环的地方加标记,然后<code>break</code>标记.</p>
<p>同理换成<code>continue</code> 标记; 效果一样.</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 测试多重for循环 break
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">forTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        tab<span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是i...."</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是j...."</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span> tab<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>循环</tag>
      </tags>
  </entry>
  <entry>
    <title>Python一键获取所有高清无码王者皮肤图片</title>
    <url>/2020/20200406/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/06/CastleDay_ZH-CN8752542375_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>突然看到王者荣耀每个英雄的图片很不错,所有就一张一张保存了.</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>1.打开王者荣耀官方英雄列表<br>2.分析接口<br>3.实际操作<br>4.调整代码<br>5.开始启动程序</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>其中中间发现,获取的页面中并没有直接找到图片的地址, 所以先拿到皮肤名称拼接成图片链接,然后真正拿到高清无码皮肤图片</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: gbk -*-#</span>

<span class="token comment" spellcheck="true"># -------------------------------------------------------</span>
<span class="token comment" spellcheck="true"># Name:         WZRYImpageDemo</span>
<span class="token comment" spellcheck="true"># Description:  多线程获取王者荣耀所有英雄高清皮肤</span>
<span class="token comment" spellcheck="true"># Author:       GMaya</span>
<span class="token comment" spellcheck="true"># Date:         2020/4/6 14:56</span>
<span class="token comment" spellcheck="true"># -------------------------------------------------------</span>
<span class="token keyword">import</span> threading

<span class="token keyword">import</span> requests<span class="token punctuation">,</span> json<span class="token punctuation">,</span> re

<span class="token comment" spellcheck="true"># 创建会话对象</span>
session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>

headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36'</span><span class="token punctuation">,</span>
    <span class="token string">'origin'</span><span class="token punctuation">:</span> <span class="token string">'https://pvp.qq.com'</span>
<span class="token punctuation">}</span>


<span class="token comment" spellcheck="true"># 获取所有英雄列表</span>
<span class="token keyword">def</span> <span class="token function">get_hero_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 请求接口</span>
    result <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://pvp.qq.com/web201605/js/herolist.json'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 解析json结果</span>
    resJson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    <span class="token keyword">for</span> res <span class="token keyword">in</span> resJson<span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 英雄名称</span>
        cname <span class="token operator">=</span> res<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'cname'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 英雄详情页id</span>
        ename <span class="token operator">=</span> res<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'ename'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 多线程获取详细页</span>
        myThread<span class="token punctuation">(</span>cname<span class="token punctuation">,</span> ename<span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment" spellcheck="true"># 获取英雄详情页面信息</span>
<span class="token keyword">def</span> <span class="token function">get_hero_tail</span><span class="token punctuation">(</span>ename<span class="token punctuation">,</span> cname<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 请求接口</span>
    result <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://pvp.qq.com/web201605/herodetail/%s.shtml'</span> <span class="token operator">%</span> ename<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    result<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'gbk'</span>
    zz <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul class="pic-pf-list pic-pf-list3" data-imgname="(.*?)">"""</span>
    <span class="token comment" spellcheck="true"># 由于爬取的页面和网页上看到的实际效果不一致,所以这里拿取所有皮肤名称,直接去皮肤服务器拿取</span>
    res_tail <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>zz<span class="token punctuation">,</span> result<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    res_tail_list <span class="token operator">=</span> res_tail<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>
    count <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> tail <span class="token keyword">in</span> res_tail_list<span class="token punctuation">:</span>
        imgName <span class="token operator">=</span> cname <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> tail
        <span class="token comment" spellcheck="true"># 下载具体图片</span>
        get_hero_skin<span class="token punctuation">(</span>ename<span class="token punctuation">,</span> count<span class="token punctuation">,</span> imgName<span class="token punctuation">)</span>
        count <span class="token operator">+=</span> <span class="token number">1</span>


<span class="token comment" spellcheck="true"># 保存下载图片</span>
<span class="token keyword">def</span> <span class="token function">get_hero_skin</span><span class="token punctuation">(</span>ename<span class="token punctuation">,</span> i<span class="token punctuation">,</span> imgName<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> <span class="token string">"http://game.gtimg.cn/images/yxzj/img201606/skin/hero-info/%s/%s-bigskin-%d.jpg"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>ename<span class="token punctuation">,</span> ename<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 拼接最后的图片地址,然后保存</span>
    res_skin <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    file <span class="token operator">=</span> <span class="token string">'D:\download\爬虫图片目录\王者荣耀图片\%s.jpg'</span> <span class="token operator">%</span> imgName
    <span class="token comment" spellcheck="true"># wb : 以二进制格式打开一个文件只用于写入。一般用于非文本文件如图片等。</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>res_skin<span class="token punctuation">.</span>content<span class="token punctuation">)</span>


<span class="token comment" spellcheck="true"># 创建线程类</span>
<span class="token keyword">class</span> <span class="token class-name">myThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cname<span class="token punctuation">,</span> ename<span class="token punctuation">)</span><span class="token punctuation">:</span>
        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>cname <span class="token operator">=</span> cname
        self<span class="token punctuation">.</span>ename <span class="token operator">=</span> ename

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始线程："</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>cname<span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            get_hero_tail<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ename<span class="token punctuation">,</span> self<span class="token punctuation">.</span>cname<span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程出现意外....'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"退出线程："</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>cname<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 开始</span>
    get_hero_list<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>也没有具体的计算, 这三百多个将近四百个, 其中包含英雄本身的图片,所以真正的皮肤应该是<code>200</code>多个.应该是全了.说实话,<code>300kb</code>左右的图片, 已经很清楚了</p>
<p><img src="https://img-blog.csdnimg.cn/20200406161040494.png" alt=""></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python听说网易云音乐的评论很有意思</title>
    <url>/2020/20200405/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/06/KissimmeeFrog_ZH-CN8379824947_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>听歌哪个平台好不知道， 但是要说评论，那就是网易云音乐。<br>看看云音乐热歌榜所有歌曲的评论吧。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>其实重点是分析各个页面和接口， 只要分析到位，没有拿不到的信息。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>其中<code>headers</code>和<code>data</code> 的信息自己从浏览器拿一下就好了.</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-#</span>

<span class="token comment" spellcheck="true"># -------------------------------------------------------</span>
<span class="token comment" spellcheck="true"># Name:         Music163</span>
<span class="token comment" spellcheck="true"># Description:  获取网易云音乐精彩评论</span>
<span class="token comment" spellcheck="true"># Author:       GMaya</span>
<span class="token comment" spellcheck="true"># Date:         2020/4/5 21:45</span>
<span class="token comment" spellcheck="true"># -------------------------------------------------------</span>

<span class="token keyword">import</span> requests<span class="token punctuation">,</span> re<span class="token punctuation">,</span> json<span class="token punctuation">,</span> datetime

<span class="token comment" spellcheck="true"># 1.创建会话对象</span>
session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>

headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'xxx'</span><span class="token punctuation">}</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">"params"</span><span class="token punctuation">:</span> <span class="token string">"xxx"</span>
    <span class="token punctuation">,</span>
    <span class="token string">"encSecKey"</span><span class="token punctuation">:</span> <span class="token string">"xxx"</span><span class="token punctuation">}</span>

<span class="token comment" spellcheck="true"># 文件保存位置</span>
file <span class="token operator">=</span> <span class="token string">'D:\download\music163.txt'</span>


<span class="token comment" spellcheck="true"># 根据歌曲id 获取所有精彩评论</span>
<span class="token keyword">def</span> <span class="token function">get_music_comment</span><span class="token punctuation">(</span>songid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> <span class="token string">"https://music.163.com/weapi/v1/resource/comments/R_SO_4_%d?csrf_token="</span> <span class="token operator">%</span> songid
    result <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
    res <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    hotComments <span class="token operator">=</span> res<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'hotComments'</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> hot <span class="token keyword">in</span> hotComments<span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 热评内容</span>
        content <span class="token operator">=</span> hot<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 昵称</span>
        nickname <span class="token operator">=</span> hot<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'nickname'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 评论时间</span>
        hottime <span class="token operator">=</span> int<span class="token punctuation">(</span>hot<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span>
        hottime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>hottime<span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 点赞人数</span>
        likedCount <span class="token operator">=</span> hot<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'likedCount'</span><span class="token punctuation">)</span>
        consequence <span class="token operator">=</span> <span class="token string">'[昵称:]%s,[评论时间:]%s,[点赞人数:]%d,[热评内容:]%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>nickname<span class="token punctuation">,</span> hottime<span class="token punctuation">,</span> likedCount<span class="token punctuation">,</span> content<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 保存评论信息</span>
        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>consequence <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 加\n换行显示</span>


<span class="token comment" spellcheck="true"># 获取热歌排行榜所有歌曲id</span>
<span class="token keyword">def</span> <span class="token function">get_song</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> <span class="token string">"https://music.163.com/m/discover/toplist?id=3778678"</span>
    result <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    res <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul class="f-hide">(.*?)&lt;/ul>"""</span>
    resul <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>res<span class="token punctuation">,</span> result<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>resul<span class="token punctuation">)</span>
    <span class="token keyword">for</span> ress <span class="token keyword">in</span> resul<span class="token punctuation">:</span>
        res2 <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;li>&lt;a href="\/song\?id=(.*?)">(.*?)&lt;/a>&lt;/li>"""</span>
        resul2 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>res2<span class="token punctuation">,</span> ress<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print(resul2)</span>
        <span class="token keyword">for</span> r <span class="token keyword">in</span> resul2<span class="token punctuation">:</span>
            songid <span class="token operator">=</span> int<span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            songname <span class="token operator">=</span> r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载[%s]歌曲评论"</span> <span class="token operator">%</span> songname<span class="token punctuation">)</span>
            consequence <span class="token operator">=</span> <span class="token string">'===========歌曲名称: %s==============='</span> <span class="token operator">%</span> songname
            <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>consequence <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 加\n换行显示</span>
            <span class="token comment" spellcheck="true"># 开始下载评论</span>
            get_music_comment<span class="token punctuation">(</span>songid<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    get_song<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>最后文件是保存到本地磁盘, 还是数据库,根据自己的方式决定</p>
<p>思路:<br>我之前写过<a href="https://blog.csdn.net/gfl1427097103/article/details/104718337" target="_blank" rel="noopener">获取qq音乐分享链接</a>可以根据歌名 获得到歌曲id等链接, 这个网易云根据歌名获取歌曲id也不难,这个时候应该可以做一个对接qq或者微信的机器人, 用户在qq群输入歌名,直接返回最热的一条评论!</p>
<p><img src="https://img-blog.csdnimg.cn/20200406000153654.png" alt=""></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python一键珍藏我的动漫妹子们</title>
    <url>/2020/20200404/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/04/--Fate-4k.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>获取点动漫图片,还要一张一张保存,这多难受.<br>话不多说,练练手</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>获取图片步骤:</p>
<ol>
<li>找到图片来源网站</li>
<li>分析网站页面数据结构</li>
<li>分析下一页结果</li>
<li>分析数据处理</li>
<li>保存</li>
</ol>
<p>本次找到的图片来源是<a href="http://pic.netbian.com/4kdongman/index.html" target="_blank" rel="noopener">http://pic.netbian.com/4kdongman/index.html</a><br>都是高清<code>4k</code>动漫大妹子</p>
<p>然后<code>F12</code>找到图片位置的标签等,然后使用正则匹配</p>
<p>点击下一个看到,后缀 <code>index_2</code>   <code>index_3</code>  所以,下一页数据只需要下划线加本页页数即可</p>
<p>开鲁代码</p>
<h2 id="展示真正的技术"><a href="#展示真正的技术" class="headerlink" title="展示真正的技术"></a>展示真正的技术</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding=gbk -*-</span>
<span class="token comment" spellcheck="true"># @Author: GMaya</span>
<span class="token comment" spellcheck="true"># 爬取动漫图片,嘎嘎</span>

<span class="token keyword">import</span> requests<span class="token punctuation">,</span> time<span class="token punctuation">,</span> re

<span class="token comment" spellcheck="true"># 1.创建会话对象</span>
session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment" spellcheck="true"># 获取目标网页结果</span>
<span class="token keyword">def</span> <span class="token function">get_result</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 请求接口</span>
    result <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 编码格式</span>
    result<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'gbk'</span>
    <span class="token triple-quoted-string string">""" 正则表达式,匹配对应数据
        注意:href="(.*?)" , 如果 .*? 被括号包裹, 则输出括号内的内容
            如果没有括号, 则输出整个匹配的内容
        """</span>
    res <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;a href="(.*?)" target="_blank">&lt;img src=".*?" alt=".*?" />&lt;b>.*?&lt;/b>&lt;/a>"""</span>
    <span class="token comment" spellcheck="true"># 匹配符合正则内容</span>
    <span class="token keyword">return</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>res<span class="token punctuation">,</span> result<span class="token punctuation">.</span>text<span class="token punctuation">)</span>


<span class="token comment" spellcheck="true"># 解析详情页数据</span>
<span class="token keyword">def</span> <span class="token function">two_result</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> con <span class="token keyword">in</span> contents<span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 去第详情页,获取清晰度比较高的图片</span>
        result2 <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://pic.netbian.com/'</span> <span class="token operator">+</span> con<span class="token punctuation">)</span>
        result2<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'gbk'</span>
        res2 <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;a href="" id="img">&lt;img src="(.*?)" data-pic=".*?" alt="(.*?)" title=".*?">&lt;/a>"""</span>
        <span class="token comment" spellcheck="true"># 匹配符合正则内容</span>
        contents2 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>res2<span class="token punctuation">,</span> result2<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 真正处理数据并保存</span>
        save_result<span class="token punctuation">(</span>contents2<span class="token punctuation">)</span>


<span class="token comment" spellcheck="true"># 真正处理数据并保存</span>
<span class="token keyword">def</span> <span class="token function">save_result</span><span class="token punctuation">(</span>contents2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> con2 <span class="token keyword">in</span> contents2<span class="token punctuation">:</span>
        path <span class="token operator">=</span> con2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 图片真正的高清图片地址</span>
        name <span class="token operator">=</span> con2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 图片名称</span>
        <span class="token comment" spellcheck="true"># 拼接最后的图片地址,然后保存</span>
        result3 <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://pic.netbian.com/'</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>
        file <span class="token operator">=</span> <span class="token string">'D:\download\dongmanImg\%s.jpg'</span> <span class="token operator">%</span> name
        <span class="token comment" spellcheck="true"># wb : 以二进制格式打开一个文件只用于写入。一般用于非文本文件如图片等。</span>
        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>result3<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 安全点就等待0.5秒再次爬取</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载动漫图片开始--------------'</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 爬取前一百页内容</span>
    pageno <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token comment" spellcheck="true"># 1.请求网页,获取结果</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> pageno<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'解析处理第%d页数据 请稍等...'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 第一个和其他页有点不同,所以分开处理</span>
        url <span class="token operator">=</span> <span class="token string">''</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            url <span class="token operator">=</span> <span class="token string">"http://pic.netbian.com/4kdongman/index.html"</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            url <span class="token operator">=</span> <span class="token string">"http://pic.netbian.com/4kdongman/index_%d.html"</span> <span class="token operator">%</span> i

        <span class="token comment" spellcheck="true"># 得到网页响应结果</span>
        result <span class="token operator">=</span> get_result<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 处理详情页数据</span>
        two_result<span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第%d页数据共%d个,处理完毕.'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 每次请求间隔0.5秒</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载动漫图片结束--------------'</span><span class="token punctuation">)</span>
</code></pre>
<p>喝陪咖啡,静等一会<br><img src="https://img-blog.csdnimg.cn/20200404171241313.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20200404171317589.png" alt=""></p>
<p><strong>说明: 只是用作技术练习.请勿恶意使用</strong></p>
<h2 id="多线程爬取"><a href="#多线程爬取" class="headerlink" title="多线程爬取"></a>多线程爬取</h2><p>上面单线程爬取了两杯咖啡时间, 到<code>30</code>页的时候,我停止了,太慢了,咋办,多线程搞上!</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding=gbk -*-</span>
<span class="token comment" spellcheck="true"># @Author: GMaya</span>
<span class="token comment" spellcheck="true"># 爬取动漫图片,多线程例子</span>

<span class="token keyword">import</span> requests<span class="token punctuation">,</span> time<span class="token punctuation">,</span> re
<span class="token keyword">import</span> threading

<span class="token comment" spellcheck="true"># 1.创建会话对象</span>
session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment" spellcheck="true"># 获取目标网页结果</span>
<span class="token keyword">def</span> <span class="token function">get_result</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 请求接口</span>
    result <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 编码格式</span>
    result<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'gbk'</span>
    <span class="token triple-quoted-string string">""" 正则表达式,匹配对应数据
        注意:href="(.*?)" , 如果 .*? 被括号包裹, 则输出括号内的内容
            如果没有括号, 则输出整个匹配的内容
        """</span>
    res <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;a href="(.*?)" target="_blank">&lt;img src=".*?" alt=".*?" />&lt;b>.*?&lt;/b>&lt;/a>"""</span>
    <span class="token comment" spellcheck="true"># 匹配符合正则内容</span>
    <span class="token keyword">return</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>res<span class="token punctuation">,</span> result<span class="token punctuation">.</span>text<span class="token punctuation">)</span>


<span class="token comment" spellcheck="true"># 解析详情页数据</span>
<span class="token keyword">def</span> <span class="token function">two_result</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> con <span class="token keyword">in</span> contents<span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 去第详情页,获取清晰度比较高的图片</span>
        result2 <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://pic.netbian.com/'</span> <span class="token operator">+</span> con<span class="token punctuation">)</span>
        result2<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'gbk'</span>
        res2 <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;a href="" id="img">&lt;img src="(.*?)" data-pic=".*?" alt="(.*?)" title=".*?">&lt;/a>"""</span>
        <span class="token comment" spellcheck="true"># 匹配符合正则内容</span>
        contents2 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>res2<span class="token punctuation">,</span> result2<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 真正处理数据并保存</span>
        save_result<span class="token punctuation">(</span>contents2<span class="token punctuation">)</span>


<span class="token comment" spellcheck="true"># 真正处理数据并保存</span>
<span class="token keyword">def</span> <span class="token function">save_result</span><span class="token punctuation">(</span>contents2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> con2 <span class="token keyword">in</span> contents2<span class="token punctuation">:</span>
        path <span class="token operator">=</span> con2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 图片真正的高清图片地址</span>
        name <span class="token operator">=</span> con2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 图片名称</span>
        <span class="token comment" spellcheck="true"># 拼接最后的图片地址,然后保存</span>
        result3 <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://pic.netbian.com/'</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>
        file <span class="token operator">=</span> <span class="token string">'D:\download\dongmanThreadImg\%s.jpg'</span> <span class="token operator">%</span> name
        <span class="token comment" spellcheck="true"># wb : 以二进制格式打开一个文件只用于写入。一般用于非文本文件如图片等。</span>
        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>result3<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 安全点就等待0.5秒再次爬取</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>


<span class="token comment" spellcheck="true"># 创建线程类</span>
<span class="token keyword">class</span> <span class="token class-name">myThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> threadID<span class="token punctuation">,</span> name<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>threadID <span class="token operator">=</span> threadID
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>url <span class="token operator">=</span> url

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始线程："</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># 得到网页响应结果</span>
            result <span class="token operator">=</span> get_result<span class="token punctuation">(</span>self<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
            <span class="token comment" spellcheck="true"># 处理详情页数据</span>
            two_result<span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程出现意外....'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"退出线程："</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载动漫图片开始--------------'</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 爬取前一百页内容</span>
    pageno <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token comment" spellcheck="true"># 1.请求网页,获取结果</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> pageno<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'解析处理第%d页数据 请稍等...'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 第一个和其他页有点不同,所以分开处理</span>
        url <span class="token operator">=</span> <span class="token string">''</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            url <span class="token operator">=</span> <span class="token string">"http://pic.netbian.com/4kdongman/index.html"</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            url <span class="token operator">=</span> <span class="token string">"http://pic.netbian.com/4kdongman/index_%d.html"</span> <span class="token operator">%</span> i
        <span class="token comment" spellcheck="true"># 开启线程,爬取几页就开启几个线程,量力而行</span>
        myThread<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"thread-"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 每次请求间隔0.5秒</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载动漫图片结束--------------'</span><span class="token punctuation">)</span>

</code></pre>
<p>秒开<code>100</code>线程,每个线程独自爬取,这还没反应过来, 就结束了,<br>我只能说好快</p>
<p>提示:最好还是把代码<code>try</code> 一下, 如果中间有意外,可以忽略,</p>
<p><img src="https://img-blog.csdnimg.cn/20200404174634627.png" alt=""></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的第一个web项目</title>
    <url>/2020/20200403-2/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/03/MalhamStars_ZH-CN4163177154_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>来一个<code>hello python</code> 吧</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>项目名称: <code>pythonwebdemo</code><br>应用名称: <code>webdemo</code></p>
<p><img src="https://img-blog.csdnimg.cn/20200403161246601.png" alt=""><br>完成之后,二话不多说,启动!!!<br><img src="https://img-blog.csdnimg.cn/20200403161454528.png" alt=""></p>
<p>然后点击默认地址 ,访问</p>
<p><img src="https://img-blog.csdnimg.cn/20200403161530711.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20200403161620674.png" alt=""><br>成功!</p>
<h2 id="hello页面"><a href="#hello页面" class="headerlink" title="hello页面"></a>hello页面</h2><p><code>urls.py</code> 文件修改<br>页面请求<code>hello</code>路径, 找到<code>views</code>中的<code>hello</code>接口</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin
<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path
<span class="token keyword">from</span> webdemo <span class="token keyword">import</span> views

urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span>r<span class="token string">'hello/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>hello<span class="token punctuation">)</span>
<span class="token punctuation">]</span></code></pre>
<p><code>views.py</code> 文件修改</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render


<span class="token comment" spellcheck="true"># Create your views here.</span>
<span class="token comment" spellcheck="true"># 将请求定位到hello.html中</span>
<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'hello.html'</span><span class="token punctuation">)</span>
</code></pre>
<p><code>templates</code> 文件夹下新增<code>hello.heml</code>页面</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span>
<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span>
<span class="token operator">&lt;</span>head<span class="token operator">></span>
    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>title<span class="token operator">></span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>
<span class="token operator">&lt;</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello Pyhton<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
<span class="token operator">&lt;</span>h2<span class="token operator">></span>Hello Pyhton<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
<span class="token operator">&lt;</span>h3<span class="token operator">></span>Hello Pyhton<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
<span class="token operator">&lt;</span>h4<span class="token operator">></span>Hello Pyhton<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">></span>
<span class="token operator">&lt;</span>h5<span class="token operator">></span>Hello Pyhton<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h5<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre>
<p>启动,<br>访问<a href="http://127.0.0.1:8000/hello/" target="_blank" rel="noopener">http://127.0.0.1:8000/hello/</a><br><img src="https://img-blog.csdnimg.cn/20200403163423335.png" alt=""></p>
<h2 id="加上数据库操作"><a href="#加上数据库操作" class="headerlink" title="加上数据库操作"></a>加上数据库操作</h2><p><code>settings.py</code> 文件修改<br>数据库默认的<code>sqlite</code>,其实这个数据库也不错,简单的保存也不需要密码啥的,就是性能不中<br>当初在写<code>epl</code>插件的时候,一般都是使用的<code>sqlite</code>,客户不需要安装数据库,直接本地生成了一个<code>.db</code>文件,简单了好多</p>
<p>下面时区和语言在下面搜索一下即可</p>
<pre class=" language-python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>
        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>
        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>
        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token number">3306</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh-hans'</span>

TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span>

</code></pre>
<p><code>urls.py</code> 文件修改</p>
<pre class=" language-python"><code class="language-python">    path<span class="token punctuation">(</span>r<span class="token string">'helloMysql/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>helloMysql<span class="token punctuation">)</span></code></pre>
<p><code>views.py</code> 文件修改<br>简简单单来个返回结果封装</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">helloMysql</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true"># '-createtime' 前面加-为倒序</span>
    userList <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-createtime'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>
    data<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>
    <span class="token comment" spellcheck="true"># 方式一</span>
    <span class="token comment" spellcheck="true"># data['result'] = json.loads(serializers.serialize('json', userList))</span>
    <span class="token comment" spellcheck="true"># 方式二</span>
    data<span class="token punctuation">[</span><span class="token string">'result'</span><span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">(</span>userList<span class="token punctuation">)</span>
    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>data<span class="token punctuation">,</span> safe<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> json_dumps_params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'ensure_ascii'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>项目路径找到<code>models.py</code>,修改</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models


<span class="token comment" spellcheck="true"># Create your models here.</span>
<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    id <span class="token operator">=</span> models<span class="token punctuation">.</span>AutoField<span class="token punctuation">(</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>
    age <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sex <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    createtime <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 指定数据库表名称</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        db_table <span class="token operator">=</span> <span class="token string">"tb_user"</span>

</code></pre>
<p>启动!!!  访问 <a href="http://127.0.0.1:8000/helloMysql/" target="_blank" rel="noopener">http://127.0.0.1:8000/helloMysql/</a><br>查看结果<br><img src="https://img-blog.csdnimg.cn/20200403210359645.png" alt=""></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python连接Mysql数据库Demo</title>
    <url>/2020/20200403/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/03/PlaceofRainbows_ZH-CN7878813025_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个必须要了解一下,<br>老保存到本地根本不是办法<br>简单的查询,新增,先了解基本写法</p>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>就算使用<code>java</code>也不会在代码创建数据库啥啥的,<br>所以这里都不去了解怎么在代码创建数据库,表之类的<br>直接手动去创建</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>tb_user<span class="token punctuation">`</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>tb_user<span class="token punctuation">`</span>  <span class="token punctuation">(</span>
  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'名字'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'性别,0未知,1男,2女'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'用户测试表'</span> ROW_FORMAT <span class="token operator">=</span> Compact<span class="token punctuation">;</span>
</code></pre>
<p>简简单单搞点数据</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>tb_user<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2020-04-03 11:03:03'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>tb_user<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'2020-04-03 11:03:13'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>tb_user<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'2020-04-03 11:03:24'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>tb_user<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2020-04-03 13:39:44'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><pre class=" language-python"><code class="language-python">
<span class="token comment" spellcheck="true"># @Author: GMaya</span>

<span class="token keyword">import</span> pymysql
<span class="token keyword">import</span> datetime

<span class="token comment" spellcheck="true"># 打开数据库连接</span>
db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>


<span class="token comment" spellcheck="true"># 查询方法</span>
<span class="token keyword">def</span> <span class="token function">seleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 使用cursor方法创建一个游标</span>
    cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sql <span class="token operator">=</span> <span class="token string">"select * from tb_user"</span>
    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>
    data <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>
        id <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        name <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        age <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
        sex <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
        createtime <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> createtime<span class="token punctuation">)</span>
    cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> data


<span class="token keyword">def</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> createTime<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 使用cursor方法创建一个游标</span>
    cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sql <span class="token operator">=</span> <span class="token string">"insert into tb_user(name,age,sex,createtime) values (%s,%s,%s,%s) "</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 执行sql语句;使用构造参数防止sql注入!</span>
        row <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> createTime<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"影响条数:%s"</span> <span class="token operator">%</span> row<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 提交到数据库执行</span>
        db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 发生错误时回滚</span>
        db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 关闭</span>
    cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 查询</span>
    <span class="token comment" spellcheck="true"># data = seleteUser()</span>
    <span class="token comment" spellcheck="true"># 新增</span>
    insertUser<span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="datetime-模块"><a href="#datetime-模块" class="headerlink" title="datetime 模块"></a>datetime 模块</h3><p><img src="https://img-blog.csdnimg.cn/20200403141633204.png" alt=""></p>
<p>获取当前时间年月日时分秒<br><code>now(…)</code>：返回当前日期时间的<code>datetime</code>对象</p>
<pre class=" language-python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h3 id="pymysql模块"><a href="#pymysql模块" class="headerlink" title="pymysql模块"></a>pymysql模块</h3><p>获取新增主键<code>id</code></p>
<pre class=" language-python"><code class="language-python">cursor<span class="token punctuation">.</span>lastrowid</code></pre>
<p>获取查询全部结果</p>
<pre class=" language-python"><code class="language-python">cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>获取查询结果第一条</p>
<pre class=" language-python"><code class="language-python">cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬取全球疫情Demo</title>
    <url>/2020/20200402-2/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/02/PascuaFlorida_ZH-CN7720904158_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>仅仅学习而已,不做其他非法操作.<br>习惯用小<code>demo</code>来熟练各种方法与技巧</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>进入腾讯新闻找到疫情入口<br><a href="https://news.qq.com/zt2020/page/feiyan.htm#/global" target="_blank" rel="noopener">https://news.qq.com/zt2020/page/feiyan.htm#/global</a><br>然后<code>F12</code>分析接口.<br>这对于<code>java</code>老鸟来说,分分钟找到.</p>
<pre class=" language-python"><code class="language-python">https<span class="token punctuation">:</span><span class="token operator">//</span>api<span class="token punctuation">.</span>inews<span class="token punctuation">.</span>qq<span class="token punctuation">.</span>com<span class="token operator">/</span>newsqa<span class="token operator">/</span>v1<span class="token operator">/</span>automation<span class="token operator">/</span>foreign<span class="token operator">/</span>country<span class="token operator">/</span>ranklist</code></pre>
<p>然后分析<code>json</code>,取什么值, 用什么.</p>
<h2 id="撸代码"><a href="#撸代码" class="headerlink" title="撸代码"></a>撸代码</h2><h3 id="装工具"><a href="#装工具" class="headerlink" title="装工具"></a>装工具</h3><p>由于是从<code>0</code>开始学的<code>python</code>,所以什么也没有,<br>只有一个<code>python</code>环境,所以直接来到jb家<a href="https://www.jetbrains.com/" target="_blank" rel="noopener">jetbrains</a>,撸一个<code>pycharm</code>, 用过<code>idea</code>的都知道,直接和<code>idea</code>安装方式一样,一毛一样!!!</p>
<h3 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h3><p>进来不多说, 一个<code>hello</code>例子必须要有</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># @Author: GMaya</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello word!'</span><span class="token punctuation">)</span>
</code></pre>
<p>右键执行<br><img src="https://img-blog.csdnimg.cn/20200402202028116.png" alt=""></p>
<h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><p>想要访问互联网, 你不得一个<code>requests</code>请求么?<br>刚好,导入这个<br>在<code>python</code>安装目录 –&gt; <code>Scripts</code> 包下,进入<code>cmd</code><br>输入</p>
<pre class=" language-python"><code class="language-python">pip install requests</code></pre>
<p>等待安装完成!<br>然后在<code>ide</code>里面设置引入<br><img src="https://img-blog.csdnimg.cn/2020040220292135.png" alt=""></p>
<h3 id="访问接口"><a href="#访问接口" class="headerlink" title="访问接口"></a>访问接口</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># @Author: GMaya</span>
<span class="token keyword">import</span> requests

<span class="token comment" spellcheck="true"># 创建会话对象</span>
session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 请求接口</span>
result <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.inews.qq.com/newsqa/v1/automation/foreign/country/ranklist'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 打印结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/2020040220394210.png" alt=""><br>握草,真是方便快捷狠啊</p>
<p>走一步学一部,看下这个<code>requests</code>包是啥</p>
<blockquote>
<p>Requests为Python处理了所有HTTP/1.1操作， 与Web服务的无缝集成。不需要为URL手动添加查询字符串或POST数据进行表单处理。基于urllib3, 能自动处理Keep-alive和HTTP连接池。</p>
</blockquote>
<p>此处 自行百度学习了小半个小时,以后用到复杂的再说.</p>
<h3 id="处理结果"><a href="#处理结果" class="headerlink" title="处理结果"></a>处理结果</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># @Author: GMaya</span>
<span class="token keyword">import</span> requests<span class="token punctuation">,</span> json<span class="token punctuation">,</span> jsonpath

<span class="token comment" spellcheck="true"># 创建会话对象</span>
session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 请求接口</span>
result <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.inews.qq.com/newsqa/v1/automation/foreign/country/ranklist'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 打印结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 解析json结果</span>
resJson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
data <span class="token operator">=</span> jsonpath<span class="token punctuation">.</span>jsonpath<span class="token punctuation">(</span>resJson<span class="token punctuation">,</span> <span class="token string">'$.data.*'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>
    res <span class="token operator">=</span> <span class="token string">'日期:'</span> <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'--'</span> <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token string">'continent'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'--'</span> <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'--'</span> <span class="token operator">+</span> <span class="token string">'新增确诊:'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>
        d<span class="token punctuation">[</span><span class="token string">'confirmAdd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'累计确诊:'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'confirm'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'治愈:'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'heal'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'死亡:'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'dead'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 保存数据到我的d盘</span>
    file <span class="token operator">=</span> <span class="token string">'D:\download\global-yq.txt'</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>res <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 加\n换行显示</span>
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200402220637483.png" alt=""><br>结果已经保存到本地文本里面了.<br>有不懂的命令直接文档里面找,还是很容易的<br><a href="https://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">文档连接</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python你好!</title>
    <url>/2020/20200402/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/04/02/ShyGuy_ZH-CN7391687938_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这年头,谁不是熟悉好几个语言!<br>HTML是不是语言!   超文本标记语言&lt;/邪笑&gt;</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>百度搜索<code>Python</code>进入官网<a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a><br><img src="https://img-blog.csdnimg.cn/20200402160640863.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20200402160716709.png" alt=""></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>双击打开安装包, 注意选择第二个,自定义安装, 谁吧我的软件安装到<code>c</code>盘,我跟谁急<br>下面还有一个<code>add python</code> 勾上! 这样就不需要配置环境变量了.<br>其他的都默认,<code>go</code>!<br>完成!</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><code>cmd</code>进入,输入<code>python</code><br><img src="https://img-blog.csdnimg.cn/2020040216125876.png" alt=""><br>输入</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello python!!"</span><span class="token punctuation">)</span></code></pre>
<p>退出<br>按<code>ctrl+z</code>,回车</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务@Scheduled入门</title>
    <url>/2020/20200330/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/30/WalkingCentral_ZH-CN6818231087_1920x1080.jpg) -->
<a id="more"></a>
<p>一个最简单的例子:<br>启动类添加注解</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableScheduling</span> <span class="token comment" spellcheck="true">// 开启定时任务</span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200330113812718.png" alt=""></p>
<h2 id="编写单线程demo"><a href="#编写单线程demo" class="headerlink" title="编写单线程demo"></a>编写单线程demo</h2><p><img src="https://img-blog.csdnimg.cn/20200330135435331.png" alt=""></p>
<h3 id="cron-表达式"><a href="#cron-表达式" class="headerlink" title="cron 表达式"></a>cron 表达式</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
     * cron 表达式
     * 每2秒执行一次
     * @throws InterruptedException
     */</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0/2 * * * * *"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 经过测试,使用cron表达式,定时任务第二次会等待第一次执行完毕再开始!</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>5000L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"定时任务测试cron:"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h3 id="fixedDelay"><a href="#fixedDelay" class="headerlink" title="fixedDelay"></a>fixedDelay</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**
     *  fixedDelay:
     *  第一次执行完毕才会执行第二次，时间间隔变为了7秒
     * @throws InterruptedException
     */</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> 2000L<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>5000L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"定时任务测试fixedDelay:"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/2020033014024565.png" alt=""></p>
<h3 id="fixedRate"><a href="#fixedRate" class="headerlink" title="fixedRate"></a>fixedRate</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**
     *  fixedRate:
     *  每隔2秒就会执行, 但是因为单线程,所以在5秒后会输出,间隔就是5秒
     * @throws InterruptedException
     */</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> 2000L<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>5000L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"定时任务测试fixedRate:"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200330140036576.png" alt=""><br>如果是一起执行这三个定时任务,那么会一个一个的来, 因为只有一个线程.</p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 *
 * @author GMaya
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableAsync</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduleConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> TaskScheduler <span class="token function">taskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ThreadPoolTaskScheduler taskScheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        taskScheduler<span class="token punctuation">.</span><span class="token function">setPoolSize</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置线程池大小</span>
        <span class="token keyword">return</span> taskScheduler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>如果只是加这一个配置类, 确实是使用了多线程, 每个定时任务都互相不影响.<br>但是一个线程第一次阻塞了,第二次就不行了,所以在定时任务上再加</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Async</span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/202003301418328.png" alt=""><br>就是说你这次失败了, 不要影响我下次的运行<br><img src="https://img-blog.csdnimg.cn/20200330141948593.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>Scheduled</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud 整合最新版seata分布式事务 (六)</title>
    <url>/2020/20200327-2/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/27/CharlestonAzaleas_ZH-CN3924268565_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在我有 订单系统, 支付系统.注册中心<br>每个系统都是单独的,事务也都是本地事务,也是独立的.那么问题来了.<br>我—&gt;订单系统–&gt;支付系统.–&gt;订单系统—&gt;我<br>支付系统成功了 ,自己的事务也提交了.<br>到订单系统结果失败了.(结果就是钱付了,订单还未支付.)这样就存在了问题呀.<br>更多的问题也存在库存系统,加库存,改订单状态,支付等等,每个单独的模块事务怎么保持统一呢!!</p>
<h2 id="seata-介绍"><a href="#seata-介绍" class="headerlink" title="seata 介绍"></a>seata 介绍</h2><blockquote>
<p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案.</p>
</blockquote>
<p>seata各种官方例子连接:<a href="https://github.com/seata/seata-samples" target="_blank" rel="noopener">https://github.com/seata/seata-samples</a><br>seata服务端下载链接:<a href="https://github.com/seata/seata/releases" target="_blank" rel="noopener">https://github.com/seata/seata/releases</a></p>
<p>根据例子,我搞了好久好久好久好久好久才把例子跑起来.我也是服了,中间各种问题,网上的答案都尼玛一模一样!,人家都能成功,我就失败.郁闷死了.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.下载官方的服务端<code>seata-server</code><br>2.下载官方客户端例子(我选的是<code>springcloud-eureka-feign-mybatis-seata</code>)<br>3.修改配置.<br>4.启动.<br>5.哪里错改哪里!<br>前4步也就半个小时,顶多俩小时,<code>ok</code>了.<br>第5步鬼知道多长时间.</p>
<p>我结合官方<code>demo</code>,整合到自己的项目中去.以及中间遇到的问题记录</p>
<h2 id="seata服务端"><a href="#seata服务端" class="headerlink" title="seata服务端"></a>seata服务端</h2><h3 id="下载seata服务端"><a href="#下载seata服务端" class="headerlink" title="下载seata服务端"></a>下载seata服务端</h3><p><code>seata</code>服务端下载链接:<a href="https://github.com/seata/seata/releases" target="_blank" rel="noopener">https://github.com/seata/seata/releases</a><br>我选的是最新的<code>v1.1.0</code>版本,下载到本地即可<br><img src="https://img-blog.csdnimg.cn/20200327132932324.png" alt=""></p>
<h3 id="修改seata配置"><a href="#修改seata配置" class="headerlink" title="修改seata配置"></a>修改seata配置</h3><p>我这里就说<code>win</code>下怎么启动:<br>首先修改目录下的<code>conf</code>中的配置<br><strong>file.conf</strong><br>其中我没有使用<code>db</code>方式, 使用的默认<code>file</code>方式,应该不需要修改</p>
<pre class=" language-java"><code class="language-java">
## transaction log store<span class="token punctuation">,</span> only used in seata<span class="token operator">-</span>server
store <span class="token punctuation">{</span>
  ## store mode<span class="token operator">:</span> file、db
  mode <span class="token operator">=</span> <span class="token string">"file"</span>

  ## file store property
  file <span class="token punctuation">{</span>
    ## store location dir
    dir <span class="token operator">=</span> <span class="token string">"sessionStore"</span>
    # branch session size <span class="token punctuation">,</span> <span class="token keyword">if</span> exceeded first <span class="token keyword">try</span> compress lockkey<span class="token punctuation">,</span> still exceeded <span class="token keyword">throws</span> exceptions
    maxBranchSessionSize <span class="token operator">=</span> <span class="token number">16384</span>
    # globe session size <span class="token punctuation">,</span> <span class="token keyword">if</span> exceeded <span class="token keyword">throws</span> exceptions
    maxGlobalSessionSize <span class="token operator">=</span> <span class="token number">512</span>
    # file buffer size <span class="token punctuation">,</span> <span class="token keyword">if</span> exceeded allocate <span class="token keyword">new</span> <span class="token class-name">buffer</span>
    fileWriteBufferCacheSize <span class="token operator">=</span> <span class="token number">16384</span>
    # when recover batch read size
    sessionReloadReadSize <span class="token operator">=</span> <span class="token number">100</span>
    # async<span class="token punctuation">,</span> sync
    flushDiskMode <span class="token operator">=</span> async
  <span class="token punctuation">}</span>

  ## database store property
  db <span class="token punctuation">{</span>
    ## the implement of javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">,</span> such as <span class="token function">DruidDataSource</span><span class="token punctuation">(</span>druid<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">BasicDataSource</span><span class="token punctuation">(</span>dbcp<span class="token punctuation">)</span> etc<span class="token punctuation">.</span>
    datasource <span class="token operator">=</span> <span class="token string">"dbcp"</span>
    ## mysql<span class="token operator">/</span>oracle<span class="token operator">/</span>h2<span class="token operator">/</span>oceanbase etc<span class="token punctuation">.</span>
    dbType <span class="token operator">=</span> <span class="token string">"mysql"</span>
    driverClassName <span class="token operator">=</span> <span class="token string">"com.mysql.jdbc.Driver"</span>
    url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/seata"</span>
    user <span class="token operator">=</span> <span class="token string">"mysql"</span>
    password <span class="token operator">=</span> <span class="token string">"mysql"</span>
    minConn <span class="token operator">=</span> <span class="token number">1</span>
    maxConn <span class="token operator">=</span> <span class="token number">10</span>
    globalTable <span class="token operator">=</span> <span class="token string">"global_table"</span>
    branchTable <span class="token operator">=</span> <span class="token string">"branch_table"</span>
    lockTable <span class="token operator">=</span> <span class="token string">"lock_table"</span>
    queryLimit <span class="token operator">=</span> <span class="token number">100</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>registry.conf</strong><br>我使用的类型是<code>eureka</code>,配置上之前的注册中心地址</p>
<pre class=" language-java"><code class="language-java">registry <span class="token punctuation">{</span>
  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa
  type <span class="token operator">=</span> <span class="token string">"eureka"</span>
  eureka <span class="token punctuation">{</span>
    serviceUrl <span class="token operator">=</span> <span class="token string">"http://server01:8761/eureka/"</span>
    application <span class="token operator">=</span> <span class="token string">"default"</span>
    weight <span class="token operator">=</span> <span class="token string">"1"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

config <span class="token punctuation">{</span>
  # file、nacos 、apollo、zk、consul、etcd3
  type <span class="token operator">=</span> <span class="token string">"file"</span>
  file <span class="token punctuation">{</span>
    name <span class="token operator">=</span> <span class="token string">"file.conf"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="启动seata服务端"><a href="#启动seata服务端" class="headerlink" title="启动seata服务端"></a>启动seata服务端</h3><p>修改完毕,首先启动你的注册中心<code>eureka</code>,然后启动这个<code>seata</code>服务端<br>首先进入<code>bin</code>目录<br><code>seata-server.bat</code>  这个是<code>win</code>命令,<br>在这个目录进入<code>cmd</code>, 将这个文件拖进窗口,输入</p>
<pre class=" language-java"><code class="language-java"> <span class="token operator">-</span>h <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token operator">-</span>p <span class="token number">8091</span> <span class="token operator">-</span>m file</code></pre>
<p>最终效果:<br><img src="https://img-blog.csdnimg.cn/20200327134047773.png" alt=""><br>脚本参数:<br><code>-p</code>:指定启动<code>seata server</code>的端口号。<br><code>-h</code>:指定<code>seata server</code>所绑定的主机<br><code>-m</code>:指定事务日志、事务执行信息存储的方式，目前支持<code>file</code>（文件方式）、<code>db</code>（数据库方式)</p>
<p><strong>这个地方我遇到的问题:</strong><br>第一个:我没有指定主机,然后和后面的配置里面对应不上,显示连接不上<code>seata server</code>服务.</p>
<h2 id="导入jar"><a href="#导入jar" class="headerlink" title="导入jar"></a>导入jar</h2><pre class=" language-java"><code class="language-java">        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>seata<span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>alibaba<span class="token operator">-</span>seata<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.1</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre>
<h2 id="修改自己项目的配置"><a href="#修改自己项目的配置" class="headerlink" title="修改自己项目的配置"></a>修改自己项目的配置</h2><p>新增两个配置文件,每个模块里面都需要,先修改一个,然后拷贝过去就行了<br><img src="https://img-blog.csdnimg.cn/20200327134824680.png" alt=""></p>
<h3 id="file-conf-文件"><a href="#file-conf-文件" class="headerlink" title="file.conf 文件"></a>file.conf 文件</h3><p>其中大部分是默认的,只需要修改一个地方</p>
<pre class=" language-java"><code class="language-java">service <span class="token punctuation">{</span>
  #transaction service group mapping
  vgroup_mapping<span class="token punctuation">.</span>tx <span class="token operator">=</span> <span class="token string">"default"</span>
  #only support when registry<span class="token punctuation">.</span>type<span class="token operator">=</span>file<span class="token punctuation">,</span> please don't set multiple addresses
  <span class="token keyword">default</span><span class="token punctuation">.</span>grouplist <span class="token operator">=</span> <span class="token string">"127.0.0.1:8091"</span>
  #degrade<span class="token punctuation">,</span> current not support
  enableDegrade <span class="token operator">=</span> <span class="token boolean">false</span>
  #disable seata
  disableGlobalTransaction <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span></code></pre>
<p>注意,这个<code>tx</code>这个名字可以自己改,但是<code>application.yml</code>中一定要与之对应,往下看<br><img src="https://img-blog.csdnimg.cn/20200327135329393.png" alt=""></p>
<p>完整的<code>file.conf</code> 文件</p>
<pre class=" language-java"><code class="language-java">transport <span class="token punctuation">{</span>
  # tcp udt unix<span class="token operator">-</span>domain<span class="token operator">-</span>socket
  type <span class="token operator">=</span> <span class="token string">"TCP"</span>
  #NIO NATIVE
  server <span class="token operator">=</span> <span class="token string">"NIO"</span>
  #enable heartbeat
  heartbeat <span class="token operator">=</span> <span class="token boolean">true</span>
  # the client batch send request enable
  enableClientBatchSendRequest <span class="token operator">=</span> <span class="token boolean">true</span>
  #thread factory <span class="token keyword">for</span> netty
  threadFactory <span class="token punctuation">{</span>
    bossThreadPrefix <span class="token operator">=</span> <span class="token string">"NettyBoss"</span>
    workerThreadPrefix <span class="token operator">=</span> <span class="token string">"NettyServerNIOWorker"</span>
    serverExecutorThread<span class="token operator">-</span>prefix <span class="token operator">=</span> <span class="token string">"NettyServerBizHandler"</span>
    shareBossWorker <span class="token operator">=</span> <span class="token boolean">false</span>
    clientSelectorThreadPrefix <span class="token operator">=</span> <span class="token string">"NettyClientSelector"</span>
    clientSelectorThreadSize <span class="token operator">=</span> <span class="token number">1</span>
    clientWorkerThreadPrefix <span class="token operator">=</span> <span class="token string">"NettyClientWorkerThread"</span>
    # netty boss thread size<span class="token punctuation">,</span>will not be used <span class="token keyword">for</span> UDT
    bossThreadSize <span class="token operator">=</span> <span class="token number">1</span>
    #auto <span class="token keyword">default</span> pin or <span class="token number">8</span>
    workerThreadSize <span class="token operator">=</span> <span class="token string">"default"</span>
  <span class="token punctuation">}</span>
  shutdown <span class="token punctuation">{</span>
    # when destroy server<span class="token punctuation">,</span> wait seconds
    wait <span class="token operator">=</span> <span class="token number">3</span>
  <span class="token punctuation">}</span>
  serialization <span class="token operator">=</span> <span class="token string">"seata"</span>
  compressor <span class="token operator">=</span> <span class="token string">"none"</span>
<span class="token punctuation">}</span>
service <span class="token punctuation">{</span>
  #transaction service group mapping
  vgroup_mapping<span class="token punctuation">.</span>tx <span class="token operator">=</span> <span class="token string">"default"</span>
  #only support when registry<span class="token punctuation">.</span>type<span class="token operator">=</span>file<span class="token punctuation">,</span> please don't set multiple addresses
  <span class="token keyword">default</span><span class="token punctuation">.</span>grouplist <span class="token operator">=</span> <span class="token string">"127.0.0.1:8091"</span>
  #degrade<span class="token punctuation">,</span> current not support
  enableDegrade <span class="token operator">=</span> <span class="token boolean">false</span>
  #disable seata
  disableGlobalTransaction <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

client <span class="token punctuation">{</span>
  rm <span class="token punctuation">{</span>
    asyncCommitBufferLimit <span class="token operator">=</span> <span class="token number">10000</span>
    lock <span class="token punctuation">{</span>
      retryInterval <span class="token operator">=</span> <span class="token number">10</span>
      retryTimes <span class="token operator">=</span> <span class="token number">30</span>
      retryPolicyBranchRollbackOnConflict <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    reportRetryCount <span class="token operator">=</span> <span class="token number">5</span>
    tableMetaCheckEnable <span class="token operator">=</span> <span class="token boolean">false</span>
    reportSuccessEnable <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  tm <span class="token punctuation">{</span>
    commitRetryCount <span class="token operator">=</span> <span class="token number">5</span>
    rollbackRetryCount <span class="token operator">=</span> <span class="token number">5</span>
  <span class="token punctuation">}</span>
  undo <span class="token punctuation">{</span>
    dataValidation <span class="token operator">=</span> <span class="token boolean">true</span>
    logSerialization <span class="token operator">=</span> <span class="token string">"jackson"</span>
    logTable <span class="token operator">=</span> <span class="token string">"undo_log"</span>
  <span class="token punctuation">}</span>
  log <span class="token punctuation">{</span>
    exceptionRate <span class="token operator">=</span> <span class="token number">100</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="registry-conf文件"><a href="#registry-conf文件" class="headerlink" title="registry.conf文件"></a>registry.conf文件</h3><p>注册选择<code>type</code> = <code>eureka</code>,然后配置<code>eureka</code>地址即可</p>
<pre class=" language-java"><code class="language-java">registry <span class="token punctuation">{</span>
  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa
  type <span class="token operator">=</span> <span class="token string">"eureka"</span>

  nacos <span class="token punctuation">{</span>
    serverAddr <span class="token operator">=</span> <span class="token string">"localhost"</span>
    namespace <span class="token operator">=</span> <span class="token string">""</span>
    cluster <span class="token operator">=</span> <span class="token string">"default"</span>
  <span class="token punctuation">}</span>
  eureka <span class="token punctuation">{</span>
    serviceUrl <span class="token operator">=</span> <span class="token string">"http://server01:8761/eureka/"</span>
    application <span class="token operator">=</span> <span class="token string">"default"</span>
    weight <span class="token operator">=</span> <span class="token string">"1"</span>
  <span class="token punctuation">}</span>
  redis <span class="token punctuation">{</span>
    serverAddr <span class="token operator">=</span> <span class="token string">"localhost:6379"</span>
    db <span class="token operator">=</span> <span class="token string">"0"</span>
    password <span class="token operator">=</span> <span class="token string">""</span>
    cluster <span class="token operator">=</span> <span class="token string">"default"</span>
    timeout <span class="token operator">=</span> <span class="token string">"0"</span>
  <span class="token punctuation">}</span>
  zk <span class="token punctuation">{</span>
    cluster <span class="token operator">=</span> <span class="token string">"default"</span>
    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:2181"</span>
    session<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">6000</span>
    connect<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">2000</span>
    username <span class="token operator">=</span> <span class="token string">""</span>
    password <span class="token operator">=</span> <span class="token string">""</span>
  <span class="token punctuation">}</span>
  consul <span class="token punctuation">{</span>
    cluster <span class="token operator">=</span> <span class="token string">"default"</span>
    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:8500"</span>
  <span class="token punctuation">}</span>
  etcd3 <span class="token punctuation">{</span>
    cluster <span class="token operator">=</span> <span class="token string">"default"</span>
    serverAddr <span class="token operator">=</span> <span class="token string">"http://localhost:2379"</span>
  <span class="token punctuation">}</span>
  sofa <span class="token punctuation">{</span>
    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:9603"</span>
    application <span class="token operator">=</span> <span class="token string">"default"</span>
    region <span class="token operator">=</span> <span class="token string">"DEFAULT_ZONE"</span>
    datacenter <span class="token operator">=</span> <span class="token string">"DefaultDataCenter"</span>
    cluster <span class="token operator">=</span> <span class="token string">"default"</span>
    group <span class="token operator">=</span> <span class="token string">"SEATA_GROUP"</span>
    addressWaitTime <span class="token operator">=</span> <span class="token string">"3000"</span>
  <span class="token punctuation">}</span>
  file <span class="token punctuation">{</span>
    name <span class="token operator">=</span> <span class="token string">"file.conf"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

config <span class="token punctuation">{</span>
  # file、nacos 、apollo、zk、consul、etcd3、springCloudConfig
  type <span class="token operator">=</span> <span class="token string">"file"</span>

  nacos <span class="token punctuation">{</span>
    serverAddr <span class="token operator">=</span> <span class="token string">"localhost"</span>
    namespace <span class="token operator">=</span> <span class="token string">""</span>
    group <span class="token operator">=</span> <span class="token string">"SEATA_GROUP"</span>
  <span class="token punctuation">}</span>
  consul <span class="token punctuation">{</span>
    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:8500"</span>
  <span class="token punctuation">}</span>
  apollo <span class="token punctuation">{</span>
    app<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"seata-server"</span>
    apollo<span class="token punctuation">.</span>meta <span class="token operator">=</span> <span class="token string">"http://192.168.1.204:8801"</span>
    namespace <span class="token operator">=</span> <span class="token string">"application"</span>
  <span class="token punctuation">}</span>
  zk <span class="token punctuation">{</span>
    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:2181"</span>
    session<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">6000</span>
    connect<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">2000</span>
    username <span class="token operator">=</span> <span class="token string">""</span>
    password <span class="token operator">=</span> <span class="token string">""</span>
  <span class="token punctuation">}</span>
  etcd3 <span class="token punctuation">{</span>
    serverAddr <span class="token operator">=</span> <span class="token string">"http://localhost:2379"</span>
  <span class="token punctuation">}</span>
  file <span class="token punctuation">{</span>
    name <span class="token operator">=</span> <span class="token string">"file.conf"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="修改application-yml"><a href="#修改application-yml" class="headerlink" title="修改application.yml"></a>修改application.yml</h3><p><strong>第一个方式:</strong><br>注意,这个<code>tx-service-group</code>: 后面的<code>tx</code>一定要和上面配置中的<code>tx</code>一样.<strong>一定一定要一样</strong></p>
<pre class=" language-java"><code class="language-java">spring<span class="token operator">:</span>
  cloud<span class="token operator">:</span>
    alibaba<span class="token operator">:</span>
      seata<span class="token operator">:</span>
        tx<span class="token operator">-</span>service<span class="token operator">-</span>group<span class="token operator">:</span> tx</code></pre>
<p><strong>第二个方式:</strong></p>
<p><code>application.yml</code>这个文件不指定<code>tx-service-group</code>,那么<code>file.conf</code>这个文件的<code>vgroup_mapping.tx</code>就必须修改为<code>seata</code>默认的形式<br>在这个源码中可以看到,如果你没有定义,那么你这个<code>file.conf</code>配置中必须设置为<code>applicationName</code> + “<code>-fescar-service-group</code>“<br>举例:我这个项目就必须设置为<code>order-fescar-service-group</code></p>
<pre class=" language-java"><code class="language-java">spring<span class="token operator">:</span>
  application<span class="token operator">:</span>
    name<span class="token operator">:</span> order</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200327140048543.png" alt=""><br>都是坑踩出来的…………..</p>
<h3 id="新增数据源配置"><a href="#新增数据源配置" class="headerlink" title="新增数据源配置"></a>新增数据源配置</h3><p>一开始我最下面的<code>mybatis</code>的配置没有注释,就会发生添加语句执行找不到<code>mapper</code><br>注释掉就可以了.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>order<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>rm<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>DataSourceProxy<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>SqlSessionFactoryBean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>SpringManagedTransactionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Primary<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>support<span class="token punctuation">.</span>PathMatchingResourcePatternResolver<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 数据源代理
 * @author GMaya
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DataSource <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        DruidDataSource druidDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> druidDataSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Primary</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DataSourceProxy <span class="token function">dataSource</span><span class="token punctuation">(</span>DataSource druidDataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProxy</span><span class="token punctuation">(</span>druidDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">/*  @Bean
    public SqlSessionFactory sqlSessionFactory(DataSourceProxy dataSourceProxy)throws Exception{
        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();
        sqlSessionFactoryBean.setDataSource(dataSourceProxy);
        sqlSessionFactoryBean.setMapperLocations(new PathMatchingResourcePatternResolver()
                .getResources("classpath*:/mapper/*.xml"));
        sqlSessionFactoryBean.setTransactionFactory(new SpringManagedTransactionFactory());
        return sqlSessionFactoryBean.getObject();
    }*/</span>

<span class="token punctuation">}</span>
</code></pre>
<h3 id="修改启动类"><a href="#修改启动类" class="headerlink" title="修改启动类"></a>修改启动类</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> DataSourceAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></code></pre>
<p>修改完将以上操作在<code>pay</code>中复制.</p>
<h3 id="数据库新增表"><a href="#数据库新增表" class="headerlink" title="数据库新增表"></a>数据库新增表</h3><p>因为我是模拟的, 所以,只要是操作数据库就行了,就没弄多个库,在一个数据库,一个表<code>tb_user</code><br>此时在加一个<code>seata</code>需要的表<code>undo_log</code></p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ----------------------------</span>
<span class="token comment" spellcheck="true">-- Table structure for undo_log</span>
<span class="token comment" spellcheck="true">-- ----------------------------</span>
<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>undo_log<span class="token punctuation">`</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>undo_log<span class="token punctuation">`</span>  <span class="token punctuation">(</span>
  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>xid<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>context<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>rollback_info<span class="token punctuation">`</span> <span class="token keyword">longblob</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>log_status<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>log_created<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>log_modified<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>ext<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>
  <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> <span class="token punctuation">`</span>ux_undo_log<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">7</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Compact<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- ----------------------------</span>
<span class="token comment" spellcheck="true">-- Records of undo_log</span>
<span class="token comment" spellcheck="true">-- ----------------------------</span>

<span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><code>order</code>中调用<code>pay</code>创建一条数据,然后自己在创建一条语句.<br>在<code>order</code>方法上加上注解</p>
<pre class=" language-sql"><code class="language-sql"><span class="token variable">@GlobalTransactional</span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/2020032714194427.png" alt=""><br>启动<code>order</code> 启动<code>pay</code>,<br>测试!</p>
<p><code>pay</code>日志:<br>添加数据成功没错,但是结果回滚了<br><img src="https://img-blog.csdnimg.cn/20200327142124397.png" alt=""><br><code>order</code>日志:<br><img src="https://img-blog.csdnimg.cn/20200327142247204.png" alt=""><br>最终数据库还是没有添加进去</p>
<p><strong>再测:</strong><br>调用订单–&gt;先本地添加数据, 然后在调用支付,让支付失败,看订单是否回滚<br>测试结果还是回滚.<br><img src="https://img-blog.csdnimg.cn/20200327142918573.png" alt=""><br>自己一步一步一步一步敲出来的,希望我下次不要遇到这些问题.</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>seata</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud 整合mybatis-plus (五)</title>
    <url>/2020/20200327/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/27/SpainBeeEaters_ZH-CN2414526119_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实这个整合,和<code>spring</code> 或者 <code>spring boot</code> 整合一样的<br>其实都是一键生成的,自己把模板配好就行,从<code>controller</code>到<code>service</code>,<code>dao</code>,实体,增删改查<br>我只是拷贝过来几个测试这个项目<br>之前刚接触<code>mybatis-plus</code>的时候也写过自动生成的文章</p>
<h2 id="引入jar"><a href="#引入jar" class="headerlink" title="引入jar"></a>引入jar</h2><pre class=" language-sql"><code class="language-sql">        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.0</span><span class="token punctuation">.</span><span class="token number">7.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
            <span class="token operator">&lt;</span>exclusions<span class="token operator">></span>
                <span class="token operator">&lt;</span>exclusion<span class="token operator">></span>
                    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
                    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>generator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>exclusion<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>exclusions<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
            <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>我<code>mysql</code>数据库<code>8.0</code>以上的,如果你的是<code>5.+</code>的版本,自己该数据源即可</p>
<pre class=" language-java"><code class="language-java">spring<span class="token operator">:</span>
  application<span class="token operator">:</span>
    name<span class="token operator">:</span> order
  datasource<span class="token operator">:</span>
    driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">:</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver
    url<span class="token operator">:</span> jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>gmaya<span class="token operator">?</span>allowMultiQueries<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&amp;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>serverTimezone<span class="token operator">=</span>GMT<span class="token operator">%</span>2B8
    username<span class="token operator">:</span> root
    password<span class="token operator">:</span> admin
#mybatis<span class="token operator">-</span>plus
mybatis<span class="token operator">-</span>plus<span class="token operator">:</span>
  mapper<span class="token operator">-</span>locations<span class="token operator">:</span> classpath<span class="token operator">:</span><span class="token operator">/</span>mapper<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>xml
  typeAliasesPackage<span class="token operator">:</span> com<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>order<span class="token punctuation">.</span>entity
  global<span class="token operator">-</span>config<span class="token operator">:</span>
    db<span class="token operator">-</span>config<span class="token operator">:</span>
      id<span class="token operator">-</span>type<span class="token operator">:</span> AUTO
      field<span class="token operator">-</span>strategy<span class="token operator">:</span> NOT_NULL
      column<span class="token operator">-</span>underline<span class="token operator">:</span> <span class="token boolean">true</span>
      logic<span class="token operator">-</span>delete<span class="token operator">-</span>value<span class="token operator">:</span> <span class="token number">1</span> # 数据库删除字段<span class="token punctuation">,</span><span class="token number">1</span>代表删除
      logic<span class="token operator">-</span>not<span class="token operator">-</span>delete<span class="token operator">-</span>value<span class="token operator">:</span> <span class="token number">0</span> # <span class="token number">0</span>代表没删除
    banner<span class="token operator">:</span> <span class="token boolean">false</span></code></pre>
<h2 id="新增配置类"><a href="#新增配置类" class="headerlink" title="新增配置类"></a>新增配置类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>order<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>injector<span class="token punctuation">.</span>ISqlInjector<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>injector<span class="token punctuation">.</span>LogicSqlInjector<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>OptimisticLockerInterceptor<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>PaginationInterceptor<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * mybatis-plus配置
 *
 * @author GMaya
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 分页插件
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 控制逻辑删除
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> ISqlInjector <span class="token function">sqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LogicSqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 控制版本号
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> OptimisticLockerInterceptor <span class="token function">optimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>order<span class="token punctuation">.</span>entity<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>TableId<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>TableLogic<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>TableName<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Version<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * DO
 *
 * @author GMaya
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"tb_user"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 用户id
     */</span>
    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 用户名称
     */</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 用户年龄
     */</span>
    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 是否删除。0未删除，1删除
     */</span>
    <span class="token annotation punctuation">@TableLogic</span>
    <span class="token keyword">private</span> Integer isDtl<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 版本号
     */</span>
    <span class="token annotation punctuation">@Version</span>
    <span class="token keyword">private</span> Integer version<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre>
<h2 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>order<span class="token punctuation">.</span>dao<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>BaseMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>order<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>UserEntity<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>UserEntity<span class="token operator">></span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre>
<h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>order<span class="token punctuation">.</span>service<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span>IService<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>order<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>UserEntity<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 服务类
 * @author GMaya
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token operator">&lt;</span>UserEntity<span class="token operator">></span> <span class="token punctuation">{</span>

    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span>JSONObject jsonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="impl"><a href="#impl" class="headerlink" title="impl"></a>impl</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>order<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>ServiceImpl<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>order<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>UserDao<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>order<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>UserEntity<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>order<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 *
 * @author GMaya
 */</span>
<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>UserDao<span class="token punctuation">,</span> UserEntity<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span>JSONObject jsonObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"log...订单开始......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        UserEntity userEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userEntity<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userEntity<span class="token punctuation">.</span><span class="token function">setIsDtl</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userEntity<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userEntity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"订单模拟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> insert <span class="token operator">=</span> baseMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>userEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"log...订单结束......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> insert<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Mybatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>使用redis实现序列号工具类</title>
    <url>/2020/20200323/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/23/LenticularVideo_ZH-CN2275732856_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>项目中难免会带有字符的序列号,有的是每月从<code>1</code>开始, 有的是每天等等.<br>以前也使用过存表的方式,每次获取之后加<code>1</code>.<br>这次又了解了一个.记录一下<br><code>redis</code>为单线程，不存在线程安全问题.</p>
<p>序列号工具类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>EurekaClient<span class="token punctuation">.</span>util<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>support<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>RedisAtomicLong<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 序列号工具类
 * @author GMaya
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SequenceUtil</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 获取序列号
     * 例子：假如需要获取订单号NO20200320000001等数据，前缀NO，后面的每天从1开始自增
     * 调用getCode("NO") 返回 202003200000001,0的个数根据自己业务量设置
     * 自己将返回的字符串再次拼接上NO即可！序列号 = 'NO'+getCode("NO")
     * @param keyPrefix 关键词前缀
     * @return 序列号
     */</span>
    <span class="token keyword">public</span> String <span class="token function">getCode</span><span class="token punctuation">(</span>String keyPrefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 当前日期加填充完0的值</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyyMMdd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getSequence</span><span class="token punctuation">(</span>keyPrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 根据关键词前缀设置redis的key
     * @param keyPrefix
     * @return
     */</span>
    <span class="token keyword">private</span> String <span class="token function">getSequence</span><span class="token punctuation">(</span>String keyPrefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 如果你的序列号需要每个月从1开始计算，那么时间就变为yyyyMM。</span>
        String currentDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyyMMdd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 得到这个key的value值</span>
        Long num <span class="token operator">=</span> <span class="token function">getIncrementNum</span><span class="token punctuation">(</span><span class="token string">"seq:"</span> <span class="token operator">+</span> keyPrefix <span class="token operator">+</span> currentDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 填充这个值，一般情况下一天的序列号3位差不多，所以前面几位需要填充0</span>
        <span class="token keyword">return</span> <span class="token function">getSequence</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 查询redis中这个key，并且加1返回
     * @param key
     * @return
     */</span>
    <span class="token keyword">private</span> Long <span class="token function">getIncrementNum</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 不存在准备创建 键值对</span>
        RedisAtomicLong entityIdCounter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisAtomicLong</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">getConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Long counter <span class="token operator">=</span> entityIdCounter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自增加1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>null <span class="token operator">==</span> counter <span class="token operator">||</span> counter<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 初始设置过期时间</span>
            entityIdCounter<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 单位天</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> counter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_LENGTH <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 填充0的总位数</span>

    <span class="token comment" spellcheck="true">/**
     * 将数值前面填充0
     * @param seq
     * @return
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getSequence</span><span class="token punctuation">(</span><span class="token keyword">long</span> seq<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String str <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 一般业务量不会超过8位数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">>=</span> DEFAULT_LENGTH<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> str<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 前面填充0，保证数值一直是8位数</span>
        <span class="token keyword">int</span> rest <span class="token operator">=</span> DEFAULT_LENGTH <span class="token operator">-</span> len<span class="token punctuation">;</span>
        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rest<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>测试</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>EurekaClient<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>EurekaClient<span class="token punctuation">.</span>util<span class="token punctuation">.</span>SequenceUtil<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">EurekaClientApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> SequenceUtil sequenceUtil<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String no <span class="token operator">=</span> <span class="token string">"NO"</span> <span class="token operator">+</span> sequenceUtil<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String no2 <span class="token operator">=</span> <span class="token string">"NO"</span> <span class="token operator">+</span> sequenceUtil<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String no3 <span class="token operator">=</span> <span class="token string">"NO"</span> <span class="token operator">+</span> sequenceUtil<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String no4 <span class="token operator">=</span> <span class="token string">"NO"</span> <span class="token operator">+</span> sequenceUtil<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>no4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>结果:</p>
<pre class=" language-java"><code class="language-java">NO2020032300000005
NO2020032300000006
NO2020032300000007
NO2020032300000008</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>分享一下uTools工具</title>
    <url>/2020/20200321/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/21/SaltonSea_ZH-CN1265210111_1920x1080.jpg) -->
<a id="more"></a>
<p>持续加班<code>ing..</code><br>分享 一个自己正在使用的工具<br><a href="https://www.u.tools/" target="_blank" rel="noopener">uTools你的生产力工具集
</a></p>
<blockquote>
<p>uTools是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。<br>当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200321151921256.png" alt=""><br>具体优点自己体会吧.</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA常用插件</title>
    <url>/2020/20200319/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/19/EquinoxAngkor_ZH-CN1157590532_1920x1080.jpg) -->
<a id="more"></a>
<p>分享自己平时常用的<code>idea</code>插件</p>
<p>1.Mybatis Log Plugin</p>
<p>功能:把 <code>mybatis</code> 输出的<code>sql</code>日志还原成完整的<code>sql</code>语句。 将日志输出的<code>sql</code>语句中的问号 <code>?</code> 替换成真正的参数值</p>
<p>直接在软件<code>Plugins</code>中下载即可,注意下载完要重启<code>idea</code></p>
<p><img src="https://img-blog.csdnimg.cn/20190527161235710.png" alt=""></p>
<p>在<code>Tools</code>中点击 即可进入</p>
<p><img src="https://img-blog.csdnimg.cn/2019052716143126.png" alt=""></p>
<p>2.Rainbow Brackets</p>
<p>功能:彩虹方括号</p>
<p>让你的括号变得魔力转圈圈</p>
<p><img src="https://img-blog.csdnimg.cn/20190527161806200.png" alt=""></p>
<p>3.Free Mybatis plugin</p>
<p>功能:在<code>serviceImpl</code>直接去到<code>mapper.xml</code>中的该方法</p>
<p>选中方法名,快捷键<code>Ctrl + T</code> </p>
<p><img src="https://img-blog.csdnimg.cn/20190527164208747.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Hystrix断路器（四）</title>
    <url>/2020/20200318/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/18/KeichitsuCrocuse_ZH-CN1061292366_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在微服务场景中，通常会有很多层的服务调用。如果一个底层服务出现问题，故障会被向上传播给用户。我们需要一种机制，当底层服务不可用时，可以阻断故障的传播。这就是断路器的作用。他是系统服务稳定性的最后一重保障。</p>
</blockquote>
<p>常常会遇到正在使用某个系统，点击到某一个功能的时候显示该模块正在升级或者请稍后查看等。怎么实现呢？？</p>
<h2 id="使用Feign整合Hystrix"><a href="#使用Feign整合Hystrix" class="headerlink" title="使用Feign整合Hystrix"></a>使用Feign整合Hystrix</h2><p>默认是不开启的，需要修改配置文件<code>application.yml</code>，添加下面的代码</p>
<pre class=" language-java"><code class="language-java">feign<span class="token operator">:</span>
  hystrix<span class="token operator">:</span>
    #开启Hystrix熔断，默认<span class="token boolean">false</span>
    enabled<span class="token operator">:</span> <span class="token boolean">true</span></code></pre>
<p>新增支付模块熔断器</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * @ Description   :  支付模块熔断器
 * @ Author        :  GMaya
 * @ CreateDate    :  2020/3/18 9:35
 * @ Version       :  1.0
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayClientFallBack</span> <span class="token keyword">implements</span> <span class="token class-name">PayClient</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> String <span class="token function">getPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"支付模块正在抢修，请稍后！"</span> <span class="token operator">+</span><span class="token string">" :feign演示"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200318094335346.png" alt=""><br>修改<code>PayClient</code>接口</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"pay"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> PayClientFallBack<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 服务名称</span></code></pre>
<p>启动服务端，启动<code>pay</code>客户端，启动<code>order</code>客户端。<br>访问<code>http://localhost:8082/getOrder</code><br><img src="https://img-blog.csdnimg.cn/20200318094502143.png" alt=""><br>然后把<code>pay</code>客户端关掉！<br><img src="https://img-blog.csdnimg.cn/20200318094538663.png" alt=""></p>
<h2 id="使用RestTemplat整合Hystrix"><a href="#使用RestTemplat整合Hystrix" class="headerlink" title="使用RestTemplat整合Hystrix"></a>使用RestTemplat整合Hystrix</h2><p>pom添加j依赖</p>
<pre class=" language-java"><code class="language-java">        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>熔断器<span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>hystrix<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre>
<p>启动类新增注解</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableCircuitBreaker</span></code></pre>
<p>或者</p>
<p><code>@SpringBootApplication</code>+<code>@EnableDiscoveryClient</code>+<code>@EnableCircuitBreaker</code><br>也可以使用<code>@SpringCloudApplication</code> 一个顶替仨</p>
<p><code>SpringCloudApplication</code>注解 源码：<br><img src="https://img-blog.csdnimg.cn/20200318100928732.png" alt=""></p>
<p>修改订单接口</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * @ Description   :  订单接口接口
 * @ Author        :  GMaya
 * @ CreateDate    :  2020/3/16 11:03
 * @ Version       :  1.0
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>

<span class="token comment" spellcheck="true">//    @Autowired</span>
<span class="token comment" spellcheck="true">//    private PayClient payClient; // 注入支付模块服务</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getOrder"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"getRestTemplateFallBack"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        String pay <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://pay/getPay"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//        String pay = payClient.getPay();</span>
        <span class="token keyword">return</span> pay<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> String <span class="token function">getRestTemplateFallBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"不好啦，机房着火了，restTemplate演示！"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/202003181003090.png" alt=""><br>当然，当接口多的时候，还可以改造</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * @ Description   :  订单接口接口
 * @ Author        :  GMaya
 * @ CreateDate    :  2020/3/16 11:03
 * @ Version       :  1.0
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@DefaultProperties</span><span class="token punctuation">(</span>defaultFallback <span class="token operator">=</span> <span class="token string">"defaultFallback"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>

<span class="token comment" spellcheck="true">//    @Autowired</span>
<span class="token comment" spellcheck="true">//    private PayClient payClient; // 注入支付模块服务</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getOrder"</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//    @HystrixCommand(fallbackMethod = "getRestTemplateFallBack")</span>
    <span class="token annotation punctuation">@HystrixCommand</span> <span class="token comment" spellcheck="true">// 使用默认熔断，加一个注解就行</span>
    <span class="token keyword">public</span> String <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        String pay <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://pay/getPay"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//        String pay = payClient.getPay();</span>
        <span class="token keyword">return</span> pay<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> String <span class="token function">getRestTemplateFallBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"不好啦，机房着火了，restTemplate演示！"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> String <span class="token function">defaultFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"默认熔断！"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/2020031810064596.png" alt=""><br>重启查看</p>
<p><img src="https://img-blog.csdnimg.cn/202003181009599.png" alt=""><br><strong>最后：</strong><br>额外配置，如需更多，请查看专业解释</p>
<p>如果设置和默认值一样，没必要写出来配置</p>
<pre class=" language-java"><code class="language-java">feign<span class="token operator">:</span>
  hystrix<span class="token operator">:</span>
    #开启Hystrix熔断，默认<span class="token boolean">false</span>
    enabled<span class="token operator">:</span> <span class="token boolean">true</span>
hystrix<span class="token operator">:</span>
  command<span class="token operator">:</span>
    # 全局设置
    <span class="token keyword">default</span><span class="token operator">:</span>
      execution<span class="token operator">:</span>
        isolation<span class="token operator">:</span>
          # 命令执行超时时间，默认1000ms，只在线程池隔离中有效。
          thread<span class="token operator">:</span>
            timeoutInMilliseconds<span class="token operator">:</span> <span class="token number">1000</span>
            # 发生超时是是否中断，默认<span class="token boolean">true</span>，只在线程池隔离中有效。
            interruptOnTimeout<span class="token operator">:</span> <span class="token boolean">true</span>
        # 执行是否启用超时，默认启用<span class="token boolean">true</span>，只在线程池隔离中有效。
        timeout<span class="token operator">:</span>
          enabled<span class="token operator">:</span> <span class="token boolean">true</span>
</code></pre>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Hystrix</tag>
      </tags>
  </entry>
  <entry>
    <title>Short 类型直接和数值1做对比</title>
    <url>/2020/20200317/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/17/Knowth_ZH-CN0295374506_1920x1080.jpg) -->
<a id="more"></a>
<p>今天写项目遇到了<code>Short</code> 返回<code>1</code> 需要做个判断，所以就多想了一下，研究了一下<br>大声的告诉我，是<code>true</code>还是<code>true</code>还是<code>true</code>！！！</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Short a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>一开始觉得包装类型用<code>==</code>和<code>equals</code>应该都可以的，但是结果却是，<code>false</code>，<code>true</code>。<br>第二个就不说了，都知道。所以就研究了一下第一个<code>equals</code><br>扒拉源码！<br><code>ctrl + o</code>  找到<code>equals</code> 方法！</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * Compares this object to the specified object.  The result is
     * {@code true} if and only if the argument is not
     * {@code null} and is a {@code Short} object that
     * contains the same {@code short} value as this object.
     *
     * @param obj       the object to compare with
     * @return          {@code true} if the objects are the same;
     *                  {@code false} otherwise.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Short</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> value <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Short<span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shortValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>搜嘎，原来不属于<code>Short</code>类型的，就是<code>false</code><br>那这个直接凭空写的这个<code>1</code>是什么类型啊。<br>有去查了一下<code>java</code>的基本类型默认值，什么四类八种的</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span>初值为<span class="token number">0</span>
<span class="token keyword">long</span>初值为0L
<span class="token keyword">byte</span>初值为<span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">0</span>
<span class="token keyword">short</span>初值为<span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token number">0</span></code></pre>
<p>所以<code>1</code>我觉得是<code>int</code>型的</p>
<p>同时又看了一下<code>Short</code> 和<code>Integer</code>一样，都有缓存的<br><code>Short</code></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ShortCache</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token function">ShortCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

        <span class="token keyword">static</span> <span class="token keyword">final</span> Short cache<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Short</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">127</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">static</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Short</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<p><code>Integer</code></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token keyword">final</span> Integer cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">static</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// high value may be configured by property</span>
            <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>
            String integerCacheHighPropValue <span class="token operator">=</span>
                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>VM<span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer.IntegerCache.high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">// Maximum array size is Integer.MAX_VALUE</span>
                    h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> NumberFormatException nfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// If the property cannot be parsed into an int, ignore it.</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            high <span class="token operator">=</span> h<span class="token punctuation">;</span>

            cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
                cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// range [-128, 127] must be interned (JLS7 5.1.7)</span>
            <span class="token keyword">assert</span> IntegerCache<span class="token punctuation">.</span>high <span class="token operator">>=</span> <span class="token number">127</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token function">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Short</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Eureka服务通信Ribbon/Feign（三）</title>
    <url>/2020/20200316-2/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/16/PlutoCrescent_ZH-CN3538488331_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>每一个客户端就是一个完整的项目，是一个模块，假如我有订单模块，支付模块，用户模块，等等，那么我这些模块之间怎么相互调用呢？采用HttpClient工具类访问？</p>
<h2 id="Ribbon-和-Feign-简介"><a href="#Ribbon-和-Feign-简介" class="headerlink" title="Ribbon 和 Feign 简介"></a>Ribbon 和 Feign 简介</h2><h3 id="Ribbon-简介"><a href="#Ribbon-简介" class="headerlink" title="Ribbon 简介"></a>Ribbon 简介</h3><blockquote>
<p>Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将Netflix的中间层服务连接在一起。Ribbon 客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出 Load Balancer 后面所有的机器，Ribbon 会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们也很容易使用Ribbon实现自定义的负载均衡算法。简单地说，Ribbon 是一个客户端负载均衡器。</p>
</blockquote>
<h3 id="Feign-简介"><a href="#Feign-简介" class="headerlink" title="Feign 简介"></a>Feign 简介</h3><blockquote>
<p>Feign 是一个声明式的 web service 客户端，它使得编写 web service 客户端更为容易。创建接口，为接口添加注解，即可使用Feign。Feign可以使用Feign注解或者JAX-RS注解，还支持热插拔的编码器和解码器。Spring Cloud 为Feign添加了Spring MVC的注解支持，并整合了Ribbon和Eureka来为使用 Feign 时提供负载均衡。</p>
</blockquote>
<h2 id="创建支付模块（客户端）"><a href="#创建支付模块（客户端）" class="headerlink" title="创建支付模块（客户端）"></a>创建支付模块（客户端）</h2><p>起名<code>pay</code>项目，也可以去<code>spring</code>官网 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a>按照之前的办法创建<br>再介绍一个方法，直接在<code>idea</code>中创建<br><img src="https://img-blog.csdnimg.cn/20200316104221227.png" alt=""><br>下一步<br><img src="https://img-blog.csdnimg.cn/20200316104311198.png" alt=""><br>填写组织和项目名称<br><img src="https://img-blog.csdnimg.cn/20200316104405772.png" alt=""><br>搜索添加<br><img src="https://img-blog.csdnimg.cn/20200316104620686.png" alt=""><br>下一步<br><img src="https://img-blog.csdnimg.cn/20200316104718476.png" alt=""><br>完成<br>然后按照客户端的修改操作进行修改<br>修改<code>application.yml</code><br>因为是小<code>demo</code>，所以就不使用集群了，电脑有点卡。真实情况每个服务端和客户端有可能都不在一个服务器上</p>
<pre class=" language-java"><code class="language-java">spring<span class="token operator">:</span>
  application<span class="token operator">:</span>
    name<span class="token operator">:</span> pay
server<span class="token operator">:</span>
  port<span class="token operator">:</span> <span class="token number">8081</span>
eureka<span class="token operator">:</span>
  client<span class="token operator">:</span>
    service<span class="token operator">-</span>url<span class="token operator">:</span>
      #注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔
      #defaultZone<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>server01<span class="token operator">:</span><span class="token number">8761</span><span class="token operator">/</span>eureka<span class="token operator">/</span><span class="token punctuation">,</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>server02<span class="token operator">:</span><span class="token number">8762</span><span class="token operator">/</span>eureka<span class="token operator">/</span>
      defaultZone<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>server01<span class="token operator">:</span><span class="token number">8761</span><span class="token operator">/</span>eureka<span class="token operator">/</span></code></pre>
<p>修改启动项<br>添加注解<code>@EnableDiscoveryClient</code><br>添加一个正常情况下的最简洁支付接口</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * @ Description   :  支付接口
 * @ Author        :  GMaya
 * @ CreateDate    :  2020/3/16 10:53
 * @ Version       :  1.0
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getPay"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 返回支付信息</span>
       <span class="token keyword">return</span> <span class="token string">"this pay！！！"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h2 id="创建订单模块（客户端）"><a href="#创建订单模块（客户端）" class="headerlink" title="创建订单模块（客户端）"></a>创建订单模块（客户端）</h2><p>跟上面支付模块一模一样的操作。。。<br>注意：<br><img src="https://img-blog.csdnimg.cn/20200316110022486.png" alt=""><br>创建订单最简洁订单的接口</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * @ Description   :  订单接口
 * @ Author        :  GMaya
 * @ CreateDate    :  2020/3/16 11:03
 * @ Version       :  1.0
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getOrder"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 返回订单信息</span>
       <span class="token keyword">return</span> <span class="token string">"this order！！！"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p><strong>此时两个正常的项目已经创建完毕，那么我订单模块怎么去调用支付模块呢？</strong></p>
<h2 id="方式一：RestTemplate调用"><a href="#方式一：RestTemplate调用" class="headerlink" title="方式一：RestTemplate调用"></a>方式一：RestTemplate调用</h2><p>修改订单模块接口</p>
<pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getOrder"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        RestTemplate restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String forObject <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8081/getPay"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> forObject<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>启动服务端，启动支付端，启动订单端<br>调用支付接口<br><img src="https://img-blog.csdnimg.cn/20200316111440912.png" alt=""><br>调用订单接口<br><img src="https://img-blog.csdnimg.cn/20200316111506428.png" alt=""><br>可以看出调用成功，但是缺点也很明显，必须要知道对方的url地址，对于多个实例那就难受了，所以是不可取的。</p>
<h2 id="方式二：通过-LoadBalanced"><a href="#方式二：通过-LoadBalanced" class="headerlink" title="方式二：通过 @LoadBalanced"></a>方式二：通过 @LoadBalanced</h2><p>添加<code>RestTemplateConfig</code>配置</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * @ Description   :  RestTemplate配置类
 * @ Author        :  GMaya
 * @ CreateDate    :  2020/3/16 11:24
 * @ Version       :  1.0
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span>
    <span class="token keyword">public</span> RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200316112723276.png" alt=""><br>修改订单接口<br>此时只需要填写调用的项目名就好了，跟<code>ip</code>无关。</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * @ Description   :  订单接口接口
 * @ Author        :  GMaya
 * @ CreateDate    :  2020/3/16 11:03
 * @ Version       :  1.0
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getOrder"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        String forObject <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://PAY/getPay"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> forObject<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>重启订单项目查看</p>
<p><img src="https://img-blog.csdnimg.cn/20200316134202712.png" alt=""><br><strong><code>@LoadBalanced</code> 源码</strong><br>注解源码注释中说，用来标记<code>restTemplate</code>使之配置使用<code>LoadBalancerClient</code></p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * Annotation to mark a RestTemplate or WebClient bean to be configured to use a
 * LoadBalancerClient.
 * @author Spencer Gibb
 */</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>PARAMETER<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>METHOD <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Qualifier</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">LoadBalanced</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span></code></pre>
<p><code>LoadBalancerClient</code>则表示客户端负载均衡器。<br><img src="https://img-blog.csdnimg.cn/20200316135308761.png" alt=""><br>所以使用<code>@LoadBalanced</code>就代表使用<code>ribbon</code>实现客户端的负载均衡<br>负载均衡的策略默认使用的是轮询算法</p>
<blockquote>
<p>负载均衡是在同一个功能的微服务中根据不同的策略选择不同的微服务，因此这些微服务对外暴露的实例名称要相同（spring.application.name）<br><code>ribbon</code>是一个客户端的负载均衡，必须要连接<code>eureka</code>，才能在指定的微服务实例中按照策略选择</p>
</blockquote>
<p>假设支付模块（<code>pay</code>）部署在两台或者多台服务器，只有端口号不一样，其他的都一样，那么我订单模块按照轮询算法去调用支付模块。</p>
<h2 id="方式三：通过-Feign"><a href="#方式三：通过-Feign" class="headerlink" title="方式三：通过 Feign"></a>方式三：通过 Feign</h2><p>第一步：添加<code>Feign</code>依赖<br>打开订单模块<code>pom</code>文件</p>
<pre class=" language-java"><code class="language-java">        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>openfeign<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre>
<p>第二步：修改订单模块启动类<code>OrderApplication</code><br>添加注解<code>@EnableFeignClients</code><br><img src="https://img-blog.csdnimg.cn/20200316142558747.png" alt=""><br>第三步：声明需要调用的接口<br>创建<code>PayClient</code>接口</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * @ Description   :  支付接口声明
 * @ Author        :  GMaya
 * @ CreateDate    :  2020/3/16 14:28
 * @ Version       :  1.0
 */</span>

<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"pay"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 服务名称</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PayClient</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getPay"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//  这里要和pay提供的接口一致</span>
    String <span class="token function">getPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200316143337289.png" alt=""><br>修改<code>OrderController</code></p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * @ Description   :  订单接口接口
 * @ Author        :  GMaya
 * @ CreateDate    :  2020/3/16 11:03
 * @ Version       :  1.0
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> PayClient payClient<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注入支付模块服务</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getOrder"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        String pay <span class="token operator">=</span> payClient<span class="token punctuation">.</span><span class="token function">getPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> pay<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>重启订单模块项目，一切正常！</p>
<p>只有先入门，才能追查源码以及骚操作！</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Eureka高可用的服务注册中心（二）</title>
    <url>/2020/20200316/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/16/YukonGames_ZH-CN0135612170_1920x1080.jpg) -->
<a id="more"></a>

<h2 id="集群原理图"><a href="#集群原理图" class="headerlink" title="集群原理图"></a>集群原理图</h2><p>如果只有一个注册中心（服务端），一旦挂掉，就直接<code>GG</code>，在分布式系统中，任何地方存在单点故障，整个系统就不是高可用的。（自己手画的难看见谅）</p>
<p><img src="https://img-blog.csdnimg.cn/20200315221636385.png" alt=""></p>
<h2 id="创建服务端2"><a href="#创建服务端2" class="headerlink" title="创建服务端2"></a>创建服务端2</h2><p>在上一篇文章中写了最简单的单服务端，单客户端的例子。所以，在上一篇的基础上，继续新建一个服务端，起名字叫做服务端2<br>登录<code>spring</code>官网 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a><br><img src="https://img-blog.csdnimg.cn/20200315222938981.png" alt=""><br>保存到本地之后，导入项目<br><img src="https://img-blog.csdnimg.cn/20200315223158658.png" alt=""><br>服务器2（<code>EurekaServerTwo</code>）启动类添加注解</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableEurekaServer</span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200315224555469.png" alt=""><br>修改<code>EurekaServerTwo</code>配置文件<code>application.yml</code></p>
<pre class=" language-java"><code class="language-java">server<span class="token operator">:</span>
  port<span class="token operator">:</span> <span class="token number">8762</span>
eureka<span class="token operator">:</span>
  client<span class="token operator">:</span>
    service<span class="token operator">-</span>url<span class="token operator">:</span>
      # #注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔
      # 向端口<span class="token number">8761</span>注册<span class="token punctuation">(</span>两个服务端互相注册<span class="token punctuation">)</span>
      defaultZone<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>server01<span class="token operator">:</span><span class="token number">8761</span><span class="token operator">/</span>eureka<span class="token operator">/</span>
    # 指示此实例是否应将其信息注册到eureka服务器以供其他服务发现，默认为<span class="token boolean">false</span>
    register<span class="token operator">-</span>with<span class="token operator">-</span>eureka<span class="token operator">:</span> <span class="token boolean">false</span>
  instance<span class="token operator">:</span>
    # 该服务实例所在主机名
    hostname<span class="token operator">:</span> server02
  server<span class="token operator">:</span>
    # 启用自我保护机制，默认为<span class="token boolean">true</span>
    enable<span class="token operator">-</span>self<span class="token operator">-</span>preservation<span class="token operator">:</span> <span class="token boolean">false</span>
spring<span class="token operator">:</span>
  profiles<span class="token operator">:</span> server02</code></pre>
<h2 id="修改服务器1EurekaServer"><a href="#修改服务器1EurekaServer" class="headerlink" title="修改服务器1EurekaServer"></a>修改服务器1EurekaServer</h2><p>修改<code>EurekaServer</code>项目的配置文件<code>application.yml</code></p>
<pre class=" language-java"><code class="language-java">server<span class="token operator">:</span>
  port<span class="token operator">:</span> <span class="token number">8761</span>
eureka<span class="token operator">:</span>
  client<span class="token operator">:</span>
    service<span class="token operator">-</span>url<span class="token operator">:</span>
      # 注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔
      # 向端口<span class="token number">8762</span>注册<span class="token punctuation">(</span>两个服务端互相注册<span class="token punctuation">)</span>
      defaultZone<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>server02<span class="token operator">:</span><span class="token number">8762</span><span class="token operator">/</span>eureka<span class="token operator">/</span>
    # 指示此实例是否应将其信息注册到eureka服务器以供其他服务发现，默认为<span class="token boolean">false</span>
    register<span class="token operator">-</span>with<span class="token operator">-</span>eureka<span class="token operator">:</span> <span class="token boolean">false</span>
  instance<span class="token operator">:</span>
    # 该服务实例所在主机名
    hostname<span class="token operator">:</span> server01
  server<span class="token operator">:</span>
    # 启用自我保护机制，默认为<span class="token boolean">true</span>
    enable<span class="token operator">-</span>self<span class="token operator">-</span>preservation<span class="token operator">:</span> <span class="token boolean">false</span>
spring<span class="token operator">:</span>
  profiles<span class="token operator">:</span> server01</code></pre>
<h2 id="修改电脑hosts文件"><a href="#修改电脑hosts文件" class="headerlink" title="修改电脑hosts文件"></a>修改电脑hosts文件</h2><p>修改<code>host</code>文件添加对<code>application.yml</code>配置文件中<code>hostname</code>的映射<br>打开电脑<code>C:\Windows\System32\drivers\etc</code><br>找到hosts，在文件最后输入</p>
<pre class=" language-java"><code class="language-java"><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>    server01
<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>    server02</code></pre>
<p>注意使用管理员权限，不然没办法保存</p>
<h2 id="启动查看效果"><a href="#启动查看效果" class="headerlink" title="启动查看效果"></a>启动查看效果</h2><p>修改启动配置项<br><img src="https://img-blog.csdnimg.cn/20200315230830125.png" alt=""><br><strong>在服务器1配置</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token operator">-</span>Dspring<span class="token punctuation">.</span>profiles<span class="token punctuation">.</span>active<span class="token operator">=</span>server01</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200315230914439.png" alt=""><br><strong>在服务器2配置</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token operator">-</span>Dspring<span class="token punctuation">.</span>profiles<span class="token punctuation">.</span>active<span class="token operator">=</span>server02</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200315231015288.png" alt=""><br>启动服务器1，启动服务器2，启动客户端<br>如果在启动中报错，先则是因为服务器1向服务器2注册没有连接上，等你服务器2启动完毕就不会报错了。<br>最终在浏览器查看效果<br><strong><a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a></strong><br><img src="https://img-blog.csdnimg.cn/2020031523152013.png" alt=""><br><strong><a href="http://localhost:8762/" target="_blank" rel="noopener">http://localhost:8762/</a></strong><br><img src="https://img-blog.csdnimg.cn/20200315231601974.png" alt=""></p>
<h2 id="停止服务器1"><a href="#停止服务器1" class="headerlink" title="停止服务器1"></a>停止服务器1</h2><p>此时检验效果，停止服务器1，即端口号为：<code>8761</code>的服务器<br><img src="https://img-blog.csdnimg.cn/20200315231759209.png" alt=""><br>稍微等待一会，因为有默认的失效时间。<br>查看<code>http://localhost:8762</code><br>此时客户端已经消失，<br><img src="https://img-blog.csdnimg.cn/2020031523232598.png" alt=""><br>这是因为客户端没有配置服务器2的注册。</p>
<h2 id="修改客户端"><a href="#修改客户端" class="headerlink" title="修改客户端"></a>修改客户端</h2><p>修改<code>EurekaClient</code>项目的配置文件<code>application.yml</code><br>将两个注册中心全部配置上去</p>
<pre class=" language-java"><code class="language-java">spring<span class="token operator">:</span>
  application<span class="token operator">:</span>
    name<span class="token operator">:</span> eureka<span class="token operator">-</span>client
server<span class="token operator">:</span>
  port<span class="token operator">:</span> <span class="token number">8711</span>
eureka<span class="token operator">:</span>
  client<span class="token operator">:</span>
    service<span class="token operator">-</span>url<span class="token operator">:</span>
      #注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔
      defaultZone<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>server01<span class="token operator">:</span><span class="token number">8761</span><span class="token operator">/</span>eureka<span class="token operator">/</span><span class="token punctuation">,</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>server02<span class="token operator">:</span><span class="token number">8762</span><span class="token operator">/</span>eureka<span class="token operator">/</span></code></pre>
<p>将<code>server02</code>注册进来，重新启动服务端1，服务端2，客户端，再次演示上面断掉服务端1的操作<br>这个时候<code>server02</code>就能一直显示客户端的注册</p>
<p>这样就算一个服务器挂掉，对整体也不会有影响了。</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Eureka最简单的入门（一）</title>
    <url>/2020/20200315/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/15/MetamorphicRocks_ZH-CN9753251368_1920x1080.jpg) -->
<a id="more"></a>

<h2 id="Eureka介绍"><a href="#Eureka介绍" class="headerlink" title="Eureka介绍"></a>Eureka介绍</h2><blockquote>
<p>Eureka是一个基于REST的服务，主要用于AWS云中的定位服务，以实现中间层服务器的负载平衡和故障转移，在 Spring Cloud 微服务架构中通常用作注册中心，我们称这个服务为 Eureka Server，还有一个与之交互的客户端称之为 Eureka Client</p>
</blockquote>
<h2 id="创建eureka服务端"><a href="#创建eureka服务端" class="headerlink" title="创建eureka服务端"></a>创建eureka服务端</h2><p>登录<code>spring</code>官网 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a><br><img src="https://img-blog.csdnimg.cn/20200315173526729.png" alt=""><br>写好组名称，和项目名称,搜索<code>eureka server</code>，点击<code>+</code>，选择导出到本地。<br><img src="https://img-blog.csdnimg.cn/20200315173919500.png" alt=""><br>将下载好的项目导入<code>idea</code>。</p>
<p>然后在<code>eureka server</code>项目启动类添加注解</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableEurekaServer</span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200315175550115.png" alt=""><br>修改配置<code>application.yml</code>文件<br>其中<code>defaultZone</code><strong>前后注意空格</strong>，而且这个单词是关联不出来的。</p>
<pre class=" language-java"><code class="language-java">server<span class="token operator">:</span>
  port<span class="token operator">:</span> <span class="token number">8761</span>
eureka<span class="token operator">:</span>
  client<span class="token operator">:</span>
    service<span class="token operator">-</span>url<span class="token operator">:</span>
      defaultZone<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8761</span><span class="token operator">/</span>eureka<span class="token operator">/</span>
    # 指示此实例是否应将其信息注册到eureka服务器以供其他服务发现，默认为<span class="token boolean">false</span>
    register<span class="token operator">-</span>with<span class="token operator">-</span>eureka<span class="token operator">:</span> <span class="token boolean">false</span>
  server<span class="token operator">:</span>
    # 启用自我保护机制，默认为<span class="token boolean">true</span>
    enable<span class="token operator">-</span>self<span class="token operator">-</span>preservation<span class="token operator">:</span> <span class="token boolean">false</span>
spring<span class="token operator">:</span>
  application<span class="token operator">:</span>
    # 微服务名称
    name<span class="token operator">:</span> eureka
</code></pre>
<p>启动<code>localhost:8761</code>显示页面即为成功！</p>
<p><img src="https://img-blog.csdnimg.cn/20200315203638407.png" alt=""></p>
<h2 id="创建eureka客户端"><a href="#创建eureka客户端" class="headerlink" title="创建eureka客户端"></a>创建eureka客户端</h2><p>登录<code>spring</code>官网 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a><br>修改项目名称，搜索<code>eureka discovery client</code> 。点击+ ，保存到本地<br><img src="https://img-blog.csdnimg.cn/20200315204041224.png" alt=""><br>保存到本地之后，在上一个项目中打开<br><img src="https://img-blog.csdnimg.cn/20200315175306228.png" alt=""><br>选择<code>eureka</code>客户端导入。<br><img src="https://img-blog.csdnimg.cn/20200315175355975.png" alt=""></p>
<p>修改<code>eureka</code>客户端启动类<br>添加注解</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200315204457915.png" alt=""><br><code>pom</code>文件添加</p>
<pre class=" language-java"><code class="language-java">        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre>
<p>修改配置文件<code>application.yml</code></p>
<pre class=" language-java"><code class="language-java">spring<span class="token operator">:</span>
  application<span class="token operator">:</span>
    name<span class="token operator">:</span> eureka<span class="token operator">-</span>client
server<span class="token operator">:</span>
  port<span class="token operator">:</span> <span class="token number">8711</span>
eureka<span class="token operator">:</span>
  client<span class="token operator">:</span>
    service<span class="token operator">-</span>url<span class="token operator">:</span>
      #注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“<span class="token punctuation">,</span>”进行分隔
      defaultZone<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8761</span><span class="token operator">/</span>eureka<span class="token operator">/</span>
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200315210244310.png" alt=""><br>启动服务端，启动客户端<br><img src="https://img-blog.csdnimg.cn/20200315210433640.png" alt=""><br>最简单的一个<code>spring cloud</code> + <code>eureka</code> 服务注册到此结束。全部是采用默认形式，最简单的一个项目搭建。</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 MySQL 中优化 SQL 语句查询常用的 30 种方法</title>
    <url>/2020/20200314/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/14/Cirkelbroen_ZH-CN9645986135_1920x1080.jpg) -->
<a id="more"></a>

<blockquote>
<p>转载于网络，作者不详。</p>
</blockquote>
<p>1、对查询进行优化，应尽量避免全表扫描，首先应考虑在 <code>where</code> 及 <code>order by</code> 涉及的列上建立索引。 </p>
<p>2、应尽量避免在 <code>where</code> 子句中使用<code>!=</code>或<code>&lt;&gt;</code>操作符，否则将引擎放弃使用索引而进行全表扫描。 </p>
<p>3、应尽量避免在 <code>where</code> 子句中对字段进行 <code>null</code> 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如： </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num <span class="token operator">is</span> <span class="token boolean">null</span> </code></pre>
<p>可以在<code>num</code>上设置默认值<code>0</code>，确保表中<code>num</code>列没有<code>null</code>值，然后这样查询： </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num<span class="token operator">=</span><span class="token number">0</span> </code></pre>
<p>4、应尽量避免在 <code>where</code> 子句中使用 <code>or</code> 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如： </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">or</span> num<span class="token operator">=</span><span class="token number">20</span> </code></pre>
<p>可以这样查询： </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num<span class="token operator">=</span><span class="token number">10</span> 
<span class="token keyword">union</span> <span class="token keyword">all</span> 
<span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num<span class="token operator">=</span><span class="token number">20</span> </code></pre>
<p>5、下面的查询也将导致全表扫描： </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%abc%'</span> </code></pre>
<p>若要提高效率，可以考虑全文检索。 </p>
<p>6、<code>in</code> 和 <code>not in</code> 也要慎用，否则会导致全表扫描，如： </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> </code></pre>
<p>对于连续的数值，能用 <code>between</code> 就不要用 <code>in</code> 了： </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num <span class="token operator">between</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">3</span> </code></pre>
<p>7、如果在 <code>where</code> 子句中使用参数，也会导致全表扫描。因为<code>SQL</code>只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描： </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num<span class="token operator">=</span><span class="token variable">@num</span> </code></pre>
<p>可以改为强制查询使用索引： </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">with</span><span class="token punctuation">(</span><span class="token keyword">index</span><span class="token punctuation">(</span>索引名<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">where</span> num<span class="token operator">=</span><span class="token variable">@num</span> </code></pre>
<p>8、应尽量避免在 <code>where</code> 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如： </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num<span class="token operator">/</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">100</span> </code></pre>
<p>应改为: </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num<span class="token operator">=</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">2</span> </code></pre>
<p>9、应尽量避免在<code>where</code>子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br><code>name</code>以<code>abc</code>开头的<code>id</code></p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> substring<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'abc'</span></code></pre>
<p>‘2005-11-30’生成的<code>id</code></p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> datediff<span class="token punctuation">(</span>day<span class="token punctuation">,</span>createdate<span class="token punctuation">,</span><span class="token string">'2005-11-30'</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span></code></pre>
<p>应改为: </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'abc%'</span> 
<span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> createdate<span class="token operator">>=</span><span class="token string">'2005-11-30'</span> <span class="token operator">and</span> createdate<span class="token operator">&lt;</span><span class="token string">'2005-12-1'</span> </code></pre>
<p>10、不要在 <code>where</code> 子句中的“<code>=</code>”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。 </p>
<p>11、在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。 </p>
<p>12、不要写一些没有意义的查询，如需要生成一个空表结构： </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> col1<span class="token punctuation">,</span>col2 <span class="token keyword">into</span> <span class="token comment" spellcheck="true">#t from t where 1=0 </span></code></pre>
<p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样： </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token comment" spellcheck="true">#t(...) </span></code></pre>
<p>13、很多时候用 <code>exists</code> 代替 <code>in</code> 是一个好的选择： </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> num <span class="token keyword">from</span> <span class="token number">a</span> <span class="token keyword">where</span> num <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> num <span class="token keyword">from</span> <span class="token number">b</span><span class="token punctuation">)</span> </code></pre>
<p>用下面的语句替换： </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> num <span class="token keyword">from</span> <span class="token number">a</span> <span class="token keyword">where</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> <span class="token number">b</span> <span class="token keyword">where</span> num<span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span> </code></pre>
<p>14、并不是所有索引对查询都有效，<code>SQL</code>是根据表中数据来进行查询优化的，当索引列有大量数据重复时，<code>SQL</code>查询可能不会去利用索引，如一表中有字段<code>sex</code>，<code>male</code>、<code>female</code>几乎各一半，那么即使在<code>sex</code>上建了索引也对查询效率起不了作用。 </p>
<p>15、索引并不是越多越好，索引固然可以提高相应的 <code>select</code> 的效率，但同时也降低了 <code>insert</code> 及 <code>update</code> 的效率，因为 <code>insert</code> 或 <code>update</code> 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。 </p>
<p>16、应尽可能的避免更新 <code>clustered</code> 索引数据列，因为 <code>clustered</code> 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 <code>clustered</code> 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。 </p>
<p>17、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。 </p>
<p>18、尽可能的使用 <code>varchar/nvarchar</code> 代替 <code>char/nchar</code> ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。 </p>
<p>19、任何地方都不要使用 <code>select * from t</code> ，用具体的字段列表代替“<code>*</code>”，不要返回用不到的任何字段。 </p>
<p>20、尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。 </p>
<p>21、避免频繁创建和删除临时表，以减少系统表资源的消耗。 </p>
<p>22、临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。 </p>
<p>23、在新建临时表时，如果一次性插入数据量很大，那么可以使用 <code>select into</code> 代替 <code>create table</code>，避免造成大量 <code>log</code> ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先<code>create table</code>，然后<code>insert</code>。 </p>
<p>24、如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 <code>truncate table</code> ，然后 <code>drop table</code> ，这样可以避免系统表的较长时间锁定。 </p>
<p>25、尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过<code>1</code>万行，那么就应该考虑改写。 </p>
<p>26、使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。 </p>
<p>27、与临时表一样，游标并不是不可使用。对小型数据集使用 <code>FAST_FORWARD</code> 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。 </p>
<p>28、在所有的存储过程和触发器的开始处设置 <code>SET NOCOUNT ON</code> ，在结束时设置 <code>SET NOCOUNT OFF</code> 。无需在执行存储过程和触发器的每个语句后向客户端发送 <code>DONE_IN_PROC</code> 消息。 </p>
<p>29、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。 </p>
<p>30、尽量避免大事务操作，提高系统并发能力。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>idea新建springboot项目pom文件报错</title>
    <url>/2020/20200313/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/13/FrenchColorado_ZH-CN9446885520_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前也有过类似的情况，只不过都是把<code>spring-boot-starter-parent</code>版本号改成本地仓库已经有的，然后继续开发。今天想写个<code>demo</code>，就新建了一个，然后版本号不一致，就一直报错，所以找了一天问题，才解决。太可怕了</p>
<h2 id="新建springboot项目的问题"><a href="#新建springboot项目的问题" class="headerlink" title="新建springboot项目的问题"></a>新建springboot项目的问题</h2><p>使用<code>idea</code>，一路<code>next</code>，到最后生成项目<br>然后<code>pom</code>文件报错<br>我特意换了一个全新的<code>maven</code>，发现是因为<code>jar</code>拉不下来，就配置了国内镜像<br>找到<code>maven</code> ，<code>conf</code> 打开 <code>settings.xml</code>。在<code>mirrors</code>里面写入</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 阿里云镜像 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>mirror<span class="token operator">></span>
        <span class="token operator">&lt;</span>id<span class="token operator">></span>alimaven<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>
        <span class="token operator">&lt;</span>name<span class="token operator">></span>aliyun maven<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
        <span class="token operator">&lt;</span>url<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>nexus<span class="token operator">/</span>content<span class="token operator">/</span>groups<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span>
        <span class="token operator">&lt;</span>mirrorOf<span class="token operator">></span>central<span class="token operator">&lt;</span><span class="token operator">/</span>mirrorOf<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>mirror<span class="token operator">></span>
    <span class="token operator">&lt;</span>mirror<span class="token operator">></span>
        <span class="token operator">&lt;</span>id<span class="token operator">></span>central<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>
        <span class="token operator">&lt;</span>name<span class="token operator">></span>Maven Repository Switchboard<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
        <span class="token operator">&lt;</span>url<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>repo1<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>org<span class="token operator">/</span>maven2<span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span>
        <span class="token operator">&lt;</span>mirrorOf<span class="token operator">></span>central<span class="token operator">&lt;</span><span class="token operator">/</span>mirrorOf<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mirror<span class="token operator">></span>
    <span class="token operator">&lt;</span>mirror<span class="token operator">></span>
        <span class="token operator">&lt;</span>id<span class="token operator">></span>repo2<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>
        <span class="token operator">&lt;</span>mirrorOf<span class="token operator">></span>central<span class="token operator">&lt;</span><span class="token operator">/</span>mirrorOf<span class="token operator">></span>
        <span class="token operator">&lt;</span>name<span class="token operator">></span>Human Readable Name <span class="token keyword">for</span> <span class="token keyword">this</span> Mirror<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
        <span class="token operator">&lt;</span>url<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>repo2<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>org<span class="token operator">/</span>maven2<span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>mirror<span class="token operator">></span>

    <span class="token operator">&lt;</span>mirror<span class="token operator">></span>
        <span class="token operator">&lt;</span>id<span class="token operator">></span>ibiblio<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>
        <span class="token operator">&lt;</span>mirrorOf<span class="token operator">></span>central<span class="token operator">&lt;</span><span class="token operator">/</span>mirrorOf<span class="token operator">></span>
        <span class="token operator">&lt;</span>name<span class="token operator">></span>Human Readable Name <span class="token keyword">for</span> <span class="token keyword">this</span> Mirror<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
        <span class="token operator">&lt;</span>url<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>ibiblio<span class="token punctuation">.</span>org<span class="token operator">/</span>pub<span class="token operator">/</span>mirrors<span class="token operator">/</span>maven2<span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>mirror<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 中央仓库在中国的镜像 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>mirror<span class="token operator">></span>
        <span class="token operator">&lt;</span>id<span class="token operator">></span>maven<span class="token punctuation">.</span>net<span class="token punctuation">.</span>cn<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>
        <span class="token operator">&lt;</span>name<span class="token operator">></span>oneof the central mirrors <span class="token keyword">in</span> china<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
        <span class="token operator">&lt;</span>url<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>net<span class="token punctuation">.</span>cn<span class="token operator">/</span>content<span class="token operator">/</span>groups<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span>
        <span class="token operator">&lt;</span>mirrorOf<span class="token operator">></span>central<span class="token operator">&lt;</span><span class="token operator">/</span>mirrorOf<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>mirror<span class="token operator">></span></code></pre>
<p>然后发现还是有点问题，有些拉不下来。<br>继续设置<code>idea</code>，打开设置，搜索<code>maven</code><br><img src="https://img-blog.csdnimg.cn/20200313142951573.png" alt=""><br>将上面的勾打上<br>然后在<code>VM Options</code>下面输入</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">-</span>Dmaven<span class="token punctuation">.</span>wagon<span class="token punctuation">.</span>http<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>insecure<span class="token operator">=</span><span class="token boolean">true</span>
<span class="token operator">-</span>Dmaven<span class="token punctuation">.</span>wagon<span class="token punctuation">.</span>http<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>allowall<span class="token operator">=</span><span class="token boolean">true</span>
<span class="token operator">-</span>Dmaven<span class="token punctuation">.</span>wagon<span class="token punctuation">.</span>http<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>ignore<span class="token punctuation">.</span>validity<span class="token punctuation">.</span>dates<span class="token operator">=</span><span class="token boolean">true</span></code></pre>
<p>然后点击最右面<code>maven</code>，重新安装一下<br>（拉完之后再把勾去掉，还原）<br><img src="https://img-blog.csdnimg.cn/20200313143220272.png" alt=""><br>此时已经解决了我所有报错的问题，然后启动项目是启动不起来的，因为没有<code>web</code><br>继续在<code>pom</code>加入<code>spring-boot-starter-web</code></p>
<pre class=" language-java"><code class="language-java">        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre>
<p>启动类中加入<code>hello</code>代码校验<br><img src="https://img-blog.csdnimg.cn/20200313143721913.png" alt=""><br>启动，浏览器输入<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a><br><img src="https://img-blog.csdnimg.cn/20200313143752533.png" alt=""><br>哎。真<code>tm</code>菜</p>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo配置最新next主题的几个问题</title>
    <url>/2020/20200312/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/12/SiestaKey_ZH-CN1759696989_1920x1080.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>截止到写这博客的时间，花费了一天左右的时间，将<code>next</code>主题美化了一下，以此记录。</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>我的博客使用<code>next</code>模板为<code>Mist</code>，打开主题配置文件<br><img src="https://img-blog.csdnimg.cn/20200312112907956.png" alt=""></p>
<h2 id="添加背景线条效果"><a href="#添加背景线条效果" class="headerlink" title="添加背景线条效果"></a>添加背景线条效果</h2><p><img src="https://img-blog.csdnimg.cn/2020031211451787.png" alt=""><br>我是参考<a href="https://github.com/theme-next/theme-next-canvas-nest" target="_blank" rel="noopener">canvas-nest</a>官方网站</p>
<h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><p>在根目录的<code>source</code> 文件夹下创建<code>_data</code>文件夹，然后创建<code>footer.swig</code><br><img src="https://img-blog.csdnimg.cn/20200312113617444.png" alt=""><br>注意不要将位置创建到主题里面去，然后将代码拷贝进去即可</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script color<span class="token operator">=</span><span class="token string">"0,0,0"</span> opacity<span class="token operator">=</span><span class="token string">"0.5"</span> zIndex<span class="token operator">=</span><span class="token string">"-1"</span> count<span class="token operator">=</span><span class="token string">"99"</span> src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>其中<code>color</code>是颜色值，<code>opacity</code>是透明度，<code>zIndex</code>是现在层级，<code>count</code>是线条数量。</p>
<h3 id="设置路径"><a href="#设置路径" class="headerlink" title="设置路径"></a>设置路径</h3><p>打开<strong>主题配置文件</strong><br>搜索 <code>custom_file_path</code> 将<code>footer</code>注释打开<br><img src="https://img-blog.csdnimg.cn/20200312113927646.png" alt=""><br>然后 <code>hexo g</code>  ， <code>hexo s</code>  ，启动看看效果</p>
<h2 id="首页文章之间周围有边框"><a href="#首页文章之间周围有边框" class="headerlink" title="首页文章之间周围有边框"></a>首页文章之间周围有边框</h2><p>刚开始这个首页文章之间没有边框，每个文章之间没有明显的间隔。<br>效果：<br><img src="https://img-blog.csdnimg.cn/20200312135123740.png" alt=""><br>打开：\themes\next\source\css_common\components\post\post.styl<br><img src="https://img-blog.csdnimg.cn/20200312135622899.png" alt=""><br>大概<code>35</code>行，找到<code>motion.transition.post_block</code><br>修改前：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>hexo<span class="token operator">-</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">'motion.transition.post_block'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>post<span class="token operator">-</span>block<span class="token punctuation">,</span> <span class="token punctuation">.</span>pagination<span class="token punctuation">,</span> <span class="token punctuation">.</span>comments <span class="token punctuation">{</span>
      opacity<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span></code></pre>
<p>修改后：</p>
<pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">if</span> <span class="token punctuation">(</span>hexo<span class="token operator">-</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">'motion.transition.post_block'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>post<span class="token operator">-</span>block<span class="token punctuation">{</span>
       opacity<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
       padding<span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>
       <span class="token operator">-</span>webkit<span class="token operator">-</span>box<span class="token operator">-</span>shadow<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> 5px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">202</span><span class="token punctuation">,</span> <span class="token number">203</span><span class="token punctuation">,</span> <span class="token number">203</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token operator">-</span>moz<span class="token operator">-</span>box<span class="token operator">-</span>shadow<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> 5px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">202</span><span class="token punctuation">,</span> <span class="token number">203</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token punctuation">.</span>pagination<span class="token punctuation">,</span> <span class="token punctuation">.</span>comments <span class="token punctuation">{</span>
      opacity<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span></code></pre>
<p>然后 <code>hexo g</code>  ， <code>hexo s</code>  ，启动看看效果</p>
<h2 id="修改文章之间的间隔"><a href="#修改文章之间的间隔" class="headerlink" title="修改文章之间的间隔"></a>修改文章之间的间隔</h2><p>默认的文章间距<code>120px</code>，有点大。</p>
<p>打开：\themes\next\source\css_schemes\Mist_posts-expand.styl<br><img src="https://img-blog.csdnimg.cn/20200312140746217.png" alt=""><br>大概<code>24</code>行，找到<code>.post-block:not</code><br>修改前：</p>
<pre class=" language-javascript"><code class="language-javascript">  <span class="token punctuation">.</span>post<span class="token operator">-</span>block<span class="token punctuation">:</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">:</span>first<span class="token operator">-</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<p>将<code>120</code>px，修改为你想要的间距，我改成了<code>20</code>px<br>修改后：</p>
<pre class=" language-javascript"><code class="language-javascript">  <span class="token punctuation">.</span>post<span class="token operator">-</span>block<span class="token punctuation">:</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">:</span>first<span class="token operator">-</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<h2 id="评论数显示为英文问题"><a href="#评论数显示为英文问题" class="headerlink" title="评论数显示为英文问题"></a>评论数显示为英文问题</h2><p>我使用的<code>Valine</code>评论，但是文章标题下面显示的评论数为英文。<br>打开：\themes\next\languages\zh-CN.yml<br><img src="https://img-blog.csdnimg.cn/2020031214110617.png" alt=""><br>在post下面新增：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">comments.valine</span><span class="token punctuation">:</span> 评论数</code></pre>
<p>注意空格，和下面保持对齐<br><img src="https://img-blog.csdnimg.cn/2020031214125048.png" alt=""></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>获取qq音乐分享链接</title>
    <url>/2020/0308/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/12/2ca911872a193a63a.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想要写个插件。支持<code>qq</code>，微信，在群里面点歌，这就要获取音乐接口的<code>api</code> 了。<br>注：只允许个人学习使用。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>通过浏览器分析音乐查询接口，分享接口，等等<br><strong>qq音乐搜索接口：</strong></p>
<pre class=" language-java"><code class="language-java">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>c<span class="token punctuation">.</span>y<span class="token punctuation">.</span>qq<span class="token punctuation">.</span>com<span class="token operator">/</span>soso<span class="token operator">/</span>fcgi<span class="token operator">-</span>bin<span class="token operator">/</span>client_search_cp<span class="token operator">?</span>p<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>w<span class="token operator">=</span>水手<span class="token operator">&amp;</span>format<span class="token operator">=</span>json<span class="token operator">&amp;</span>inCharset<span class="token operator">=</span>utf8<span class="token operator">&amp;</span>outCharset<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span></code></pre>
<p>其中：<code>w</code>=歌名，<code>p</code>=页数，<code>n</code>=条数，<code>format</code>=格式。剩下两个就是编码格式了</p>
<p>结果：<br>得到以下几个参数：<br><code>albumname</code>：专辑<br><code>albumid</code> ： 专辑id<br><code>albummid</code> : 专辑图片<br><code>songname</code> ：歌名<br><code>singer[0].name</code>:歌手名字<br><code>songid</code> ： 分享链接使用</p>
<p><strong>音乐分享链接：</strong></p>
<pre class=" language-java"><code class="language-java">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>i<span class="token punctuation">.</span>y<span class="token punctuation">.</span>qq<span class="token punctuation">.</span>com<span class="token operator">/</span>v8<span class="token operator">/</span>playsong<span class="token punctuation">.</span>html<span class="token operator">?</span>songid<span class="token operator">=</span></code></pre>
<p>例子：</p>
<pre class=" language-java"><code class="language-java">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>i<span class="token punctuation">.</span>y<span class="token punctuation">.</span>qq<span class="token punctuation">.</span>com<span class="token operator">/</span>v8<span class="token operator">/</span>playsong<span class="token punctuation">.</span>html<span class="token operator">?</span>songid<span class="token operator">=</span><span class="token number">4829638</span></code></pre>
<p><strong>获取专辑图片：</strong></p>
<pre class=" language-java"><code class="language-java">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>y<span class="token punctuation">.</span>gtimg<span class="token punctuation">.</span>cn<span class="token operator">/</span>music<span class="token operator">/</span>photo_new<span class="token operator">/</span>T002R300x300M000专辑图片<span class="token punctuation">.</span>jpg</code></pre>
<p>例子：</p>
<pre class=" language-java"><code class="language-java">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>y<span class="token punctuation">.</span>gtimg<span class="token punctuation">.</span>cn<span class="token operator">/</span>music<span class="token operator">/</span>photo_new<span class="token operator">/</span>T002R300x300M000002MwneO44kDAi<span class="token punctuation">.</span>jpg</code></pre>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>音乐链接</tag>
      </tags>
  </entry>
  <entry>
    <title>易语言对接腾讯ai智能闲聊</title>
    <url>/2020/0307/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/12/38621881e9146614e.jpg) -->
<a id="more"></a>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>腾讯闲聊服务基于AI Lab领先的NLP引擎能力、数据运算能力和千亿级互联网语料数据的支持，同时集成了广泛的知识问答能力，可实现上百种自定义属性配置，以及男、女不同的语言风格及说话方式，从而让聊天变得更睿智、简单和有趣</p>
</blockquote>
<blockquote>
<p>基础闲聊接口提供基于文本的基础聊天能力，可以让您的应用快速拥有具备上下文语义理解的机器聊天功能。</p>
</blockquote>
<p>注：同时我将此接口制作成插件，可以应用在<code>QQ</code>和微信上。再也不怕自己一个人没人聊天了。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先在<a href="https://ai.qq.com/" target="_blank" rel="noopener">腾讯ai官网</a>注册自己的账号，将智能闲聊接入。然后在控制台-应用管理，找到刚接入的智能闲聊，在应用信息里面得到APPID，APPKEY两个参数。<br><img src="http://s1.wailian.download/2020/03/11/20200307114018.png" alt="首页"></p>
<p>基础闲聊API地址：</p>
<pre><code>https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat</code></pre><p>入参：</p>
<p><img src="http://s1.wailian.download/2020/03/11/20200307114831.png" alt="image"></p>
<h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p><code>getAI</code> 方法</p>
<p>注意： <code>#app_id</code> 和 <code>#app_key</code> 就是上面申请得到的两个参数</p>
<pre><code>.版本 2

.子程序 getAI, , 公开
.参数 msg, 文本型, , 消息内容
.局部变量 入参, 文本型
.局部变量 time_stamp, 文本型
.局部变量 nonce_str, 文本型
.局部变量 session, 文本型
.局部变量 question, 文本型
.局部变量 sign, 文本型
.局部变量 反参, 文本型
.局部变量 JSON, 类_json
.局部变量 回复消息, 文本型

msg ＝ 删全部空 (msg)
&#39; 限制问题字数不能超过250字节 ，官方要求：非空且长度上限300字节
.如果真 (取文本长度 (msg) ＞ 250)
    返回 ()
.如果真结束

time_stamp ＝ 时间_取现行时间戳 (真)
nonce_str ＝ 文本_取随机字符 (16)
session ＝ nonce_str
question ＝ 编码_URL编码 (编码_gb2312到utf8 (msg), 真, )
入参 ＝ “app_id=” ＋ #app_id ＋ “&amp;nonce_str=” ＋ nonce_str ＋ “&amp;question=” ＋ question ＋ “&amp;session=” ＋ session ＋ “&amp;time_stamp=” ＋ time_stamp
&#39; 入参一定要按照字典顺序排好，不然签名不对
sign ＝ getSign (入参)
入参 ＝ 入参 ＋ “&amp;sign=” ＋ sign
反参 ＝ 编码_utf8到gb2312 (网页_访问S (“https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat”, 1, 入参, , , , , , , , , , , , , , , , , , ))

.如果真 (JSON.解析 (反参))
    .如果真 (JSON.取通用属性 (“ret”, ) ＝ “0”)
        回复消息 ＝ JSON.取通用属性 (“data.answer”, )
        .如果真 (回复消息 ≠ “”)
            &#39; 得到智能ai的回答之后，做你想做的事情
        .如果真结束

    .如果真结束

</code></pre><p><code>getSign</code> 方法</p>
<pre><code>.版本 2

.子程序 getSign, 文本型
.参数 入参, 文本型


返回 (校验_取md5 (到字节集 (入参 ＋ “&amp;app_key=” ＋ #app_key), 真, ))

</code></pre><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>最后还可以在腾讯<code>ai</code>控制台中配置多重属性的闲聊画像，并且可配置的属性会持续增加，使闲聊的风格因您的喜好而不同。<br>可以实时观看应用概况<br><img src="http://s1.wailian.download/2020/03/11/20200307115953.png" alt="image"></p>
]]></content>
      <categories>
        <category>易语言</category>
      </categories>
      <tags>
        <tag>易语言</tag>
      </tags>
  </entry>
  <entry>
    <title>win10安装git</title>
    <url>/2020/0306/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/12/42284a29cf41f91ef.jpg) -->
<a id="more"></a>
<h2 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h2><p>去<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git官网</a>下载<code>win</code>版本<code>64</code>位<br>安装全部下一步到结束</p>
<h2 id="下载小乌龟"><a href="#下载小乌龟" class="headerlink" title="下载小乌龟"></a>下载小乌龟</h2><p>去<a href="https://tortoisegit.org/download/" target="_blank" rel="noopener">tortoriseGit官网</a>下载<code>64</code>位小乌龟。<br>然后下面还有一个中文语言包（不下载也行），<code>Language Packs</code> 下面的 <code>Chinese, simplified</code><br>先安装小乌龟，一路暴力下一步到结束。安装语言包，一路到结束。<br>鼠标右键打开小乌龟设置，选择语言为中文，结束！</p>
<h2 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h2><p>鼠标右键 打开 <code>Git Bash</code></p>
<p>输入下面的命令<br>将邮箱换成你自己的邮箱、然后回车</p>
<pre class=" language-java"><code class="language-java">ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>o <span class="token operator">-</span>t rsa <span class="token operator">-</span>b <span class="token number">4096</span> <span class="token operator">-</span>C <span class="token string">"email@example.com"</span></code></pre>
<p>然后出现提示 密钥保存的位置。记一下<br>使用默认密钥地址，继续回车<br>提示你对密钥设置密码，这里无需设置，直接按回车键就好，要按两次回车键。<br>之后就会显示保存成功<br>然后打开默认位置，看一下有没有两个文件<br><img src="https://img-blog.csdnimg.cn/20200306173738233.png" alt="密钥"></p>
<h2 id="添加密钥到Git服务器"><a href="#添加密钥到Git服务器" class="headerlink" title="添加密钥到Git服务器"></a>添加密钥到Git服务器</h2><p>登录进来之后点击右上角的图标，选择settings设置SSH密钥<br><img src="https://img-blog.csdnimg.cn/2020030617384577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择 <code>SSH keys</code><br>然后 <code>new SSH keys</code><br>将刚才生成的公钥放进去保存即可。</p>
<h2 id="配置本地私钥"><a href="#配置本地私钥" class="headerlink" title="配置本地私钥"></a>配置本地私钥</h2><p>在文件夹空白处右键选择<code>TortoiseGit</code>的设置(<code>setting</code>)选项<br><img src="https://img-blog.csdnimg.cn/20200306174116319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一直点下一步到下面的这个页面，中间会让你输入你的名称和邮箱（名称随便写，邮箱还写你那个邮箱），然后点击 生成<code>PuTTY</code>密钥对<br><img src="https://img-blog.csdnimg.cn/20200306174318690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择你刚才的私钥<br><img src="https://img-blog.csdnimg.cn/20200306174349611.png" alt="在这里插入图片描述"><br>然后点击<code>Save private key</code> 保存成<code>PuTTY</code> 格式的私钥<br><img src="https://img-blog.csdnimg.cn/20200306174436984.png" alt="在这里插入图片描述"><br>保存成功后关闭窗口</p>
<h2 id="TortoiseGit克隆项目加载私钥"><a href="#TortoiseGit克隆项目加载私钥" class="headerlink" title="TortoiseGit克隆项目加载私钥"></a>TortoiseGit克隆项目加载私钥</h2><p>右键<code>Git</code>克隆弹出如下窗口<br><img src="https://img-blog.csdnimg.cn/20200306174550620.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200306174746242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>结束。</p>
]]></content>
      <categories>
        <category>安裝</category>
      </categories>
      <tags>
        <tag>安装git</tag>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title>酷q表情使用</title>
    <url>/2020/0119/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/12/58bbe62ac415d6f92.jpg) -->
<a id="more"></a>
<h2 id="表情1"><a href="#表情1" class="headerlink" title="表情1"></a>表情1</h2><p>在消息内添加</p>
<p>[CQ:face,id=XXX]</p>
<p>其中XXX为下面中的编号</p>
<p>例如你想添加微笑表情：[CQ:face,id=14][CQ:face,id=14][CQ:face,id=14]</p>
<p>结果就是三个微笑表情<br><img src="https://img-blog.csdnimg.cn/20200119144211711.png" alt="face表情"></p>
<h2 id="表情2"><a href="#表情2" class="headerlink" title="表情2"></a>表情2</h2><p>在消息内添加</p>
<p>[CQ:emoji,id=XXX]</p>
<p>其中XXX为下面中的编号</p>
<p>例如你想添加雪花表情：[CQ:emoji,id=10052]<br><img src="https://img-blog.csdnimg.cn/2020011914444148.png" alt="emoji表情"></p>
]]></content>
      <categories>
        <category>酷q</category>
      </categories>
      <tags>
        <tag>酷q</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Excel导出导入</title>
    <url>/2020/0116/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/12/64c7182e49f7d0710.jpg) -->
<a id="more"></a>
<h2 id="1-EasyExcel介绍"><a href="#1-EasyExcel介绍" class="headerlink" title="1. EasyExcel介绍"></a>1. EasyExcel介绍</h2><h3 id="1-1-为什么使用EasyExcel？"><a href="#1-1-为什么使用EasyExcel？" class="headerlink" title="1.1 为什么使用EasyExcel？"></a>1.1 为什么使用EasyExcel？</h3><blockquote>
<p>Java解析、生成Excel比较有名的框架有Apache poi、jxl。但他们都存在一个严重的问题就是非常的耗内存，poi有一套SAX模式的API可以一定程度的解决一些内存溢出的问题，但POI还是有一些缺陷，比如07版Excel解压缩以及解压后存储都是在内存中完成的，内存消耗依然很大。easyexcel重写了poi对07版Excel的解析，能够原本一个3M的excel用POI sax依然需要100M左右内存降低到几M，并且再大的excel不会出现内存溢出，03版依赖POI的sax模式。在上层做了模型转换的封装，让使用者更加简单方便</p>
</blockquote>
<blockquote>
<p>快速、简单避免OOM的java处理Excel工具，64M内存1分钟内读取75M(46W行25列)的Excel。</p>
</blockquote>
<p>写的内容大致和<a href="https://github.com/alibaba/easyexcel" target="_blank" rel="noopener">阅读官方文档</a>差不多</p>
<h2 id="2-开始使用"><a href="#2-开始使用" class="headerlink" title="2. 开始使用"></a>2. 开始使用</h2><h3 id="2-1-引入jar"><a href="#2-1-引入jar" class="headerlink" title="2.1 引入jar"></a>2.1 引入jar</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>easyexcel插件 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>easyexcel<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.1</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>lombok插件<span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>dependency<span class="token operator">></span>
    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
    <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre>
<h3 id="2-2-实体类"><a href="#2-2-实体类" class="headerlink" title="2.2 实体类"></a>2.2 实体类</h3><p>根据自己的情况自定义表格导入导出实体类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>excelentity<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ExcelIgnore<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ExcelProperty<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>format<span class="token punctuation">.</span>DateTimeFormat<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>write<span class="token punctuation">.</span>style<span class="token punctuation">.</span>ColumnWidth<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ Description   :  用户表格专用实体
 * @ Author        :  GMaya
 * @ CreateDate    :  2020/1/16 9:13
 * @ Version       :  1.0
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserExcel</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/** 生成报表时忽略，不生成次字段 */</span>
    <span class="token annotation punctuation">@ExcelIgnore</span>
    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/** 定义表头名称和位置,0代表第一列 */</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户名称"</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户年龄"</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> userAge<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户昵称"</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String userNick<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户地址"</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String userAddress<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/** 指定列宽 */</span>
    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">/** 转化时间 */</span>
    <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户生日"</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> Date userBrithday<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="2-3-ExcelUtil工具类"><a href="#2-3-ExcelUtil工具类" class="headerlink" title="2.3 ExcelUtil工具类"></a>2.3 ExcelUtil工具类</h3><p>根据实际情况封装成工具类，我就写了俩</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>util<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>EasyExcel<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>read<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>ReadListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ExcelTypeEnum<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>MultipartFile<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLEncoder<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ Description   :  excel工具类
 * @ Author        :  GMaya
 * @ CreateDate    :  2020/1/16 9:35
 * @ Version       :  1.0
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelUtil</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 导出文件 到浏览器
     * @param response 响应请求
     * @param excelName excel名称
     * @param sheetName sheet页面名称
     * @param clazz 要转换的实体类类型
     * @param data 要导出的数据
     * @throws Exception 异常
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">export2Web</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span> String excelName<span class="token punctuation">,</span> String sheetName<span class="token punctuation">,</span> Class <span class="token class-name">clazz</span><span class="token punctuation">,</span> List data<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/vnd.ms-excel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 这里URLEncoder.encode可以防止中文乱码</span>
        excelName <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>excelName<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> excelName <span class="token operator">+</span> ExcelTypeEnum<span class="token punctuation">.</span>XLSX<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        EasyExcel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span>sheetName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 读取Excel表格
     * @param excel 文件
     * @param head 实体类映射
     * @param readListener 模板的读取类
     * @throws Exception
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readExcel</span><span class="token punctuation">(</span>MultipartFile excel<span class="token punctuation">,</span> Class <span class="token class-name">head</span><span class="token punctuation">,</span>ReadListener readListener<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        EasyExcel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>excel<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>head<span class="token punctuation">,</span>readListener<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h3 id="2-4-模板读取类"><a href="#2-4-模板读取类" class="headerlink" title="2.4 模板读取类"></a>2.4 模板读取类</h3><p>创建模板读取类， 这个是表格导入的时候需要的，表格中的数据将在这个类里面单独处理，根据类里面设置的数值进行存库，也就是<code>10w</code>条数据，每当1000条就存一下表，方便内存回收。 不然一次性读10w，要占多少。。。<br>实际情况将下面的构造方法注释打开，相当于你在<code>controlle</code>中调用，然后将<code>Service</code>传进来就<code>ok</code>了。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>excelentity<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span>AnalysisContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>event<span class="token punctuation">.</span>AnalysisEventListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ Description   :  模板的读取类
 * @ Author        :  GMaya
 * @ CreateDate    :  2020/1/16 10:43
 * @ Version       :  1.0
 */</span>
<span class="token comment" spellcheck="true">// 有个很重要的点 UserListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去</span>
<span class="token annotation punctuation">@Slf4j</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserListener</span> <span class="token keyword">extends</span> <span class="token class-name">AnalysisEventListener</span><span class="token operator">&lt;</span>UserExcel<span class="token operator">></span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BATCH_COUNT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>UserExcel<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。
     */</span>
    <span class="token comment" spellcheck="true">//    private UserService userService;</span>

   <span class="token comment" spellcheck="true">/* public UserListener(){
        // 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数
        userService = new UserService();
    }*/</span>

    <span class="token comment" spellcheck="true">/**
     * 如果使用了spring,请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来
     *
     * @param userService
     */</span>
   <span class="token comment" spellcheck="true">/* public UserListener(UserService userService) {
        this.userService = userService;
    }*/</span>

    <span class="token comment" spellcheck="true">/**
     * 这个每一条数据解析都会来调用
     * @param data
     * @param context
     *
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>UserExcel data<span class="token punctuation">,</span> AnalysisContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"解析到一条数据:{}"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> BATCH_COUNT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span>
            <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 存储完成清理 list</span>
            list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span>AnalysisContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"所有数据解析完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 加上存储数据库
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{}条数据，开始存储数据库！"</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//        userService.saveBatch(list);</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"存储数据库成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="2-5-controller测试"><a href="#2-5-controller测试" class="headerlink" title="2.5 controller测试"></a>2.5 controller测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>EasyExcel<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>ExcelReader<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>MultipartFile<span class="token punctuation">;</span>
<span class="token keyword">import</span> top<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> top<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>excelentity<span class="token punctuation">.</span>UserExcel<span class="token punctuation">;</span>
<span class="token keyword">import</span> top<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>excelentity<span class="token punctuation">.</span>UserListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> top<span class="token punctuation">.</span>gmaya<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ExcelUtil<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @ Description   : 测试
 * @ Author        :  GMaya
 * @ CreateDate    :  2020/1/15 16:55
 * @ Version       :  1.0
 */</span>
<span class="token annotation punctuation">@Slf4j</span> <span class="token annotation punctuation">@RestController</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 导出excel
     * @param response
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/export2Web"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">export2Web</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 模拟数据</span>
        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> i<span class="token punctuation">,</span> <span class="token string">"张三"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">"小三"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"杭州"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            ExcelUtil<span class="token punctuation">.</span><span class="token function">export2Web</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">"用户表"</span><span class="token punctuation">,</span> <span class="token string">"用户信息"</span><span class="token punctuation">,</span> UserExcel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"报表导出异常:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 导入excel
     * @param file
     * @return
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/exportImport"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">exportImport</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            ExcelUtil<span class="token punctuation">.</span><span class="token function">readExcel</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> UserExcel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">"succeed"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><h3 id="3-1-导出测试"><a href="#3-1-导出测试" class="headerlink" title="3.1 导出测试"></a>3.1 导出测试</h3><p>启动项目，浏览器访问接口<br>直接弹框提示保存位置。保存查看里面内容<br><img src="https://img-blog.csdnimg.cn/20200116140325950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="导出结果"></p>
<h3 id="3-2-导入测试"><a href="#3-2-导入测试" class="headerlink" title="3.2 导入测试"></a>3.2 导入测试</h3><p>使用postman测试文件导入<br><img src="https://img-blog.csdnimg.cn/20200116140457725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="导入结果"><br>key：<code>Content-Type</code><br>value：<code>multipart/form-data</code><br><img src="https://img-blog.csdnimg.cn/20200116140542185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="头部信息"><br><img src="https://img-blog.csdnimg.cn/20200116140701324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="结果"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>建站心得</title>
    <url>/2020/0110/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/12/799c2afb5e71ab9ae.jpg) -->
<a id="more"></a>
<p>从偶然发现个人博客开始，就开始着手搭建一个自己的博客网站，也许写不出什么有技术含量的东西，但是也图个新鲜，练练手，记录一下自己的成长经历！<br>但是就是这个随手开始弄得网站，前前后后花了将近一个月，<code>SO</code>,我要将自己的过程记录下来！</p>
<h3 id="1-买服务器"><a href="#1-买服务器" class="headerlink" title="1. 买服务器"></a>1. 买服务器</h3><p>&lt;此步骤可以省略&gt;<br>我是购买的腾讯云，首次大幅度优惠，<code>99</code>/年。当然，博客如果都是静态页面，也可以不需要服务器，直接部署到<code>github</code>，或者码云上，都是可以的（免费）。<br>如果你只需要搭建博客不需要其他的，可以不买服务器，忽略即可。我是因为还要用服务器干点其他的。</p>
<h3 id="2-买域名"><a href="#2-买域名" class="headerlink" title="2. 买域名"></a>2. 买域名</h3><p>&lt;此步骤可以省略&gt;<br>我是在腾讯云打折<code>5</code>块钱买了一年的域名，虽然不买也行，用<code>github</code>自动生成的也中，但我不想要！</p>
<h4 id="2-1-备案"><a href="#2-1-备案" class="headerlink" title="2.1 备案"></a>2.1 备案</h4><p>使用国内服务器，域名不管是哪里的，都需要备案！反正我资料啥的一顿填，大概半个月备案成功！我刚开始买了之后大概一星期左右网站使用域名已经进不去了，一直让我去备案。</p>
<h4 id="2-2-域名解析"><a href="#2-2-域名解析" class="headerlink" title="2.2 域名解析"></a>2.2 域名解析</h4><p>将域名解析到我的服务器</p>
<h4 id="2-3-nginx代理"><a href="#2-3-nginx代理" class="headerlink" title="2.3 nginx代理"></a>2.3 nginx代理</h4><p>我是使用的nginx代理的静态页面，然后将我生成好的博客页面直接放到服务器，配置好<code>nginx</code>的配置就<code>ok</code>，然后直接访问域名。当然也可以搞个tomcat放到里面。</p>
<h4 id="2-4-SSL证书"><a href="#2-4-SSL证书" class="headerlink" title="2.4 SSL证书"></a>2.4 SSL证书</h4><p>弄完之后我的访问域名是不安全的链接，所以我又免费申请了一个<code>SSL</code>证书，配置到<code>nginx</code>中，然后博客就可以<code>https</code>访问了。</p>
<h3 id="3-hexo建站"><a href="#3-hexo建站" class="headerlink" title="3. hexo建站"></a>3. hexo建站</h3><h4 id="3-1-配置环境"><a href="#3-1-配置环境" class="headerlink" title="3.1 配置环境"></a>3.1 配置环境</h4><p>首先根据hexo官方网站将本地环境搭建起来，对于经常使用<code>git</code>提交拉取公司项目的人，很快都搞定了。</p>
<h4 id="3-2-挑选模板"><a href="#3-2-挑选模板" class="headerlink" title="3.2 挑选模板"></a>3.2 挑选模板</h4><p>直接在hexo官方网站挑选自己中意的博客模板，我默默挑了好多，中间改过好几次，总之挑一个自己喜欢的。</p>
<h4 id="3-3-修改模板"><a href="#3-3-修改模板" class="headerlink" title="3.3 修改模板"></a>3.3 修改模板</h4><p>一般都是根据模板的博主介绍，一步一步一步一步一步一步修改成为自己的博客。总之我感觉这一步是最长的。</p>
<h3 id="4-写博客"><a href="#4-写博客" class="headerlink" title="4. 写博客"></a>4. 写博客</h3><p>不积跬步，无以至千里；不积小流，无以成江海。在接下来的岁月写你想写的东西吧。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>认识酷q</title>
    <url>/2019/kuq-know/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/12/81bc7bcc4eb1ba03c.jpg) -->
<a id="more"></a>

<p>##酷q是干嘛的</p>
<blockquote>
<p>酷Q Air 是一个轻巧、免费、高效的机器人核心，功能需要安装“应用”实现。登录酷Q，完成教程后，建议 访问 酷Q应用发布板块，下载安装您所需要的应用，创造让大家喜爱并且属于你自己的专属机器人。</p>
</blockquote>
<p>官网：<a href="https://cqp.cc/" target="_blank" rel="noopener">酷q社区</a></p>
<p>通俗的讲就是，打造一个属于自己的<code>qq</code>机器人，有点类似于现在的<code>q群管家</code>，<code>qq小冰</code>。但是你可以把他的功能再次扩大！（活跃群气氛必不可少）。主要有：入群欢迎，问答，便民（查天气，查快递等），各种小游戏娱乐，关键词禁言等等，需要看代码功底，当然你也可以去社区下载别人分享的插件，直接使用。</p>
<p>我也是在偶然的机会认识到了<code>酷q</code>，然后就爱不释手，从<code>0</code>开始学习了易语言，然后写出了第一个<code>酷q</code>插件<a href="https://cqp.cc/t/46270" target="_blank" rel="noopener">猜拳签到游戏</a>，当然我并不满足，然后又写出了查电影，问答，查运势，查天气，查新闻，随机笑话等，当然这些我并没有发布出来， 因为这些第三方接口我是免费用的，每天有限制几百条， 所以不适合分享，只是在自己的群里面使用而已。</p>
<p>如果你和我一样刚刚认识<code>酷q</code>，那么你不妨看一下这个<a href="https://docs.cqp.im/" target="_blank" rel="noopener">快速入门</a><br>使用<a href="https://cqp.cc/t/15124" target="_blank" rel="noopener">sdk</a>进行<code>酷q</code>开发。由于教程很多，我就没得写了，如果有不懂的可以留言评论或者到关于我页面查看联系方式。</p>
<p>但是我是<code>java</code>开发者，使用易语言难免有所不习惯，所以参考了<a href="https://cqp.cc/t/37318" target="_blank" rel="noopener">南荒喵</a>大佬的教程，使用支持<code>java</code>的<code>sdk</code>进行开发。</p>
<p>到了最后我在此<code>demo</code>上又加上<code>mybatis-plus</code>，<code>springboot</code>，连接数据库，等一系列操作。</p>
<p>有的时候思路是个好东西，当我弄完之后，我不知道写什么东西了，整天都是配环境，搭建环境，但是到最后写插件内容的时候，迷茫了，写什么呢，写什么好呢，写什么会有人用呢，看社区里面，那都是人家写出来的，你再写一遍干嘛呢。</p>
<p>好多东西都是 从简单，到复杂，到迷茫，到不知所措。（服务器自己买了一个，<code>酷q</code>是用的免费的）</p>
<p>然后我就认识了<code>jsoup</code>，百度百科是这样说的</p>
<blockquote>
<p>jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p>
</blockquote>
<p>然后我就又陷入了进去，忘记了游戏，忘记了时间。</p>
<p>希望前进的路上不再迷茫！</p>
]]></content>
      <categories>
        <category>酷q</category>
      </categories>
      <tags>
        <tag>酷q</tag>
      </tags>
  </entry>
  <entry>
    <title>idea在jdk1.8情况下使用反编译插件</title>
    <url>/2019/idea-decompilation/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/12/9.jpg) -->
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用<code>JD-GUI</code>在<code>jdk1.8</code>情况下失效，我也查找了好多办法，最后看到<code>idea</code>有默认的，只是没有打开，瞬间搞定，记录一下！</p>
<p>没有反编译是显示<code>compiled code</code></p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">debug</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> messages<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* compiled code */</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">debug</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> messages<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* compiled code */</span> <span class="token punctuation">}</span></code></pre>
<p><code>idea</code>不需要安装任何插件， 比如<code>JD-GUI</code>（这个在<code>jdk1.8</code>还是打不开）</p>
<p>因为，安装idea默认有，只是没有打开罢了</p>
<p>打开<code>setting</code> –&gt;<code>plugings</code> 搜索 <code>Java Bytecode Decompiler</code></p>
<p><img src="https://img-blog.csdnimg.cn/20191230114857888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="设置"><br>勾选，然后重启<code>idea</code> （注意：你的其他反编译插件就不要开了，关掉）</p>
<p>重启之后会让你选择 是否同意使用此插件， 点击最左面<code>accept</code>，同意即可！</p>
<p><img src="https://img-blog.csdnimg.cn/2019123011510349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="结果"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>idea插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java性能测试大比拼</title>
    <url>/2019/property-compare/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/12/113decce27b2d5f5bd.jpg) -->
<a id="more"></a>

<p>实体类转换哪个快？<code>Map</code>循环遍历哪个快？转换为字符串哪个快？测试，分析，看源码，看底层知识。</p>
<h2 id="dao和vo实体转换比拼"><a href="#dao和vo实体转换比拼" class="headerlink" title="dao和vo实体转换比拼"></a>dao和vo实体转换比拼</h2><p>参与比拼的两个选手:</p>
<ol>
<li>org.springframework.beans.BeanUtils</li>
<li>org.springframework.cglib.beans.BeanCopier</li>
</ol>
<p>测试方式:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> leng <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span>
        Stu stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stu<span class="token punctuation">.</span><span class="token function">setStuId</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stu<span class="token punctuation">.</span><span class="token function">setStuName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stu<span class="token punctuation">.</span><span class="token function">setStuAge</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stu<span class="token punctuation">.</span><span class="token function">setStuClassId</span><span class="token punctuation">(</span><span class="token string">"ClassId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        StuVO stuVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StuVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> l <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> leng<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            BeanCopier beanCopier <span class="token operator">=</span> BeanCopier<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stuVO<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            beanCopier<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>stuVO<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"beanCopier.copy:"</span><span class="token operator">+</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        l <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> leng<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>stuVO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BeanUtils.copyProperties:"</span><span class="token operator">+</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>比拼结果:</p>
<p><img src="https://img-blog.csdnimg.cn/20190426160609633.png" alt="结果"></p>
<p><strong>备注:</strong> 如果把<code>BeanCopier.create</code>放到循环外,效率还可以加快!!!  可能由于各方面原因,次数较少时测试不准</p>
<h2 id="Map遍历几种方式比拼"><a href="#Map遍历几种方式比拼" class="headerlink" title="Map遍历几种方式比拼"></a>Map遍历几种方式比拼</h2><p>参与比拼的四个选手:</p>
<ol>
<li><code>keySet</code>的<code>for</code>循环方式</li>
<li><code>keySet</code>的<code>iterator</code>迭代器方式</li>
<li><code>entrySet</code>的<code>for</code>循环方式</li>
<li><code>entrySet</code>的<code>iterator</code>迭代器方式</li>
</ol>
<p>测试方式:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">keySet</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">keySetIterator</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">entrySet</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">entrySetIterator</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * keySet的for循环方式
     * @param map
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">keySet</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"keySet运行时间"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * keySet的iterator迭代器方式
     * @param map
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">keySetIterator</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"keySetIterator运行时间"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * entrySet的for循环方式
     * @param map
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">entrySet</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"entrySet运行时间"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * entrySet的iterator迭代器方式
     * @param map
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">entrySetIterator</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Iterator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"entrySetIterator运行时间"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>比拼结果:</p>
<p><img src="https://img-blog.csdnimg.cn/20190426164641566.png" alt="结果2"></p>
<p>备注:可能由于各方面原因,次数较少时测试不准</p>
<h2 id="基本数据类型转为字符串方法比拼"><a href="#基本数据类型转为字符串方法比拼" class="headerlink" title="基本数据类型转为字符串方法比拼"></a>基本数据类型转为字符串方法比拼</h2><p>参与比拼的三个选手:</p>
<ol>
<li>基本数据类型<code>.toString()</code></li>
<li><code>String.valueOf(数据)</code></li>
<li>数据+””</li>
</ol>
<p>测试方法:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">1000000000</span><span class="token punctuation">;</span>
        Integer t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            String str <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Integer.toString()："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            String str <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String.valueOf()："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            String str <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t + '' :"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>比拼结果:</p>
<p><img src="https://img-blog.csdnimg.cn/20190426171337502.png" alt="结果3"></p>
<p>备注:可能由于各方面原因,次数较少时测试不准</p>
<pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法底层调用了Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，但是会在调用前做空判断

<span class="token number">2</span><span class="token punctuation">.</span>Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，直接调用

<span class="token number">3</span><span class="token punctuation">.</span>t <span class="token operator">+</span> <span class="token string">""</span>底层使用了StringBuilder实现，先用append方法拼接，再用<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法获取字符串</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>性能比较</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-plus之自动生成</title>
    <url>/2019/Mybatis-plus/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/12/104c0c7cc995b2dab6.jpg) -->
<a id="more"></a>

<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>本文章首次是在<code>csdn</code>上写的，本次发布到自己的博客中，增添一点色彩。</p>
<p>点击查看<a href="https://mybatis.plus/" target="_blank" rel="noopener">Mybatis-plus官方文档</a></p>
<blockquote>
<p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
</blockquote>
<h2 id="2-创建spring-boot-项目"><a href="#2-创建spring-boot-项目" class="headerlink" title="2. 创建spring boot 项目"></a>2. 创建spring boot 项目</h2><p>使用<code>idea</code>默认生成即可 …</p>
<h2 id="3-修改pom文件"><a href="#3-修改pom文件" class="headerlink" title="3. 修改pom文件"></a>3. 修改pom文件</h2><pre class=" language-vbnet"><code class="language-vbnet">        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
           <groupId>org.springframework.boot</groupId>
           <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.1.0</version>
        </dependency>
        <!--mybatis-plus自动生成代码-->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-generator</artifactId>
            <version>3.1.0</version>
        </dependency>

        <!-- velocity 模版引擎 -->
        <dependency>
            <groupId>org.apache.velocity</groupId>
            <artifactId>velocity-engine-core</artifactId>
            <version>2.0</version>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!--lombok-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.16</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <!--swagger2-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
        </dependency>

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.9.2</version>
        </dependency></code></pre>
<h2 id="4-修改application-yml文件"><a href="#4-修改application-yml文件" class="headerlink" title="4. 修改application.yml文件"></a>4. 修改application.yml文件</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span><span class="token number">8</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> admin
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">mapperLocations</span><span class="token punctuation">:</span> classpath*<span class="token punctuation">:</span>mapper/*.xml
  <span class="token key atrule">typeAliasesPackage</span><span class="token punctuation">:</span> com.mybatis.plus.demo.model <span class="token comment" spellcheck="true"># mybatis 别名包扫描路径</span>
  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">1 </span><span class="token comment" spellcheck="true">#逻辑已删除值(默认为 1)</span>
      <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">0 </span><span class="token comment" spellcheck="true"># 逻辑未删除值(默认为 0)</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl
    <span class="token comment" spellcheck="true">#线上关闭sql日志打印</span></code></pre>
<h2 id="5-修改启动类"><a href="#5-修改启动类" class="headerlink" title="5. 修改启动类"></a>5. 修改启动类</h2><p><img src="https://img-blog.csdnimg.cn/20190612171238629.png" alt="启动类"></p>
<h2 id="6-创建Mybatis-plus配置"><a href="#6-创建Mybatis-plus配置" class="headerlink" title="6. 创建Mybatis-plus配置"></a>6. 创建Mybatis-plus配置</h2><p>新建文件<code>MyBatisPlusConfiguration</code></p>
<p><strong>注意</strong> : 如果使用<code>mp</code>自带的控制逻辑删除和控制版本号还有分页功能,则需要添加这个配置</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>plus<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>util<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>PaginationInterceptor<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>injector<span class="token punctuation">.</span>ISqlInjector<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>injector<span class="token punctuation">.</span>LogicSqlInjector<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>OptimisticLockerInterceptor<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusConfiguration</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 控制逻辑删除
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> ISqlInjector <span class="token function">sqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LogicSqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 控制版本号
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> OptimisticLockerInterceptor <span class="token function">optimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 分页插件
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="7-编写自动生成工具类"><a href="#7-编写自动生成工具类" class="headerlink" title="7. 编写自动生成工具类"></a>7. 编写自动生成工具类</h2><p><strong>注 :</strong> 直接把Controller/service/serviceImpl/dao/mapper/form/vo全部生成</p>
<p>此处使用默认<code>velocity</code> 模版引擎 则没有常用的<code>crud</code>方法,使用自己的模板则可以生成常用的<code>crud</code>方法</p>
<p>其中自定义模板中有工具类是公司自己的<code>jar</code>包,所以只推荐参考</p>
<p>拷贝<code>mybatis-plus-generator</code> <code>jar</code>包中的模板到自己项目<code>resources</code>下</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>plus<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>util<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>DbType<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>IdType<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>MybatisPlusException<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>toolkit<span class="token punctuation">.</span>StringPool<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>toolkit<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>AutoGenerator<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>InjectionConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>converts<span class="token punctuation">.</span>MySqlTypeConvert<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>po<span class="token punctuation">.</span>TableInfo<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>DbColumnType<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>IColumnType<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>NamingStrategy<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 代码生成器
 *
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MabatisPlusGenerator</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String path <span class="token operator">=</span> <span class="token string">"E:\\idea\\springboot-mybatis-plus"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件路径</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String table <span class="token operator">=</span> <span class="token string">"tm_user"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//table名字</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//1. 全局配置</span>
        GlobalConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">setActiveRecord</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 是否支持AR模式</span>
            <span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"GMaya"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 作者</span>
            <span class="token punctuation">.</span><span class="token function">setSwagger2</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 使用Swagger</span>
            <span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token string">"/src/main/java"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 生成路径</span>
            <span class="token punctuation">.</span><span class="token function">setFileOverride</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 文件覆盖</span>
            <span class="token punctuation">.</span><span class="token function">setIdType</span><span class="token punctuation">(</span>IdType<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 主键策略</span>
            <span class="token comment" spellcheck="true">// 自定义文件命名，注意 %s 会自动填充表实体属性！</span>
            <span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setServiceImplName</span><span class="token punctuation">(</span><span class="token string">"%sServiceImpl"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setControllerName</span><span class="token punctuation">(</span><span class="token string">"%sController"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMapperName</span><span class="token punctuation">(</span><span class="token string">"%sDao"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setXmlName</span><span class="token punctuation">(</span><span class="token string">"%sMapper"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 生成文件后 不打开文件夹</span>
            <span class="token punctuation">.</span><span class="token function">setBaseResultMap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// XML ResultMap</span>
            <span class="token punctuation">.</span><span class="token function">setBaseColumnList</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// XML columList</span>

        <span class="token comment" spellcheck="true">//2. 数据源配置</span>
        DataSourceConfig dsConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dsConfig<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置数据库类型</span>
            <span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>
                <span class="token string">"jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTypeConvert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MySqlTypeConvert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> IColumnType <span class="token function">processTypeConvert</span><span class="token punctuation">(</span>GlobalConfig globalConfig<span class="token punctuation">,</span> String fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldType<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"tinyint"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> DbColumnType<span class="token punctuation">.</span>BOOLEAN<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment" spellcheck="true">//将数据库中datetime转换成date</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldType<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"datetime"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> DbColumnType<span class="token punctuation">.</span>DATE<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">processTypeConvert</span><span class="token punctuation">(</span>globalConfig<span class="token punctuation">,</span> fieldType<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//3. 策略配置</span>
        StrategyConfig stConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stConfig<span class="token punctuation">.</span><span class="token function">setColumnNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 数据库表映射到实体的命名策略</span>
            <span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 使用Lombok</span>
            <span class="token punctuation">.</span><span class="token function">setVersionFieldName</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 数据库版本控制字段</span>
            <span class="token punctuation">.</span><span class="token function">setLogicDeleteFieldName</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 数据库逻辑删除字段</span>
            <span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setSuperServiceClass</span><span class="token punctuation">(</span><span class="token string">"com.baomidou.mybatisplus.extension.service.IService"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>table<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 生成的表</span>

        <span class="token comment" spellcheck="true">//4. 包名策略配置</span>
        PackageConfig pkConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pkConfig<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">"com.mybatis.plus.demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"dao"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setServiceImpl</span><span class="token punctuation">(</span><span class="token string">"service.impl"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"model"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//5.自定义配置</span>
        InjectionConfig cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InjectionConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// to do nothing</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        String templatePath <span class="token operator">=</span> <span class="token string">"/templates/mapper.xml.vm"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果模板引擎是 velocity</span>
        List<span class="token operator">&lt;</span>FileOutConfig<span class="token operator">></span> focList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自定义输出配置</span>
        focList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutConfig</span><span class="token punctuation">(</span>templatePath<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 自定义配置会被优先输出</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> String <span class="token function">outputFile</span><span class="token punctuation">(</span>TableInfo tableInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// mapper自定义输出文件名</span>
                <span class="token keyword">return</span> path <span class="token operator">+</span> <span class="token string">"/src/main/resources/mapper/"</span> <span class="token operator">+</span> tableInfo<span class="token punctuation">.</span><span class="token function">getEntityName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Mapper"</span>
                       <span class="token operator">+</span> StringPool<span class="token punctuation">.</span>DOT_XML<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// ------------form vo 使用默认模板请注释-begin-----------</span>
        templatePath <span class="token operator">=</span> <span class="token string">"/templates/entityForm.java.vm"</span><span class="token punctuation">;</span>
        focList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutConfig</span><span class="token punctuation">(</span>templatePath<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 自定义配置会被优先输出</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> String <span class="token function">outputFile</span><span class="token punctuation">(</span>TableInfo tableInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// form自定义输出文件名</span>
                <span class="token keyword">return</span> path <span class="token operator">+</span> <span class="token string">"/src/main/java/com/mybatis/plus/demo/pojo/"</span> <span class="token operator">+</span> tableInfo<span class="token punctuation">.</span><span class="token function">getEntityName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Form"</span>
                       <span class="token operator">+</span> StringPool<span class="token punctuation">.</span>DOT_JAVA<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        templatePath <span class="token operator">=</span> <span class="token string">"/templates/entityVO.java.vm"</span><span class="token punctuation">;</span>
        focList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutConfig</span><span class="token punctuation">(</span>templatePath<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 自定义配置会被优先输出</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> String <span class="token function">outputFile</span><span class="token punctuation">(</span>TableInfo tableInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// VO自定义输出文件名</span>
                <span class="token keyword">return</span> path <span class="token operator">+</span> <span class="token string">"/src/main/java/com/mybatis/plus/demo/pojo/"</span> <span class="token operator">+</span> tableInfo<span class="token punctuation">.</span><span class="token function">getEntityName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"VO"</span>
                       <span class="token operator">+</span> StringPool<span class="token punctuation">.</span>DOT_JAVA<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// ------------form vo 使用默认模板请注释-end-----------</span>
        cfg<span class="token punctuation">.</span><span class="token function">setFileOutConfigList</span><span class="token punctuation">(</span>focList<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 6 配置模板 自定义模板/在resources/templates 可以编辑</span>
        TemplateConfig templateConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplateConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 关闭默认 xml 生成，调整生成 至 根目录</span>
        templateConfig<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"/templates/entity.java"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"/templates/service.java"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"/templates/controller.java"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"/templates/mapper.java"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setServiceImpl</span><span class="token punctuation">(</span><span class="token string">"/templates/serviceImpl.java"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setXml</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//7. 整合配置</span>
        AutoGenerator ag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ag<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dsConfig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>stConfig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCfg</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pkConfig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTemplate</span><span class="token punctuation">(</span>templateConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//8. 执行</span>
        ag<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>注 :</strong> 如果是使用自定义模板,请注意修改模板中的<code>form</code>,<code>vo</code>引入包路径等</p>
<p>使用默认模板请注释代码中生成<code>form</code>/<code>vo</code>代码</p>
<p>第一次运行可能有以下错误,如果没有请忽略</p>
<p><strong>问题1 :</strong> The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or represents</p>
<p><strong>解决 :</strong> set global time_zone=’+8:00’</p>
<p><strong>问题2 :</strong> 使用<code>Lombok</code>插件,<code>Idea</code>,<code>Eclipse</code>必须安装改插件,否则找不到<code>get</code>/<code>set</code>方法</p>
<p><strong>解决 :</strong> <code>IDEA</code>安装<code>Lombok</code>步骤</p>
<p><img src="https://img-blog.csdnimg.cn/20190612104955146.png" alt="安装Lombok1"><br><img src="https://img-blog.csdnimg.cn/20190612105005460.png" alt="安装Lombok2"><br><code>Eclipse</code>的自行百度  /滑稽</p>
<p>修改文件路径表名之后运行</p>
<p>生成结构图如下</p>
<p><img src="https://img-blog.csdnimg.cn/20190612105718114.png" alt="结构图"><br>perfect  ! ! !</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/hello-world/</url>
    <content><![CDATA[<!-- ![](https://s1.wailian.download/2020/03/12/160172f10791af664.jpg) -->
<a id="more"></a>

<h2 id="各种语言的Hello-World"><a href="#各种语言的Hello-World" class="headerlink" title="各种语言的Hello World"></a>各种语言的Hello World</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><pre class=" language-bash"><code class="language-bash">$ System.out.println<span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<p>我说<code>Java</code>天下第一,你信么!</p>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><pre class=" language-bash"><code class="language-bash">$ printf<span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><pre class=" language-bash"><code class="language-bash">$ std::cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello,World!"</span> <span class="token operator">&lt;&lt;</span> std::endl<span class="token punctuation">;</span></code></pre>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token operator">>></span><span class="token operator">></span> print<span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span> </code></pre>
<h3 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h3><pre class=" language-bash"><code class="language-bash">$ Console.WriteLine<span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token keyword">echo</span> <span class="token string">"Hello,World!"</span><span class="token punctuation">;</span> </code></pre>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><pre class=" language-bash"><code class="language-bash">$ var sys <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"sys"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  sys.puts<span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><pre class=" language-bash"><code class="language-bash">$ puts  <span class="token string">"Hello,World!"</span></code></pre>
<h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><pre class=" language-bash"><code class="language-bash">$ print<span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span></code></pre>
<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token keyword">select</span> <span class="token string">'Hello,World!'</span> from dual<span class="token punctuation">;</span> </code></pre>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token operator">&lt;</span>p<span class="token operator">></span>Hello,World<span class="token operator">!</span><span class="token operator">&lt;</span>/p<span class="token operator">></span> </code></pre>
<h3 id="VB"><a href="#VB" class="headerlink" title="VB"></a>VB</h3><pre class=" language-bash"><code class="language-bash">$ MsgBox<span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span></code></pre>
<h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token keyword">echo</span> <span class="token string">"Hello,World!"</span></code></pre>
<h3 id="Delphi"><a href="#Delphi" class="headerlink" title="Delphi"></a>Delphi</h3><pre class=" language-bash"><code class="language-bash">$ label1.Caption :<span class="token operator">=</span> <span class="token string">'Hello,World!'</span><span class="token punctuation">;</span></code></pre>
<h3 id="TCL"><a href="#TCL" class="headerlink" title="TCL"></a>TCL</h3><pre class=" language-bash"><code class="language-bash">$ % puts <span class="token string">"Hello,World!"</span></code></pre>
<h3 id="Pascal"><a href="#Pascal" class="headerlink" title="Pascal"></a>Pascal</h3><pre class=" language-bash"><code class="language-bash">$ writeln<span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span> </code></pre>
<p>我认输了, 我是菜鸟! 一个<code>Hello, world!</code> 打败我了</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>HelloWorld</tag>
      </tags>
  </entry>
</search>
