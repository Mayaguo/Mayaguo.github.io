<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>定时任务@Scheduled入门</title>
    <url>/2020/20200330/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/30/WalkingCentral_ZH-CN6818231087_1920x1080.jpg" alt=""></p>
<a id="more"></a>
<p>一个最简单的例子:<br>启动类添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">// 开启定时任务</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/20200330113812718.png" alt=""></p>
<h2 id="编写单线程demo"><a href="#编写单线程demo" class="headerlink" title="编写单线程demo"></a>编写单线程demo</h2><p><img data-src="https://img-blog.csdnimg.cn/20200330135435331.png" alt=""></p>
<h3 id="cron-表达式"><a href="#cron-表达式" class="headerlink" title="cron 表达式"></a>cron 表达式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cron 表达式</span></span><br><span class="line"><span class="comment">     * 每2秒执行一次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/2 * * * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 经过测试,使用cron表达式,定时任务第二次会等待第一次执行完毕再开始!</span></span><br><span class="line">        Thread.sleep(<span class="number">5000L</span>);</span><br><span class="line">        log.info(<span class="string">"定时任务测试cron:"</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="fixedDelay"><a href="#fixedDelay" class="headerlink" title="fixedDelay"></a>fixedDelay</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  fixedDelay:</span></span><br><span class="line"><span class="comment">    *  第一次执行完毕才会执行第二次，时间间隔变为了7秒</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000L</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       Thread.sleep(<span class="number">5000L</span>);</span><br><span class="line">       log.info(<span class="string">"定时任务测试fixedDelay:"</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/2020033014024565.png" alt=""></p>
<h3 id="fixedRate"><a href="#fixedRate" class="headerlink" title="fixedRate"></a>fixedRate</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  fixedRate:</span></span><br><span class="line"><span class="comment">    *  每隔2秒就会执行, 但是因为单线程,所以在5秒后会输出,间隔就是5秒</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Scheduled</span>(fixedRate = <span class="number">2000L</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       Thread.sleep(<span class="number">5000L</span>);</span><br><span class="line">       log.info(<span class="string">"定时任务测试fixedRate:"</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/20200330140036576.png" alt=""><br>如果是一起执行这三个定时任务,那么会一个一个的来, 因为只有一个线程.</p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GMaya</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TaskScheduler <span class="title">taskScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskScheduler taskScheduler = <span class="keyword">new</span> ThreadPoolTaskScheduler();</span><br><span class="line">        taskScheduler.setPoolSize(<span class="number">50</span>); <span class="comment">// 设置线程池大小</span></span><br><span class="line">        <span class="keyword">return</span> taskScheduler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果只是加这一个配置类, 确实是使用了多线程, 每个定时任务都互相不影响.<br>但是一个线程第一次阻塞了,第二次就不行了,所以在定时任务上再加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/202003301418328.png" alt=""><br>就是说你这次失败了, 不要影响我下次的运行<br><img data-src="https://img-blog.csdnimg.cn/20200330141948593.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud 整合最新版seata分布式事务 (六)</title>
    <url>/2020/20200327-2/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/27/CharlestonAzaleas_ZH-CN3924268565_1920x1080.jpg" alt=""></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在我有 订单系统, 支付系统.注册中心<br>每个系统都是单独的,事务也都是本地事务,也是独立的.那么问题来了.<br>我—&gt;订单系统–&gt;支付系统.–&gt;订单系统—&gt;我<br>支付系统成功了 ,自己的事务也提交了.<br>到订单系统结果失败了.(结果就是钱付了,订单还未支付.)这样就存在了问题呀.<br>更多的问题也存在库存系统,加库存,改订单状态,支付等等,每个单独的模块事务怎么保持统一呢!!</p>
<h2 id="seata-介绍"><a href="#seata-介绍" class="headerlink" title="seata 介绍"></a>seata 介绍</h2><blockquote>
<p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案.</p>
</blockquote>
<p>seata各种官方例子连接:<a href="https://github.com/seata/seata-samples" target="_blank" rel="noopener">https://github.com/seata/seata-samples</a><br>seata服务端下载链接:<a href="https://github.com/seata/seata/releases" target="_blank" rel="noopener">https://github.com/seata/seata/releases</a></p>
<p>根据例子,我搞了好久好久好久好久好久才把例子跑起来.我也是服了,中间各种问题,网上的答案都尼玛一模一样!,人家都能成功,我就失败.郁闷死了.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.下载官方的服务端seata-server<br>2.下载官方客户端例子(我选的是springcloud-eureka-feign-mybatis-seata)<br>3.修改配置.<br>4.启动.<br>5.哪里错改哪里!<br>前4步也就半个小时,顶多俩小时,ok了.<br>第5步鬼知道多长时间.</p>
<p>我结合官方demo,整合到自己的项目中去.以及中间遇到的问题记录</p>
<h2 id="seata服务端"><a href="#seata服务端" class="headerlink" title="seata服务端"></a>seata服务端</h2><h3 id="下载seata服务端"><a href="#下载seata服务端" class="headerlink" title="下载seata服务端"></a>下载seata服务端</h3><p>seata服务端下载链接:<a href="https://github.com/seata/seata/releases" target="_blank" rel="noopener">https://github.com/seata/seata/releases</a><br>我选的是最新的v1.1.0版本,下载到本地即可<br><img data-src="https://img-blog.csdnimg.cn/20200327132932324.png" alt=""></p>
<h3 id="修改seata配置"><a href="#修改seata配置" class="headerlink" title="修改seata配置"></a>修改seata配置</h3><p>我这里就说win下怎么启动:<br>首先修改目录下的conf中的配置<br><strong>file.conf</strong><br>其中我没有使用db方式, 使用的默认file方式,应该不需要修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## transaction log store, only used in seata-server</span><br><span class="line">store &#123;</span><br><span class="line">  ## store mode: file、db</span><br><span class="line">  mode = <span class="string">"file"</span></span><br><span class="line"></span><br><span class="line">  ## file store property</span><br><span class="line">  file &#123;</span><br><span class="line">    ## store location dir</span><br><span class="line">    dir = <span class="string">"sessionStore"</span></span><br><span class="line">    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span><br><span class="line">    maxBranchSessionSize = <span class="number">16384</span></span><br><span class="line">    # globe session size , if exceeded throws exceptions</span><br><span class="line">    maxGlobalSessionSize = <span class="number">512</span></span><br><span class="line">    # file buffer size , if exceeded allocate new buffer</span><br><span class="line">    fileWriteBufferCacheSize = <span class="number">16384</span></span><br><span class="line">    # when recover batch read size</span><br><span class="line">    sessionReloadReadSize = <span class="number">100</span></span><br><span class="line">    # async, sync</span><br><span class="line">    flushDiskMode = async</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ## database store property</span><br><span class="line">  db &#123;</span><br><span class="line">    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.</span><br><span class="line">    datasource = <span class="string">"dbcp"</span></span><br><span class="line">    ## mysql/oracle/h2/oceanbase etc.</span><br><span class="line">    dbType = <span class="string">"mysql"</span></span><br><span class="line">    driverClassName = <span class="string">"com.mysql.jdbc.Driver"</span></span><br><span class="line">    url = <span class="string">"jdbc:mysql://127.0.0.1:3306/seata"</span></span><br><span class="line">    user = <span class="string">"mysql"</span></span><br><span class="line">    password = <span class="string">"mysql"</span></span><br><span class="line">    minConn = <span class="number">1</span></span><br><span class="line">    maxConn = <span class="number">10</span></span><br><span class="line">    globalTable = <span class="string">"global_table"</span></span><br><span class="line">    branchTable = <span class="string">"branch_table"</span></span><br><span class="line">    lockTable = <span class="string">"lock_table"</span></span><br><span class="line">    queryLimit = <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>registry.conf</strong><br>我使用的类型是eureka,配置上之前的注册中心地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class="line">  type = <span class="string">"eureka"</span></span><br><span class="line">  eureka &#123;</span><br><span class="line">    serviceUrl = <span class="string">"http://server01:8761/eureka/"</span></span><br><span class="line">    application = <span class="string">"default"</span></span><br><span class="line">    weight = <span class="string">"1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config &#123;</span><br><span class="line">  # file、nacos 、apollo、zk、consul、etcd3</span><br><span class="line">  type = <span class="string">"file"</span></span><br><span class="line">  file &#123;</span><br><span class="line">    name = <span class="string">"file.conf"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="启动seata服务端"><a href="#启动seata服务端" class="headerlink" title="启动seata服务端"></a>启动seata服务端</h3><p>修改完毕,首先启动你的注册中心eureka,然后启动这个seata服务端<br>首先进入bin目录<br>seata-server.bat  这个是win命令,<br>在这个目录进入cmd, 将这个文件拖进窗口,输入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">8091</span> -m file</span><br></pre></td></tr></table></figure>
<p>最终效果:<br><img data-src="https://img-blog.csdnimg.cn/20200327134047773.png" alt=""><br>脚本参数:<br>-p:指定启动seata server的端口号。<br>-h:指定seata server所绑定的主机<br>-m:指定事务日志、事务执行信息存储的方式，目前支持file（文件方式）、db（数据库方式)</p>
<p><strong>这个地方我遇到的问题:</strong><br>第一个:我没有指定主机,然后和后面的配置里面对应不上,显示连接不上seata server服务.</p>
<h2 id="导入jar"><a href="#导入jar" class="headerlink" title="导入jar"></a>导入jar</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--seata--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-alibaba-seata&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="修改自己项目的配置"><a href="#修改自己项目的配置" class="headerlink" title="修改自己项目的配置"></a>修改自己项目的配置</h2><p>新增两个配置文件,每个模块里面都需要,先修改一个,然后拷贝过去就行了<br><img data-src="https://img-blog.csdnimg.cn/20200327134824680.png" alt=""></p>
<h3 id="file-conf-文件"><a href="#file-conf-文件" class="headerlink" title="file.conf 文件"></a>file.conf 文件</h3><p>其中大部分是默认的,只需要修改一个地方</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service &#123;</span><br><span class="line">  #transaction service group mapping</span><br><span class="line">  vgroup_mapping.tx = <span class="string">"default"</span></span><br><span class="line">  #only support when registry.type=file, please don't set multiple addresses</span><br><span class="line">  <span class="keyword">default</span>.grouplist = <span class="string">"127.0.0.1:8091"</span></span><br><span class="line">  #degrade, current not support</span><br><span class="line">  enableDegrade = <span class="keyword">false</span></span><br><span class="line">  #disable seata</span><br><span class="line">  disableGlobalTransaction = <span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意,这个tx这个名字可以自己改,但是application.yml中一定要与之对应,往下看<br><img data-src="https://img-blog.csdnimg.cn/20200327135329393.png" alt=""></p>
<p>完整的file.conf 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">transport &#123;</span><br><span class="line">  # tcp udt unix-domain-socket</span><br><span class="line">  type = <span class="string">"TCP"</span></span><br><span class="line">  #NIO NATIVE</span><br><span class="line">  server = <span class="string">"NIO"</span></span><br><span class="line">  #enable heartbeat</span><br><span class="line">  heartbeat = <span class="keyword">true</span></span><br><span class="line">  # the client batch send request enable</span><br><span class="line">  enableClientBatchSendRequest = <span class="keyword">true</span></span><br><span class="line">  #thread factory for netty</span><br><span class="line">  threadFactory &#123;</span><br><span class="line">    bossThreadPrefix = <span class="string">"NettyBoss"</span></span><br><span class="line">    workerThreadPrefix = <span class="string">"NettyServerNIOWorker"</span></span><br><span class="line">    serverExecutorThread-prefix = <span class="string">"NettyServerBizHandler"</span></span><br><span class="line">    shareBossWorker = <span class="keyword">false</span></span><br><span class="line">    clientSelectorThreadPrefix = <span class="string">"NettyClientSelector"</span></span><br><span class="line">    clientSelectorThreadSize = <span class="number">1</span></span><br><span class="line">    clientWorkerThreadPrefix = <span class="string">"NettyClientWorkerThread"</span></span><br><span class="line">    # netty boss thread size,will not be used for UDT</span><br><span class="line">    bossThreadSize = <span class="number">1</span></span><br><span class="line">    #auto default pin or 8</span><br><span class="line">    workerThreadSize = <span class="string">"default"</span></span><br><span class="line">  &#125;</span><br><span class="line">  shutdown &#123;</span><br><span class="line">    # when destroy server, wait seconds</span><br><span class="line">    wait = <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">  serialization = <span class="string">"seata"</span></span><br><span class="line">  compressor = <span class="string">"none"</span></span><br><span class="line">&#125;</span><br><span class="line">service &#123;</span><br><span class="line">  #transaction service group mapping</span><br><span class="line">  vgroup_mapping.tx = <span class="string">"default"</span></span><br><span class="line">  #only support when registry.type=file, please don't set multiple addresses</span><br><span class="line">  <span class="keyword">default</span>.grouplist = <span class="string">"127.0.0.1:8091"</span></span><br><span class="line">  #degrade, current not support</span><br><span class="line">  enableDegrade = <span class="keyword">false</span></span><br><span class="line">  #disable seata</span><br><span class="line">  disableGlobalTransaction = <span class="keyword">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client &#123;</span><br><span class="line">  rm &#123;</span><br><span class="line">    asyncCommitBufferLimit = <span class="number">10000</span></span><br><span class="line">    lock &#123;</span><br><span class="line">      retryInterval = <span class="number">10</span></span><br><span class="line">      retryTimes = <span class="number">30</span></span><br><span class="line">      retryPolicyBranchRollbackOnConflict = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    reportRetryCount = <span class="number">5</span></span><br><span class="line">    tableMetaCheckEnable = <span class="keyword">false</span></span><br><span class="line">    reportSuccessEnable = <span class="keyword">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  tm &#123;</span><br><span class="line">    commitRetryCount = <span class="number">5</span></span><br><span class="line">    rollbackRetryCount = <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">  undo &#123;</span><br><span class="line">    dataValidation = <span class="keyword">true</span></span><br><span class="line">    logSerialization = <span class="string">"jackson"</span></span><br><span class="line">    logTable = <span class="string">"undo_log"</span></span><br><span class="line">  &#125;</span><br><span class="line">  log &#123;</span><br><span class="line">    exceptionRate = <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="registry-conf文件"><a href="#registry-conf文件" class="headerlink" title="registry.conf文件"></a>registry.conf文件</h3><p>注册选择type = eureka,然后配置eureka地址即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class="line">  type = <span class="string">"eureka"</span></span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = <span class="string">"localhost"</span></span><br><span class="line">    namespace = <span class="string">""</span></span><br><span class="line">    cluster = <span class="string">"default"</span></span><br><span class="line">  &#125;</span><br><span class="line">  eureka &#123;</span><br><span class="line">    serviceUrl = <span class="string">"http://server01:8761/eureka/"</span></span><br><span class="line">    application = <span class="string">"default"</span></span><br><span class="line">    weight = <span class="string">"1"</span></span><br><span class="line">  &#125;</span><br><span class="line">  redis &#123;</span><br><span class="line">    serverAddr = <span class="string">"localhost:6379"</span></span><br><span class="line">    db = <span class="string">"0"</span></span><br><span class="line">    password = <span class="string">""</span></span><br><span class="line">    cluster = <span class="string">"default"</span></span><br><span class="line">    timeout = <span class="string">"0"</span></span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    cluster = <span class="string">"default"</span></span><br><span class="line">    serverAddr = <span class="string">"127.0.0.1:2181"</span></span><br><span class="line">    session.timeout = <span class="number">6000</span></span><br><span class="line">    connect.timeout = <span class="number">2000</span></span><br><span class="line">    username = <span class="string">""</span></span><br><span class="line">    password = <span class="string">""</span></span><br><span class="line">  &#125;</span><br><span class="line">  consul &#123;</span><br><span class="line">    cluster = <span class="string">"default"</span></span><br><span class="line">    serverAddr = <span class="string">"127.0.0.1:8500"</span></span><br><span class="line">  &#125;</span><br><span class="line">  etcd3 &#123;</span><br><span class="line">    cluster = <span class="string">"default"</span></span><br><span class="line">    serverAddr = <span class="string">"http://localhost:2379"</span></span><br><span class="line">  &#125;</span><br><span class="line">  sofa &#123;</span><br><span class="line">    serverAddr = <span class="string">"127.0.0.1:9603"</span></span><br><span class="line">    application = <span class="string">"default"</span></span><br><span class="line">    region = <span class="string">"DEFAULT_ZONE"</span></span><br><span class="line">    datacenter = <span class="string">"DefaultDataCenter"</span></span><br><span class="line">    cluster = <span class="string">"default"</span></span><br><span class="line">    group = <span class="string">"SEATA_GROUP"</span></span><br><span class="line">    addressWaitTime = <span class="string">"3000"</span></span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = <span class="string">"file.conf"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config &#123;</span><br><span class="line">  # file、nacos 、apollo、zk、consul、etcd3、springCloudConfig</span><br><span class="line">  type = <span class="string">"file"</span></span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = <span class="string">"localhost"</span></span><br><span class="line">    namespace = <span class="string">""</span></span><br><span class="line">    group = <span class="string">"SEATA_GROUP"</span></span><br><span class="line">  &#125;</span><br><span class="line">  consul &#123;</span><br><span class="line">    serverAddr = <span class="string">"127.0.0.1:8500"</span></span><br><span class="line">  &#125;</span><br><span class="line">  apollo &#123;</span><br><span class="line">    app.id = <span class="string">"seata-server"</span></span><br><span class="line">    apollo.meta = <span class="string">"http://192.168.1.204:8801"</span></span><br><span class="line">    namespace = <span class="string">"application"</span></span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    serverAddr = <span class="string">"127.0.0.1:2181"</span></span><br><span class="line">    session.timeout = <span class="number">6000</span></span><br><span class="line">    connect.timeout = <span class="number">2000</span></span><br><span class="line">    username = <span class="string">""</span></span><br><span class="line">    password = <span class="string">""</span></span><br><span class="line">  &#125;</span><br><span class="line">  etcd3 &#123;</span><br><span class="line">    serverAddr = <span class="string">"http://localhost:2379"</span></span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = <span class="string">"file.conf"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="修改application-yml"><a href="#修改application-yml" class="headerlink" title="修改application.yml"></a>修改application.yml</h3><p><strong>第一个方式:</strong><br>注意,这个tx-service-group: 后面的tx一定要和上面配置中的tx一样.<strong>一定一定要一样</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    alibaba:</span><br><span class="line">      seata:</span><br><span class="line">        tx-service-group: tx</span><br></pre></td></tr></table></figure>

<p><strong>第二个方式:</strong></p>
<p>application.yml这个文件不指定tx-service-group,那么file.conf这个文件的vgroup_mapping.tx就必须修改为seata默认的形式<br>在这个源码中可以看到,如果你没有定义,那么你这个file.conf配置中必须设置为applicationName + “-fescar-service-group”<br>举例:我这个项目就必须设置为order-fescar-service-group</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: order</span><br></pre></td></tr></table></figure>

<p><img data-src="https://img-blog.csdnimg.cn/20200327140048543.png" alt=""><br>都是坑踩出来的…………..</p>
<h3 id="新增数据源配置"><a href="#新增数据源配置" class="headerlink" title="新增数据源配置"></a>新增数据源配置</h3><p>一开始我最下面的mybatis的配置没有注释,就会发生添加语句执行找不到mapper<br>注释掉就可以了.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gmaya.order.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源代理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GMaya</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceProxy <span class="title">dataSource</span><span class="params">(DataSource druidDataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProxy(druidDataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  @Bean</span></span><br><span class="line"><span class="comment">    public SqlSessionFactory sqlSessionFactory(DataSourceProxy dataSourceProxy)throws Exception&#123;</span></span><br><span class="line"><span class="comment">        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();</span></span><br><span class="line"><span class="comment">        sqlSessionFactoryBean.setDataSource(dataSourceProxy);</span></span><br><span class="line"><span class="comment">        sqlSessionFactoryBean.setMapperLocations(new PathMatchingResourcePatternResolver()</span></span><br><span class="line"><span class="comment">                .getResources("classpath*:/mapper/*.xml"));</span></span><br><span class="line"><span class="comment">        sqlSessionFactoryBean.setTransactionFactory(new SpringManagedTransactionFactory());</span></span><br><span class="line"><span class="comment">        return sqlSessionFactoryBean.getObject();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改启动类"><a href="#修改启动类" class="headerlink" title="修改启动类"></a>修改启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure>

<p>修改完将以上操作在pay中复制.</p>
<h3 id="数据库新增表"><a href="#数据库新增表" class="headerlink" title="数据库新增表"></a>数据库新增表</h3><p>因为我是模拟的, 所以,只要是操作数据库就行了,就没弄多个库,在一个数据库,一个表tb_user<br>此时在加一个seata需要的表undo_log</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for undo_log</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`undo_log`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`undo_log`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`branch_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`xid`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`context`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`rollback_info`</span> longblob <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`log_status`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`log_created`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`log_modified`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`ext`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`ux_undo_log`</span>(<span class="string">`xid`</span>, <span class="string">`branch_id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">7</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = <span class="keyword">Compact</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of undo_log</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>order中调用pay创建一条数据,然后自己在创建一条语句.<br>在order方法上加上注解</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">@GlobalTransactional</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/2020032714194427.png" alt=""><br>启动order 启动pay,<br>测试!</p>
<p>pay日志:<br>添加数据成功没错,但是结果回滚了<br><img data-src="https://img-blog.csdnimg.cn/20200327142124397.png" alt=""><br>order日志:<br><img data-src="https://img-blog.csdnimg.cn/20200327142247204.png" alt=""><br>最终数据库还是没有添加进去</p>
<p><strong>再测:</strong><br>调用订单–&gt;先本地添加数据, 然后在调用支付,让支付失败,看订单是否回滚<br>测试结果还是回滚.<br><img data-src="https://img-blog.csdnimg.cn/20200327142918573.png" alt=""><br>自己一步一步一步一步敲出来的,希望我下次不要遇到这些问题.</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Eureka</tag>
        <tag>seata</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud 整合mybatis-plus (五)</title>
    <url>/2020/20200327/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/27/SpainBeeEaters_ZH-CN2414526119_1920x1080.jpg" alt=""></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实这个整合,和spring 或者 spring boot 整合一样的<br>其实都是一键生成的,自己把模板配好就行,从controller到service,dao,实体,增删改查<br>我只是拷贝过来几个测试这个项目<br>之前刚接触mybatis-plus的时候也写过自动生成的文章</p>
<h2 id="引入jar"><a href="#引入jar" class="headerlink" title="引入jar"></a>引入jar</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.7.1&lt;/version&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>我mysql数据库8.0以上的,如果你的是5.+的版本,自己该数据源即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: order</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/gmaya?allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    username: root</span><br><span class="line">    password: admin</span><br><span class="line">#mybatis-plus</span><br><span class="line">mybatis-plus:</span><br><span class="line">  mapper-locations: classpath:/mapper<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment">  typeAliasesPackage: com.gmaya.order.entity</span></span><br><span class="line"><span class="comment">  global-config:</span></span><br><span class="line"><span class="comment">    db-config:</span></span><br><span class="line"><span class="comment">      id-type: AUTO</span></span><br><span class="line"><span class="comment">      field-strategy: NOT_NULL</span></span><br><span class="line"><span class="comment">      column-underline: true</span></span><br><span class="line"><span class="comment">      logic-delete-value: 1 # 数据库删除字段,1代表删除</span></span><br><span class="line"><span class="comment">      logic-not-delete-value: 0 # 0代表没删除</span></span><br><span class="line"><span class="comment">    banner: false</span></span><br></pre></td></tr></table></figure>

<h2 id="新增配置类"><a href="#新增配置类" class="headerlink" title="新增配置类"></a>新增配置类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gmaya.order.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.ISqlInjector;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.injector.LogicSqlInjector;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mybatis-plus配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GMaya</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制逻辑删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制版本号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gmaya.order.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableLogic;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.Version;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DO</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GMaya</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span>(value = <span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否删除。0未删除，1删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDtl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 版本号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gmaya.order.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.gmaya.order.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">UserEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gmaya.order.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.gmaya.order.entity.UserEntity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GMaya</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">UserEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(JSONObject jsonObject)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="impl"><a href="#impl" class="headerlink" title="impl"></a>impl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gmaya.order.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.gmaya.order.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.gmaya.order.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.gmaya.order.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GMaya</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserDao</span>, <span class="title">UserEntity</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(JSONObject jsonObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"log...订单开始......"</span>);</span><br><span class="line">        UserEntity userEntity = <span class="keyword">new</span> UserEntity();</span><br><span class="line">        userEntity.setAge(<span class="number">1</span>);</span><br><span class="line">        userEntity.setIsDtl(<span class="number">0</span>);</span><br><span class="line">        userEntity.setVersion(<span class="number">1</span>);</span><br><span class="line">        userEntity.setName(<span class="string">"订单模拟"</span>);</span><br><span class="line">        <span class="keyword">int</span> insert = baseMapper.insert(userEntity);</span><br><span class="line">        log.info(<span class="string">"log...订单结束......"</span>);</span><br><span class="line">        <span class="keyword">return</span> insert;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>使用redis实现序列号工具类</title>
    <url>/2020/20200323/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/23/LenticularVideo_ZH-CN2275732856_1920x1080.jpg" alt=""></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>项目中难免会带有字符的序列号,有的是每月从1开始, 有的是每天等等.<br>以前也使用过存表的方式,每次获取之后加1.<br>这次又了解了一个.记录一下<br>redis为单线程，不存在线程安全问题.</p>
<p>序列号工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gmaya.EurekaClient.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.support.atomic.RedisAtomicLong;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列号工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> GMaya</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取序列号</span></span><br><span class="line"><span class="comment">     * 例子：假如需要获取订单号NO20200320000001等数据，前缀NO，后面的每天从1开始自增</span></span><br><span class="line"><span class="comment">     * 调用getCode("NO") 返回 202003200000001,0的个数根据自己业务量设置</span></span><br><span class="line"><span class="comment">     * 自己将返回的字符串再次拼接上NO即可！序列号 = 'NO'+getCode("NO")</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyPrefix 关键词前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 序列号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">(String keyPrefix)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前日期加填充完0的值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>).format(<span class="keyword">new</span> Date()) + getSequence(keyPrefix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据关键词前缀设置redis的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyPrefix</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getSequence</span><span class="params">(String keyPrefix)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果你的序列号需要每个月从1开始计算，那么时间就变为yyyyMM。</span></span><br><span class="line">        String currentDate = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">// 得到这个key的value值</span></span><br><span class="line">        Long num = getIncrementNum(<span class="string">"seq:"</span> + keyPrefix + currentDate);</span><br><span class="line">        <span class="comment">// 填充这个值，一般情况下一天的序列号3位差不多，所以前面几位需要填充0</span></span><br><span class="line">        <span class="keyword">return</span> getSequence(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询redis中这个key，并且加1返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Long <span class="title">getIncrementNum</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不存在准备创建 键值对</span></span><br><span class="line">        RedisAtomicLong entityIdCounter = <span class="keyword">new</span> RedisAtomicLong(key,</span><br><span class="line">            redisTemplate.getConnectionFactory());</span><br><span class="line">        Long counter = entityIdCounter.incrementAndGet(); <span class="comment">// 自增加1</span></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">null</span> == counter || counter.longValue() == <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="comment">// 初始设置过期时间</span></span><br><span class="line">            entityIdCounter.expire(<span class="number">2</span>, TimeUnit.DAYS);<span class="comment">// 单位天</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> counter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_LENGTH = <span class="number">8</span>; <span class="comment">// 填充0的总位数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数值前面填充0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seq</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getSequence</span><span class="params">(<span class="keyword">long</span> seq)</span> </span>&#123;</span><br><span class="line">        String str = String.valueOf(seq);</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        <span class="comment">// 一般业务量不会超过8位数</span></span><br><span class="line">        <span class="keyword">if</span> (len &gt;= DEFAULT_LENGTH) &#123;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 前面填充0，保证数值一直是8位数</span></span><br><span class="line">        <span class="keyword">int</span> rest = DEFAULT_LENGTH - len;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rest; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(str);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gmaya.EurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gmaya.EurekaClient.util.SequenceUtil;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EurekaClientApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SequenceUtil sequenceUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String no = <span class="string">"NO"</span> + sequenceUtil.getCode(<span class="string">"NO"</span>);</span><br><span class="line">        String no2 = <span class="string">"NO"</span> + sequenceUtil.getCode(<span class="string">"NO"</span>);</span><br><span class="line">        String no3 = <span class="string">"NO"</span> + sequenceUtil.getCode(<span class="string">"NO"</span>);</span><br><span class="line">        String no4 = <span class="string">"NO"</span> + sequenceUtil.getCode(<span class="string">"NO"</span>);</span><br><span class="line">        System.out.println(no);</span><br><span class="line">        System.out.println(no2);</span><br><span class="line">        System.out.println(no3);</span><br><span class="line">        System.out.println(no4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NO2020032300000005</span><br><span class="line">NO2020032300000006</span><br><span class="line">NO2020032300000007</span><br><span class="line">NO2020032300000008</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>工具类</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>分享一下uTools工具</title>
    <url>/2020/20200321/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/21/SaltonSea_ZH-CN1265210111_1920x1080.jpg" alt=""></p>
<a id="more"></a>
<p>持续加班ing..<br>分享 一个自己正在使用的工具<br><a href="https://www.u.tools/" target="_blank" rel="noopener">uTools你的生产力工具集
</a></p>
<blockquote>
<p>uTools是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。<br>当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。</p>
</blockquote>
<p><img data-src="https://img-blog.csdnimg.cn/20200321151921256.png" alt=""><br>具体优点自己体会吧.</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA常用插件</title>
    <url>/2020/20200319/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/19/EquinoxAngkor_ZH-CN1157590532_1920x1080.jpg" alt=""></p>
<a id="more"></a>
<p>分享自己平时常用的idea插件</p>
<p>1.Mybatis Log Plugin</p>
<p>功能:把 mybatis 输出的sql日志还原成完整的sql语句。 将日志输出的sql语句中的问号 ? 替换成真正的参数值</p>
<p>直接在软件Plugins中下载即可,注意下载完要重启idea</p>
<p><img data-src="https://img-blog.csdnimg.cn/20190527161235710.png" alt=""></p>
<p>在Tools中点击 即可进入</p>
<p><img data-src="https://img-blog.csdnimg.cn/2019052716143126.png" alt=""></p>
<p>2.Rainbow Brackets</p>
<p>功能:彩虹方括号</p>
<p>让你的括号变得魔力转圈圈</p>
<p><img data-src="https://img-blog.csdnimg.cn/20190527161806200.png" alt=""></p>
<p>3.Free Mybatis plugin</p>
<p>功能:在serviceImpl直接去到mapper.xml中的该方法</p>
<p>选中方法名,快捷键Ctrl + T </p>
<p><img data-src="https://img-blog.csdnimg.cn/20190527164208747.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Hystrix断路器（四）</title>
    <url>/2020/20200318/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/18/KeichitsuCrocuse_ZH-CN1061292366_1920x1080.jpg" alt=""></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在微服务场景中，通常会有很多层的服务调用。如果一个底层服务出现问题，故障会被向上传播给用户。我们需要一种机制，当底层服务不可用时，可以阻断故障的传播。这就是断路器的作用。他是系统服务稳定性的最后一重保障。</p>
</blockquote>
<p>常常会遇到正在使用某个系统，点击到某一个功能的时候显示该模块正在升级或者请稍后查看等。怎么实现呢？？</p>
<h2 id="使用Feign整合Hystrix"><a href="#使用Feign整合Hystrix" class="headerlink" title="使用Feign整合Hystrix"></a>使用Feign整合Hystrix</h2><p>默认是不开启的，需要修改配置文件application.yml，添加下面的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    #开启Hystrix熔断，默认false</span><br><span class="line">    enabled: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<p>新增支付模块熔断器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  支付模块熔断器</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/3/18 9:35</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayClientFallBack</span> <span class="keyword">implements</span> <span class="title">PayClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">getPay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"支付模块正在抢修，请稍后！"</span> +<span class="string">" :feign演示"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/20200318094335346.png" alt=""><br>修改PayClient接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"pay"</span>,fallback = PayClientFallBack<span class="class">.<span class="keyword">class</span>) // 服务名称</span></span><br></pre></td></tr></table></figure>
<p>启动服务端，启动pay客户端，启动order客户端。<br>访问<a href="http://localhost:8082/getOrder" target="_blank" rel="noopener">http://localhost:8082/getOrder</a><br><img data-src="https://img-blog.csdnimg.cn/20200318094502143.png" alt=""><br>然后把pay客户端关掉！<br><img data-src="https://img-blog.csdnimg.cn/20200318094538663.png" alt=""></p>
<h2 id="使用RestTemplat整合Hystrix"><a href="#使用RestTemplat整合Hystrix" class="headerlink" title="使用RestTemplat整合Hystrix"></a>使用RestTemplat整合Hystrix</h2><p>pom添加j依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--熔断器--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>启动类新增注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<p>@SpringBootApplication+@EnableDiscoveryClient+@EnableCircuitBreaker<br>也可以使用@SpringCloudApplication 一个顶替仨</p>
<p>SpringCloudApplication注解 源码：<br><img data-src="https://img-blog.csdnimg.cn/20200318100928732.png" alt=""></p>
<p>修改订单接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  订单接口接口</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/3/16 11:03</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private PayClient payClient; // 注入支付模块服务</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getOrder"</span>)</span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"getRestTemplateFallBack"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String pay = restTemplate.getForObject(<span class="string">"http://pay/getPay"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//        String pay = payClient.getPay();</span></span><br><span class="line">        <span class="keyword">return</span> pay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getRestTemplateFallBack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"不好啦，机房着火了，restTemplate演示！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/202003181003090.png" alt=""><br>当然，当接口多的时候，还可以改造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  订单接口接口</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/3/16 11:03</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@DefaultProperties</span>(defaultFallback = <span class="string">"defaultFallback"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private PayClient payClient; // 注入支付模块服务</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getOrder"</span>)</span><br><span class="line"><span class="comment">//    @HystrixCommand(fallbackMethod = "getRestTemplateFallBack")</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span> <span class="comment">// 使用默认熔断，加一个注解就行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String pay = restTemplate.getForObject(<span class="string">"http://pay/getPay"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//        String pay = payClient.getPay();</span></span><br><span class="line">        <span class="keyword">return</span> pay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getRestTemplateFallBack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"不好啦，机房着火了，restTemplate演示！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">defaultFallback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"默认熔断！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/2020031810064596.png" alt=""><br>重启查看</p>
<p><img data-src="https://img-blog.csdnimg.cn/202003181009599.png" alt=""><br><strong>最后：</strong><br>额外配置，如需更多，请查看专业解释</p>
<p>如果设置和默认值一样，没必要写出来配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    #开启Hystrix熔断，默认false</span><br><span class="line">    enabled: <span class="keyword">true</span></span><br><span class="line">hystrix:</span><br><span class="line">  command:</span><br><span class="line">    # 全局设置</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      execution:</span><br><span class="line">        isolation:</span><br><span class="line">          # 命令执行超时时间，默认1000ms，只在线程池隔离中有效。</span><br><span class="line">          thread:</span><br><span class="line">            timeoutInMilliseconds: <span class="number">1000</span></span><br><span class="line">            # 发生超时是是否中断，默认true，只在线程池隔离中有效。</span><br><span class="line">            interruptOnTimeout: <span class="keyword">true</span></span><br><span class="line">        # 执行是否启用超时，默认启用true，只在线程池隔离中有效。</span><br><span class="line">        timeout:</span><br><span class="line">          enabled: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Hystrix</tag>
      </tags>
  </entry>
  <entry>
    <title>Short 类型直接和数值1做对比</title>
    <url>/2020/20200317/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/17/Knowth_ZH-CN0295374506_1920x1080.jpg" alt=""></p>
<a id="more"></a>
<p>今天写项目遇到了Short 返回1 需要做个判断，所以就多想了一下，研究了一下<br>大声的告诉我，是true还是true还是true！！！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Short a = <span class="number">1</span>;</span><br><span class="line">    System.out.println(a.equals(<span class="number">1</span>));</span><br><span class="line">    System.out.println(a==<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一开始觉得包装类型用==和equals应该都可以的，但是结果却是，false，true。<br>第二个就不说了，都知道。所以就研究了一下第一个equals<br>扒拉源码！<br>ctrl + o  找到equals 方法！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compares this object to the specified object.  The result is</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> true&#125; if and only if the argument is not</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> null&#125; and is a &#123;<span class="doctag">@code</span> Short&#125; object that</span></span><br><span class="line"><span class="comment"> * contains the same &#123;<span class="doctag">@code</span> short&#125; value as this object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> obj       the object to compare with</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>          &#123;<span class="doctag">@code</span> true&#125; if the objects are the same;</span></span><br><span class="line"><span class="comment"> *                  &#123;<span class="doctag">@code</span> false&#125; otherwise.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Short) &#123;</span><br><span class="line">        <span class="keyword">return</span> value == ((Short)obj).shortValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>搜嘎，原来不属于Short类型的，就是false<br>那这个直接凭空写的这个1是什么类型啊。<br>有去查了一下java的基本类型默认值，什么四类八种的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>初值为<span class="number">0</span></span><br><span class="line"><span class="keyword">long</span>初值为<span class="number">0L</span></span><br><span class="line"><span class="keyword">byte</span>初值为(<span class="keyword">byte</span>)<span class="number">0</span></span><br><span class="line"><span class="keyword">short</span>初值为(<span class="keyword">short</span>)<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>所以1我觉得是int型的</p>
<p>同时又看了一下Short 和Integer一样，都有缓存的<br>Short</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ShortCache</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">ShortCache</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Short cache[] = <span class="keyword">new</span> Short[-(-<span class="number">128</span>) + <span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">                cache[i] = <span class="keyword">new</span> Short((<span class="keyword">short</span>)(i - <span class="number">128</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Integer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="comment">// high value may be configured by property</span></span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">            String integerCacheHighPropValue =</span><br><span class="line">                sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                    i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                    <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                    <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            high = h;</span><br><span class="line"></span><br><span class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> j = low;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Eureka服务通信Ribbon/Feign（三）</title>
    <url>/2020/20200316-2/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/16/PlutoCrescent_ZH-CN3538488331_1920x1080.jpg" alt=""></p>
<a id="more"></a>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>每一个客户端就是一个完整的项目，是一个模块，假如我有订单模块，支付模块，用户模块，等等，那么我这些模块之间怎么相互调用呢？采用HttpClient工具类访问？</p>
<h2 id="Ribbon-和-Feign-简介"><a href="#Ribbon-和-Feign-简介" class="headerlink" title="Ribbon 和 Feign 简介"></a>Ribbon 和 Feign 简介</h2><h3 id="Ribbon-简介"><a href="#Ribbon-简介" class="headerlink" title="Ribbon 简介"></a>Ribbon 简介</h3><blockquote>
<p>Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将Netflix的中间层服务连接在一起。Ribbon 客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出 Load Balancer 后面所有的机器，Ribbon 会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们也很容易使用Ribbon实现自定义的负载均衡算法。简单地说，Ribbon 是一个客户端负载均衡器。</p>
</blockquote>
<h3 id="Feign-简介"><a href="#Feign-简介" class="headerlink" title="Feign 简介"></a>Feign 简介</h3><blockquote>
<p>Feign 是一个声明式的 web service 客户端，它使得编写 web service 客户端更为容易。创建接口，为接口添加注解，即可使用Feign。Feign可以使用Feign注解或者JAX-RS注解，还支持热插拔的编码器和解码器。Spring Cloud 为Feign添加了Spring MVC的注解支持，并整合了Ribbon和Eureka来为使用 Feign 时提供负载均衡。</p>
</blockquote>
<h2 id="创建支付模块（客户端）"><a href="#创建支付模块（客户端）" class="headerlink" title="创建支付模块（客户端）"></a>创建支付模块（客户端）</h2><p>起名pay项目，也可以去spring官网 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a>按照之前的办法创建<br>再介绍一个方法，直接在idea中创建<br><img data-src="https://img-blog.csdnimg.cn/20200316104221227.png" alt=""><br>下一步<br><img data-src="https://img-blog.csdnimg.cn/20200316104311198.png" alt=""><br>填写组织和项目名称<br><img data-src="https://img-blog.csdnimg.cn/20200316104405772.png" alt=""><br>搜索添加<br><img data-src="https://img-blog.csdnimg.cn/20200316104620686.png" alt=""><br>下一步<br><img data-src="https://img-blog.csdnimg.cn/20200316104718476.png" alt=""><br>完成<br>然后按照客户端的修改操作进行修改<br>修改application.yml<br>因为是小demo，所以就不使用集群了，电脑有点卡。真实情况每个服务端和客户端有可能都不在一个服务器上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: pay</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8081</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      #注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔</span><br><span class="line">      #defaultZone: http://server01:8761/eureka/,http://server02:8762/eureka/</span><br><span class="line">      defaultZone: http:<span class="comment">//server01:8761/eureka/</span></span><br></pre></td></tr></table></figure>
<p>修改启动项<br>添加注解@EnableDiscoveryClient<br>添加一个正常情况下的最简洁支付接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  支付接口</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/3/16 10:53</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getPay"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPay</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 返回支付信息</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"this pay！！！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建订单模块（客户端）"><a href="#创建订单模块（客户端）" class="headerlink" title="创建订单模块（客户端）"></a>创建订单模块（客户端）</h2><p>跟上面支付模块一模一样的操作。。。<br>注意：<br><img data-src="https://img-blog.csdnimg.cn/20200316110022486.png" alt=""><br>创建订单最简洁订单的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  订单接口</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/3/16 11:03</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getOrder"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 返回订单信息</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"this order！！！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>此时两个正常的项目已经创建完毕，那么我订单模块怎么去调用支付模块呢？</strong></p>
<h2 id="方式一：RestTemplate调用"><a href="#方式一：RestTemplate调用" class="headerlink" title="方式一：RestTemplate调用"></a>方式一：RestTemplate调用</h2><p>修改订单模块接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getOrder"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">       RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">       String forObject = restTemplate.getForObject(<span class="string">"http://localhost:8081/getPay"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="keyword">return</span> forObject;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>启动服务端，启动支付端，启动订单端<br>调用支付接口<br><img data-src="https://img-blog.csdnimg.cn/20200316111440912.png" alt=""><br>调用订单接口<br><img data-src="https://img-blog.csdnimg.cn/20200316111506428.png" alt=""><br>可以看出调用成功，但是缺点也很明显，必须要知道对方的url地址，对于多个实例那就难受了，所以是不可取的。</p>
<h2 id="方式二：通过-LoadBalanced"><a href="#方式二：通过-LoadBalanced" class="headerlink" title="方式二：通过 @LoadBalanced"></a>方式二：通过 @LoadBalanced</h2><p>添加RestTemplateConfig配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  RestTemplate配置类</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/3/16 11:24</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/20200316112723276.png" alt=""><br>修改订单接口<br>此时只需要填写调用的项目名就好了，跟ip无关。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  订单接口接口</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/3/16 11:03</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getOrder"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String forObject = restTemplate.getForObject(<span class="string">"http://PAY/getPay"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> forObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启订单项目查看</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200316134202712.png" alt=""><br><strong>@LoadBalanced 源码</strong><br>注解源码注释中说，用来标记restTemplate使之配置使用LoadBalancerClient</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation to mark a RestTemplate or WebClient bean to be configured to use a</span></span><br><span class="line"><span class="comment"> * LoadBalancerClient.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD &#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LoadBalanced &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LoadBalancerClient则表示客户端负载均衡器。<br><img data-src="https://img-blog.csdnimg.cn/20200316135308761.png" alt=""><br>所以使用@LoadBalanced就代表使用ribbon实现客户端的负载均衡<br>负载均衡的策略默认使用的是轮询算法</p>
<blockquote>
<p>负载均衡是在同一个功能的微服务中根据不同的策略选择不同的微服务，因此这些微服务对外暴露的实例名称要相同（spring.application.name）<br>ribbon是一个客户端的负载均衡，必须要连接eureka，才能在指定的微服务实例中按照策略选择</p>
</blockquote>
<p>假设支付模块（pay）部署在两台或者多台服务器，只有端口号不一样，其他的都一样，那么我订单模块按照轮询算法去调用支付模块。</p>
<h2 id="方式三：通过-Feign"><a href="#方式三：通过-Feign" class="headerlink" title="方式三：通过 Feign"></a>方式三：通过 Feign</h2><p>第一步：添加Feign依赖<br>打开订单模块pom文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>第二步：修改订单模块启动类OrderApplication<br>添加注解@EnableFeignClients<br><img data-src="https://img-blog.csdnimg.cn/20200316142558747.png" alt=""><br>第三步：声明需要调用的接口<br>创建PayClient接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  支付接口声明</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/3/16 14:28</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"pay"</span>) <span class="comment">// 服务名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PayClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getPay"</span>) <span class="comment">//  这里要和pay提供的接口一致</span></span><br><span class="line">    <span class="function">String <span class="title">getPay</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/20200316143337289.png" alt=""><br>修改OrderController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  订单接口接口</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/3/16 11:03</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PayClient payClient; <span class="comment">// 注入支付模块服务</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getOrder"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String pay = payClient.getPay();</span><br><span class="line">        <span class="keyword">return</span> pay;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启订单模块项目，一切正常！</p>
<p>只有先入门，才能追查源码以及骚操作！</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Eureka高可用的服务注册中心（二）</title>
    <url>/2020/20200316/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/16/YukonGames_ZH-CN0135612170_1920x1080.jpg" alt=""></p>
<a id="more"></a>

<h2 id="集群原理图"><a href="#集群原理图" class="headerlink" title="集群原理图"></a>集群原理图</h2><p>如果只有一个注册中心（服务端），一旦挂掉，就直接GG，在分布式系统中，任何地方存在单点故障，整个系统就不是高可用的。（自己手画的难看见谅）</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200315221636385.png" alt=""></p>
<h2 id="创建服务端2"><a href="#创建服务端2" class="headerlink" title="创建服务端2"></a>创建服务端2</h2><p>在上一篇文章中写了最简单的单服务端，单客户端的例子。所以，在上一篇的基础上，继续新建一个服务端，起名字叫做服务端2<br>登录spring官网 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a><br><img data-src="https://img-blog.csdnimg.cn/20200315222938981.png" alt=""><br>保存到本地之后，导入项目<br><img data-src="https://img-blog.csdnimg.cn/20200315223158658.png" alt=""><br>服务器2（EurekaServerTwo）启动类添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://img-blog.csdnimg.cn/20200315224555469.png" alt=""><br>修改EurekaServerTwo配置文件application.yml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8762</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      # #注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔</span><br><span class="line">      # 向端口8761注册(两个服务端互相注册)</span><br><span class="line">      defaultZone: http:<span class="comment">//server01:8761/eureka/</span></span><br><span class="line">    # 指示此实例是否应将其信息注册到eureka服务器以供其他服务发现，默认为false</span><br><span class="line">    register-with-eureka: <span class="keyword">false</span></span><br><span class="line">  instance:</span><br><span class="line">    # 该服务实例所在主机名</span><br><span class="line">    hostname: server02</span><br><span class="line">  server:</span><br><span class="line">    # 启用自我保护机制，默认为true</span><br><span class="line">    enable-self-preservation: <span class="keyword">false</span></span><br><span class="line">spring:</span><br><span class="line">  profiles: server02</span><br></pre></td></tr></table></figure>

<h2 id="修改服务器1EurekaServer"><a href="#修改服务器1EurekaServer" class="headerlink" title="修改服务器1EurekaServer"></a>修改服务器1EurekaServer</h2><p>修改EurekaServer项目的配置文件application.yml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8761</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      # 注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔</span><br><span class="line">      # 向端口8762注册(两个服务端互相注册)</span><br><span class="line">      defaultZone: http:<span class="comment">//server02:8762/eureka/</span></span><br><span class="line">    # 指示此实例是否应将其信息注册到eureka服务器以供其他服务发现，默认为false</span><br><span class="line">    register-with-eureka: <span class="keyword">false</span></span><br><span class="line">  instance:</span><br><span class="line">    # 该服务实例所在主机名</span><br><span class="line">    hostname: server01</span><br><span class="line">  server:</span><br><span class="line">    # 启用自我保护机制，默认为true</span><br><span class="line">    enable-self-preservation: <span class="keyword">false</span></span><br><span class="line">spring:</span><br><span class="line">  profiles: server01</span><br></pre></td></tr></table></figure>
<h2 id="修改电脑hosts文件"><a href="#修改电脑hosts文件" class="headerlink" title="修改电脑hosts文件"></a>修改电脑hosts文件</h2><p>修改host文件添加对application.yml配置文件中hostname的映射<br>打开电脑C:\Windows\System32\drivers\etc<br>找到hosts，在文件最后输入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>    server01</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>    server02</span><br></pre></td></tr></table></figure>
<p>注意使用管理员权限，不然没办法保存</p>
<h2 id="启动查看效果"><a href="#启动查看效果" class="headerlink" title="启动查看效果"></a>启动查看效果</h2><p>修改启动配置项<br><img data-src="https://img-blog.csdnimg.cn/20200315230830125.png" alt=""><br><strong>在服务器1配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-Dspring.profiles.active=server01</span><br></pre></td></tr></table></figure>

<p><img data-src="https://img-blog.csdnimg.cn/20200315230914439.png" alt=""><br><strong>在服务器2配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-Dspring.profiles.active=server02</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/20200315231015288.png" alt=""><br>启动服务器1，启动服务器2，启动客户端<br>如果在启动中报错，先则是因为服务器1向服务器2注册没有连接上，等你服务器2启动完毕就不会报错了。<br>最终在浏览器查看效果<br><strong><a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a></strong><br><img data-src="https://img-blog.csdnimg.cn/2020031523152013.png" alt=""><br><strong><a href="http://localhost:8762/" target="_blank" rel="noopener">http://localhost:8762/</a></strong><br><img data-src="https://img-blog.csdnimg.cn/20200315231601974.png" alt=""></p>
<h2 id="停止服务器1"><a href="#停止服务器1" class="headerlink" title="停止服务器1"></a>停止服务器1</h2><p>此时检验效果，停止服务器1，即端口号为：8761的服务器<br><img data-src="https://img-blog.csdnimg.cn/20200315231759209.png" alt=""><br>稍微等待一会，因为有默认的失效时间。<br>查看<a href="http://localhost:8762" target="_blank" rel="noopener">http://localhost:8762</a><br>此时客户端已经消失，<br><img data-src="https://img-blog.csdnimg.cn/2020031523232598.png" alt=""><br>这是因为客户端没有配置服务器2的注册。</p>
<h2 id="修改客户端"><a href="#修改客户端" class="headerlink" title="修改客户端"></a>修改客户端</h2><p>修改EurekaClient项目的配置文件application.yml<br>将两个注册中心全部配置上去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-client</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8711</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      #注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔</span><br><span class="line">      defaultZone: http:<span class="comment">//server01:8761/eureka/,http://server02:8762/eureka/</span></span><br></pre></td></tr></table></figure>
<p>将server02注册进来，重新启动服务端1，服务端2，客户端，再次演示上面断掉服务端1的操作<br>这个时候server02就能一直显示客户端的注册</p>
<p>这样就算一个服务器挂掉，对整体也不会有影响了。</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Eureka最简单的入门（一）</title>
    <url>/2020/20200315/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/15/MetamorphicRocks_ZH-CN9753251368_1920x1080.jpg" alt=""></p>
<a id="more"></a>

<h2 id="Eureka介绍"><a href="#Eureka介绍" class="headerlink" title="Eureka介绍"></a>Eureka介绍</h2><blockquote>
<p>Eureka是一个基于REST的服务，主要用于AWS云中的定位服务，以实现中间层服务器的负载平衡和故障转移，在 Spring Cloud 微服务架构中通常用作注册中心，我们称这个服务为 Eureka Server，还有一个与之交互的客户端称之为 Eureka Client</p>
</blockquote>
<h2 id="创建eureka服务端"><a href="#创建eureka服务端" class="headerlink" title="创建eureka服务端"></a>创建eureka服务端</h2><p>登录spring官网 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a><br><img data-src="https://img-blog.csdnimg.cn/20200315173526729.png" alt=""><br>写好组名称，和项目名称,搜索eureka server，点击+，选择导出到本地。<br><img data-src="https://img-blog.csdnimg.cn/20200315173919500.png" alt=""><br>将下载好的项目导入idea。</p>
<p>然后在eureka server项目启动类添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://img-blog.csdnimg.cn/20200315175550115.png" alt=""><br>修改配置application.yml文件<br>其中defaultZone<strong>前后注意空格</strong>，而且这个单词是关联不出来的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8761</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8761/eureka/</span></span><br><span class="line">    # 指示此实例是否应将其信息注册到eureka服务器以供其他服务发现，默认为false</span><br><span class="line">    register-with-eureka: <span class="keyword">false</span></span><br><span class="line">  server:</span><br><span class="line">    # 启用自我保护机制，默认为true</span><br><span class="line">    enable-self-preservation: <span class="keyword">false</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    # 微服务名称</span><br><span class="line">    name: eureka</span><br></pre></td></tr></table></figure>

<p>启动localhost:8761显示页面即为成功！</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200315203638407.png" alt=""></p>
<h2 id="创建eureka客户端"><a href="#创建eureka客户端" class="headerlink" title="创建eureka客户端"></a>创建eureka客户端</h2><p>登录spring官网 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a><br>修改项目名称，搜索eureka discovery client 。点击+ ，保存到本地<br><img data-src="https://img-blog.csdnimg.cn/20200315204041224.png" alt=""><br>保存到本地之后，在上一个项目中打开<br><img data-src="https://img-blog.csdnimg.cn/20200315175306228.png" alt=""><br>选择eureka客户端导入。<br><img data-src="https://img-blog.csdnimg.cn/20200315175355975.png" alt=""></p>
<p>修改eureka客户端启动类<br>添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://img-blog.csdnimg.cn/20200315204457915.png" alt=""><br>pom文件添加</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>修改配置文件application.yml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-client</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8711</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      #注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“,”进行分隔</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://img-blog.csdnimg.cn/20200315210244310.png" alt=""><br>启动服务端，启动客户端<br><img data-src="https://img-blog.csdnimg.cn/20200315210433640.png" alt=""><br>最简单的一个spring cloud + eureka 服务注册到此结束。全部是采用默认形式，最简单的一个项目搭建。</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 MySQL 中优化 SQL 语句查询常用的 30 种方法</title>
    <url>/2020/20200314/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/14/Cirkelbroen_ZH-CN9645986135_1920x1080.jpg" alt=""></p>
<a id="more"></a>

<blockquote>
<p>转载于网络，作者不详。</p>
</blockquote>
<p>1、对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。 </p>
<p>2、应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。 </p>
<p>3、应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>4、应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">10</span> <span class="keyword">or</span> <span class="keyword">num</span>=<span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>可以这样查询： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">10</span> </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>5、下面的查询也将导致全表扫描： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%abc%'</span></span><br></pre></td></tr></table></figure>

<p>若要提高效率，可以考虑全文检索。 </p>
<p>6、in 和 not in 也要慎用，否则会导致全表扫描，如： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>对于连续的数值，能用 between 就不要用 in 了： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>7、如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=@<span class="keyword">num</span></span><br></pre></td></tr></table></figure>

<p>可以改为强制查询使用索引： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">with</span>(<span class="keyword">index</span>(索引名)) <span class="keyword">where</span> <span class="keyword">num</span>=@<span class="keyword">num</span></span><br></pre></td></tr></table></figure>

<p>8、应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>/<span class="number">2</span>=<span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>应改为: </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">100</span>*<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>9、应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br>name以abc开头的id </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">substring</span>(<span class="keyword">name</span>,<span class="number">1</span>,<span class="number">3</span>)=<span class="string">'abc'</span></span><br></pre></td></tr></table></figure>

<p>‘2005-11-30’生成的id </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">datediff</span>(<span class="keyword">day</span>,createdate,<span class="string">'2005-11-30'</span>)=<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>应改为: </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'abc%'</span> </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> createdate&gt;=<span class="string">'2005-11-30'</span> <span class="keyword">and</span> createdate&lt;<span class="string">'2005-12-1'</span></span><br></pre></td></tr></table></figure>

<p>10、不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。 </p>
<p>11、在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。 </p>
<p>12、不要写一些没有意义的查询，如需要生成一个空表结构： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> col1,col2 <span class="keyword">into</span> <span class="comment">#t from t where 1=0</span></span><br></pre></td></tr></table></figure>

<p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="comment">#t(...)</span></span><br></pre></td></tr></table></figure>

<p>13、很多时候用 exists 代替 in 是一个好的选择： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> a <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">in</span>(<span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> b)</span><br></pre></td></tr></table></figure>

<p>用下面的语句替换： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> a <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> b <span class="keyword">where</span> <span class="keyword">num</span>=a.num)</span><br></pre></td></tr></table></figure>

<p>14、并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。 </p>
<p>15、索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。 </p>
<p>16、应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。 </p>
<p>17、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。 </p>
<p>18、尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。 </p>
<p>19、任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。 </p>
<p>20、尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。 </p>
<p>21、避免频繁创建和删除临时表，以减少系统表资源的消耗。 </p>
<p>22、临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。 </p>
<p>23、在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。 </p>
<p>24、如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。 </p>
<p>25、尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。 </p>
<p>26、使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。 </p>
<p>27、与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。 </p>
<p>28、在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。 </p>
<p>29、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。 </p>
<p>30、尽量避免大事务操作，提高系统并发能力。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>日常分享</tag>
      </tags>
  </entry>
  <entry>
    <title>idea新建springboot项目pom文件报错</title>
    <url>/2020/20200313/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/13/FrenchColorado_ZH-CN9446885520_1920x1080.jpg" alt=""></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前也有过类似的情况，只不过都是把spring-boot-starter-parent版本号改成本地仓库已经有的，然后继续开发。今天想写个demo，就新建了一个，然后版本号不一致，就一直报错，所以找了一天问题，才解决。太可怕了</p>
<h2 id="新建springboot项目的问题"><a href="#新建springboot项目的问题" class="headerlink" title="新建springboot项目的问题"></a>新建springboot项目的问题</h2><p>使用idea，一路next，到最后生成项目<br>然后pom文件报错<br>我特意换了一个全新的maven，发现是因为jar拉不下来，就配置了国内镜像<br>找到maven ，conf 打开 settings.xml。在mirrors里面写入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 阿里云镜像 --&gt;</span><br><span class="line">	&lt;mirror&gt;</span><br><span class="line">		&lt;id&gt;alimaven&lt;<span class="regexp">/id&gt;</span></span><br><span class="line"><span class="regexp">		&lt;name&gt;aliyun maven&lt;/</span>name&gt;</span><br><span class="line">		&lt;url&gt;http:<span class="comment">//maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span></span><br><span class="line">		&lt;mirrorOf&gt;central&lt;<span class="regexp">/mirrorOf&gt;</span></span><br><span class="line"><span class="regexp">	&lt;/mi</span>rror&gt;</span><br><span class="line">	&lt;mirror&gt;</span><br><span class="line">		&lt;id&gt;central&lt;<span class="regexp">/id&gt;</span></span><br><span class="line"><span class="regexp">		&lt;name&gt;Maven Repository Switchboard&lt;/</span>name&gt;</span><br><span class="line">		&lt;url&gt;http:<span class="comment">//repo1.maven.org/maven2/&lt;/url&gt;</span></span><br><span class="line">		&lt;mirrorOf&gt;central&lt;<span class="regexp">/mirrorOf&gt;&lt;/mi</span>rror&gt;</span><br><span class="line">	&lt;mirror&gt;</span><br><span class="line">		&lt;id&gt;repo2&lt;<span class="regexp">/id&gt;</span></span><br><span class="line"><span class="regexp">		&lt;mirrorOf&gt;central&lt;/mi</span>rrorOf&gt;</span><br><span class="line">		&lt;name&gt;Human Readable Name <span class="keyword">for</span> <span class="keyword">this</span> Mirror.&lt;<span class="regexp">/name&gt;</span></span><br><span class="line"><span class="regexp">		&lt;url&gt;http:/</span><span class="regexp">/repo2.maven.org/m</span>aven2/<span class="xml"><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></span><br><span class="line">	&lt;<span class="regexp">/mirror&gt;</span></span><br><span class="line"><span class="regexp">	</span></span><br><span class="line"><span class="regexp">	&lt;mirror&gt;</span></span><br><span class="line"><span class="regexp">		&lt;id&gt;ibiblio&lt;/i</span>d&gt;</span><br><span class="line">		&lt;mirrorOf&gt;central&lt;<span class="regexp">/mirrorOf&gt;</span></span><br><span class="line"><span class="regexp">		&lt;name&gt;Human Readable Name for this Mirror.&lt;/</span>name&gt;</span><br><span class="line">		&lt;url&gt;http:<span class="comment">//mirrors.ibiblio.org/pub/mirrors/maven2/&lt;/url&gt;</span></span><br><span class="line">	&lt;<span class="regexp">/mirror&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- 中央仓库在中国的镜像 --&gt;</span></span><br><span class="line"><span class="regexp">	&lt;mirror&gt;</span></span><br><span class="line"><span class="regexp">		&lt;id&gt;maven.net.cn&lt;/i</span>d&gt;</span><br><span class="line">		&lt;name&gt;oneof the central mirrors <span class="keyword">in</span> china&lt;<span class="regexp">/name&gt;</span></span><br><span class="line"><span class="regexp">		&lt;url&gt;http:/</span><span class="regexp">/maven.net.cn/</span>content/groups/public/<span class="xml"><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></span><br><span class="line">		&lt;mirrorOf&gt;central&lt;<span class="regexp">/mirrorOf&gt;</span></span><br><span class="line"><span class="regexp">	&lt;/mi</span>rror&gt;</span><br></pre></td></tr></table></figure>
<p>然后发现还是有点问题，有些拉不下来。<br>继续设置idea，打开设置，搜索maven<br><img data-src="https://img-blog.csdnimg.cn/20200313142951573.png" alt=""><br>将上面的勾打上<br>然后在VM Options下面输入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">-Dmaven.wagon.http.ssl.insecure=<span class="literal">true</span></span><br><span class="line">-Dmaven.wagon.http.ssl.allowall=<span class="literal">true</span></span><br><span class="line">-Dmaven.wagon.http.ssl.ignore.validity.dates=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>然后点击最右面maven，重新安装一下<br>（拉完之后再把勾去掉，还原）<br><img data-src="https://img-blog.csdnimg.cn/20200313143220272.png" alt=""><br>此时已经解决了我所有报错的问题，然后启动项目是启动不起来的，因为没有web<br>继续在pom加入spring-boot-starter-web</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>启动类中加入hello代码校验<br><img data-src="https://img-blog.csdnimg.cn/20200313143721913.png" alt=""><br>启动，浏览器输入<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a><br><img data-src="https://img-blog.csdnimg.cn/20200313143752533.png" alt=""><br>哎。真tm菜</p>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo配置最新next主题的几个问题</title>
    <url>/2020/20200312/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/SiestaKey_ZH-CN1759696989_1920x1080.jpg" alt=""></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>截止到写这博客的时间，花费了一天左右的时间，将next主题美化了一下，以此记录。</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>我的博客使用next模板为Mist，打开主题配置文件<br><img data-src="https://img-blog.csdnimg.cn/20200312112907956.png" alt=""></p>
<h2 id="添加背景线条效果"><a href="#添加背景线条效果" class="headerlink" title="添加背景线条效果"></a>添加背景线条效果</h2><p><img data-src="https://img-blog.csdnimg.cn/2020031211451787.png" alt=""><br>我是参考<a href="https://github.com/theme-next/theme-next-canvas-nest" target="_blank" rel="noopener">canvas-nest</a>官方网站</p>
<h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><p>在根目录的source 文件夹下创建_data文件夹，然后创建footer.swig<br><img data-src="https://img-blog.csdnimg.cn/20200312113617444.png" alt=""><br>注意不要将位置创建到主题里面去，然后将代码拷贝进去即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script color=<span class="string">"0,0,0"</span> opacity=<span class="string">"0.5"</span> zIndex=<span class="string">"-1"</span> count=<span class="string">"99"</span> src=<span class="string">"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>其中color是颜色值，opacity是透明度，zIndex是现在层级，count是线条数量。</p>
<h3 id="设置路径"><a href="#设置路径" class="headerlink" title="设置路径"></a>设置路径</h3><p>打开<strong>主题配置文件</strong><br>搜索 custom_file_path 将footer注释打开<br><img data-src="https://img-blog.csdnimg.cn/20200312113927646.png" alt=""><br>然后 hexo g  ， hexo s  ，启动看看效果</p>
<h2 id="首页文章之间周围有边框"><a href="#首页文章之间周围有边框" class="headerlink" title="首页文章之间周围有边框"></a>首页文章之间周围有边框</h2><p>刚开始这个首页文章之间没有边框，每个文章之间没有明显的间隔。<br>效果：<br><img data-src="https://img-blog.csdnimg.cn/20200312135123740.png" alt=""><br>打开：\themes\next\source\css_common\components\post\post.styl<br><img data-src="https://img-blog.csdnimg.cn/20200312135622899.png" alt=""><br>大概35行，找到motion.transition.post_block<br>修改前：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (hexo-config(<span class="string">'motion.transition.post_block'</span>)) &#123;</span><br><span class="line">    .post-block, .pagination, .comments &#123;</span><br><span class="line">      opacity: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>修改后：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (hexo-config(<span class="string">'motion.transition.post_block'</span>)) &#123;</span><br><span class="line">  .post-block&#123;</span><br><span class="line">     opacity: <span class="number">0</span>;</span><br><span class="line">     padding: <span class="number">25</span>px;</span><br><span class="line">     -webkit-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">.5</span>);</span><br><span class="line">     -moz-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">.5</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> .pagination, .comments &#123;</span><br><span class="line">    opacity: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后 hexo g  ， hexo s  ，启动看看效果</p>
<h2 id="修改文章之间的间隔"><a href="#修改文章之间的间隔" class="headerlink" title="修改文章之间的间隔"></a>修改文章之间的间隔</h2><p>默认的文章间距120px，有点大。</p>
<p>打开：\themes\next\source\css_schemes\Mist_posts-expand.styl<br><img data-src="https://img-blog.csdnimg.cn/20200312140746217.png" alt=""><br>大概24行，找到.post-block:not<br>修改前：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.post-block:not(:first-child) &#123;</span><br><span class="line">  margin-top: <span class="number">120</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将120px，修改为你想要的间距，我改成了20px<br>修改后：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.post-block:not(:first-child) &#123;</span><br><span class="line">  margin-top: <span class="number">20</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="评论数显示为英文问题"><a href="#评论数显示为英文问题" class="headerlink" title="评论数显示为英文问题"></a>评论数显示为英文问题</h2><p>我使用的Valine评论，但是文章标题下面显示的评论数为英文。<br>打开：\themes\next\languages\zh-CN.yml<br><img data-src="https://img-blog.csdnimg.cn/2020031214110617.png" alt=""><br>在post下面新增：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comments.valine:</span> <span class="string">评论数</span></span><br></pre></td></tr></table></figure>
<p>注意空格，和下面保持对齐<br><img data-src="https://img-blog.csdnimg.cn/2020031214125048.png" alt=""></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>获取qq音乐分享链接</title>
    <url>/2020/0308/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/2ca911872a193a63a.jpg" alt=""></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想要写个插件。支持qq，微信，在群里面点歌，这就要获取音乐接口的api 了。<br>注：只允许个人学习使用。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>通过浏览器分析音乐查询接口，分享接口，等等<br><strong>qq音乐搜索接口：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//c.y.qq.com/soso/fcgi-bin/client_search_cp?p=1&amp;n=1&amp;w=水手&amp;format=json&amp;inCharset=utf8&amp;outCharset=utf-8</span></span><br></pre></td></tr></table></figure>
<p>其中：w=歌名，p=页数，n=条数，format=格式。剩下两个就是编码格式了</p>
<p>结果：<br>得到以下几个参数：<br>albumname：专辑<br>albumid ： 专辑id<br>albummid : 专辑图片<br>songname ：歌名<br>singer[0].name:歌手名字<br>songid ： 分享链接使用</p>
<p><strong>音乐分享链接：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//i.y.qq.com/v8/playsong.html?songid=</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//i.y.qq.com/v8/playsong.html?songid=4829638</span></span><br></pre></td></tr></table></figure>

<p><strong>获取专辑图片：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//y.gtimg.cn/music/photo_new/T002R300x300M000专辑图片.jpg</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//y.gtimg.cn/music/photo_new/T002R300x300M000002MwneO44kDAi.jpg</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>接口</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>易语言对接腾讯ai智能闲聊</title>
    <url>/2020/0307/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/38621881e9146614e.jpg" alt=""></p>
<a id="more"></a>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>腾讯闲聊服务基于AI Lab领先的NLP引擎能力、数据运算能力和千亿级互联网语料数据的支持，同时集成了广泛的知识问答能力，可实现上百种自定义属性配置，以及男、女不同的语言风格及说话方式，从而让聊天变得更睿智、简单和有趣</p>
</blockquote>
<blockquote>
<p>基础闲聊接口提供基于文本的基础聊天能力，可以让您的应用快速拥有具备上下文语义理解的机器聊天功能。</p>
</blockquote>
<p>注：同时我将此接口制作成插件，可以应用在QQ和微信上。再也不怕自己一个人没人聊天了。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先在<a href="https://ai.qq.com/" target="_blank" rel="noopener">腾讯ai官网</a>注册自己的账号，将智能闲聊接入。然后在控制台-应用管理，找到刚接入的智能闲聊，在应用信息里面得到APPID，APPKEY两个参数。<br><img data-src="http://s1.wailian.download/2020/03/11/20200307114018.png" alt="首页"></p>
<p>基础闲聊API地址：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>api.ai.qq.com<span class="regexp">/fcgi-bin/</span>nlp<span class="regexp">/nlp_textchat</span></span><br></pre></td></tr></table></figure>

<p>入参：</p>
<p><img data-src="http://s1.wailian.download/2020/03/11/20200307114831.png" alt="image"></p>
<h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>getAI 方法</p>
<p>注意： #app_id 和 #app_key 就是上面申请得到的两个参数</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">.版本 <span class="number">2</span></span><br><span class="line"></span><br><span class="line">.子程序 getAI, , 公开</span><br><span class="line">.参数 msg, 文本型, , 消息内容</span><br><span class="line">.局部变量 入参, 文本型</span><br><span class="line">.局部变量 time_stamp, 文本型</span><br><span class="line">.局部变量 nonce_str, 文本型</span><br><span class="line">.局部变量 session, 文本型</span><br><span class="line">.局部变量 question, 文本型</span><br><span class="line">.局部变量 sign, 文本型</span><br><span class="line">.局部变量 反参, 文本型</span><br><span class="line">.局部变量 JSON, 类_json</span><br><span class="line">.局部变量 回复消息, 文本型</span><br><span class="line"></span><br><span class="line">msg ＝ 删全部空 (msg)</span><br><span class="line">' 限制问题字数不能超过<span class="number">250</span>字节 ，官方要求：非空且长度上限<span class="number">300</span>字节</span><br><span class="line">.如果真 (取文本长度 (msg) ＞ <span class="number">250</span>)</span><br><span class="line">    返回 ()</span><br><span class="line">.如果真结束</span><br><span class="line"></span><br><span class="line">time_stamp ＝ 时间_取现行时间戳 (真)</span><br><span class="line">nonce_str ＝ 文本_取随机字符 (<span class="number">16</span>)</span><br><span class="line">session ＝ nonce_str</span><br><span class="line">question ＝ 编码_URL编码 (编码_gb2312到utf8 (msg), 真, )</span><br><span class="line">入参 ＝ “app_id=” ＋ #app_id ＋ “&amp;nonce_str=” ＋ nonce_str ＋ “&amp;question=” ＋ question ＋ “&amp;session=” ＋ session ＋ “&amp;time_stamp=” ＋ time_stamp</span><br><span class="line">' 入参一定要按照字典顺序排好，不然签名不对</span><br><span class="line">sign ＝ getSign (入参)</span><br><span class="line">入参 ＝ 入参 ＋ “&amp;sign=” ＋ sign</span><br><span class="line"><span class="title">反参 ＝ 编码_utf8到gb2312 (网页_访问S (“https:</span>//api.ai.qq.com/fcgi-bin/nlp/nlp_textchat”, <span class="number">1</span>, 入参, , , , , , , , , , , , , , , , , , ))</span><br><span class="line"></span><br><span class="line">.如果真 (JSON.解析 (反参))</span><br><span class="line">    .如果真 (JSON.取通用属性 (“ret”, ) ＝ “<span class="number">0</span>”)</span><br><span class="line">        回复消息 ＝ JSON.取通用属性 (“data.answer”, )</span><br><span class="line">        .如果真 (回复消息 ≠ “”)</span><br><span class="line">            ' 得到智能ai的回答之后，做你想做的事情</span><br><span class="line">        .如果真结束</span><br><span class="line"></span><br><span class="line">    .如果真结束</span><br></pre></td></tr></table></figure>
<p>getSign 方法</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">.版本 <span class="number">2</span></span><br><span class="line"></span><br><span class="line">.子程序 getSign, 文本型</span><br><span class="line">.参数 入参, 文本型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">返回 (校验_取md5 (到字节集 (入参 ＋ “<span class="variable">&amp;app_key</span>=” ＋ <span class="meta">#app_key), 真, ))</span></span><br></pre></td></tr></table></figure>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>最后还可以在腾讯ai控制台中配置多重属性的闲聊画像，并且可配置的属性会持续增加，使闲聊的风格因您的喜好而不同。<br>可以实时观看应用概况<br><img data-src="http://s1.wailian.download/2020/03/11/20200307115953.png" alt="image"></p>
]]></content>
      <categories>
        <category>易语言</category>
      </categories>
      <tags>
        <tag>易语言</tag>
      </tags>
  </entry>
  <entry>
    <title>win10安装git</title>
    <url>/2020/0306/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/42284a29cf41f91ef.jpg" alt=""></p>
<a id="more"></a>
<h2 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h2><p>去<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git官网</a>下载win版本64位<br>安装全部下一步到结束</p>
<h2 id="下载小乌龟"><a href="#下载小乌龟" class="headerlink" title="下载小乌龟"></a>下载小乌龟</h2><p>去<a href="https://tortoisegit.org/download/" target="_blank" rel="noopener">tortoriseGit官网</a>下载64位小乌龟。<br>然后下面还有一个中文语言包（不下载也行），Language Packs 下面的 Chinese, simplified<br>先安装小乌龟，一路暴力下一步到结束。安装语言包，一路到结束。<br>鼠标右键打开小乌龟设置，选择语言为中文，结束！</p>
<h2 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h2><p>鼠标右键 打开 Git Bash</p>
<p>输入下面的命令<br>将邮箱换成你自己的邮箱、然后回车</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ssh-keygen -o -t rsa -b <span class="number">4096</span> -C <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure>
<p>然后出现提示 密钥保存的位置。记一下<br>使用默认密钥地址，继续回车<br>提示你对密钥设置密码，这里无需设置，直接按回车键就好，要按两次回车键。<br>之后就会显示保存成功<br>然后打开默认位置，看一下有没有两个文件<br><img data-src="https://img-blog.csdnimg.cn/20200306173738233.png" alt="密钥"></p>
<h2 id="添加密钥到Git服务器"><a href="#添加密钥到Git服务器" class="headerlink" title="添加密钥到Git服务器"></a>添加密钥到Git服务器</h2><p>登录进来之后点击右上角的图标，选择settings设置SSH密钥<br><img data-src="https://img-blog.csdnimg.cn/2020030617384577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择 SSH keys<br>然后 new SSH keys<br>将刚才生成的公钥放进去保存即可。</p>
<h2 id="配置本地私钥"><a href="#配置本地私钥" class="headerlink" title="配置本地私钥"></a>配置本地私钥</h2><p>在文件夹空白处右键选择TortoiseGit的设置(setting)选项<br><img data-src="https://img-blog.csdnimg.cn/20200306174116319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一直点下一步到下面的这个页面，中间会让你输入你的名称和邮箱（名称随便写，邮箱还写你那个邮箱），然后点击 生成PuTTY密钥对<br><img data-src="https://img-blog.csdnimg.cn/20200306174318690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择你刚才的私钥<br><img data-src="https://img-blog.csdnimg.cn/20200306174349611.png" alt="在这里插入图片描述"><br>然后点击Save private key 保存成PuTTY 格式的私钥<br><img data-src="https://img-blog.csdnimg.cn/20200306174436984.png" alt="在这里插入图片描述"><br>保存成功后关闭窗口</p>
<h2 id="TortoiseGit克隆项目加载私钥"><a href="#TortoiseGit克隆项目加载私钥" class="headerlink" title="TortoiseGit克隆项目加载私钥"></a>TortoiseGit克隆项目加载私钥</h2><p>右键Git克隆弹出如下窗口<br><img data-src="https://img-blog.csdnimg.cn/20200306174550620.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200306174746242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>结束。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>安装git</tag>
      </tags>
  </entry>
  <entry>
    <title>酷q表情使用</title>
    <url>/2020/0119/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/58bbe62ac415d6f92.jpg" alt=""></p>
<a id="more"></a>
<h2 id="表情1"><a href="#表情1" class="headerlink" title="表情1"></a>表情1</h2><p>在消息内添加</p>
<p>[CQ:face,id=XXX]</p>
<p>其中XXX为下面中的编号</p>
<p>例如你想添加微笑表情：[CQ:face,id=14][CQ:face,id=14][CQ:face,id=14]</p>
<p>结果就是三个微笑表情<br><img data-src="https://img-blog.csdnimg.cn/20200119144211711.png" alt="face表情"></p>
<h2 id="表情2"><a href="#表情2" class="headerlink" title="表情2"></a>表情2</h2><p>在消息内添加</p>
<p>[CQ:emoji,id=XXX]</p>
<p>其中XXX为下面中的编号</p>
<p>例如你想添加雪花表情：[CQ:emoji,id=10052]<br><img data-src="https://img-blog.csdnimg.cn/2020011914444148.png" alt="emoji表情"></p>
]]></content>
      <categories>
        <category>酷q</category>
      </categories>
      <tags>
        <tag>工具类</tag>
        <tag>酷q</tag>
      </tags>
  </entry>
  <entry>
    <title>Excel导出导入</title>
    <url>/2020/0116/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/64c7182e49f7d0710.jpg" alt=""></p>
<a id="more"></a>
<h2 id="1-EasyExcel介绍"><a href="#1-EasyExcel介绍" class="headerlink" title="1. EasyExcel介绍"></a>1. EasyExcel介绍</h2><h3 id="1-1-为什么使用EasyExcel？"><a href="#1-1-为什么使用EasyExcel？" class="headerlink" title="1.1 为什么使用EasyExcel？"></a>1.1 为什么使用EasyExcel？</h3><blockquote>
<p>Java解析、生成Excel比较有名的框架有Apache poi、jxl。但他们都存在一个严重的问题就是非常的耗内存，poi有一套SAX模式的API可以一定程度的解决一些内存溢出的问题，但POI还是有一些缺陷，比如07版Excel解压缩以及解压后存储都是在内存中完成的，内存消耗依然很大。easyexcel重写了poi对07版Excel的解析，能够原本一个3M的excel用POI sax依然需要100M左右内存降低到几M，并且再大的excel不会出现内存溢出，03版依赖POI的sax模式。在上层做了模型转换的封装，让使用者更加简单方便</p>
</blockquote>
<blockquote>
<p>快速、简单避免OOM的java处理Excel工具，64M内存1分钟内读取75M(46W行25列)的Excel。</p>
</blockquote>
<p>写的内容大致和<a href="https://github.com/alibaba/easyexcel" target="_blank" rel="noopener">阅读官方文档</a>差不多</p>
<h2 id="2-开始使用"><a href="#2-开始使用" class="headerlink" title="2. 开始使用"></a>2. 开始使用</h2><h3 id="2-1-引入jar"><a href="#2-1-引入jar" class="headerlink" title="2.1 引入jar"></a>2.1 引入jar</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--easyexcel插件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;easyexcel&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;2.1.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--lombok插件--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">	&lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-实体类"><a href="#2-2-实体类" class="headerlink" title="2.2 实体类"></a>2.2 实体类</h3><p>根据自己的情况自定义表格导入导出实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.gmaya.demo.excelentity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelIgnore;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.format.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.write.style.ColumnWidth;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  用户表格专用实体</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/1/16 9:13</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserExcel</span></span>&#123;</span><br><span class="line">    <span class="comment">/** 生成报表时忽略，不生成次字段 */</span></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/** 定义表头名称和位置,0代表第一列 */</span></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"用户名称"</span>,index = <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"用户年龄"</span>,index = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userAge;</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"用户昵称"</span>,index = <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">private</span> String userNick;</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"用户地址"</span>,index = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">    <span class="comment">/** 指定列宽 */</span></span><br><span class="line">    <span class="meta">@ColumnWidth</span>(<span class="number">20</span>)</span><br><span class="line">    <span class="comment">/** 转化时间 */</span></span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(value = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"用户生日"</span>,index = <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">private</span> Date userBrithday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-ExcelUtil工具类"><a href="#2-3-ExcelUtil工具类" class="headerlink" title="2.3 ExcelUtil工具类"></a>2.3 ExcelUtil工具类</h3><p>根据实际情况封装成工具类，我就写了俩</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.gmaya.demo.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.read.listener.ReadListener;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.support.ExcelTypeEnum;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  excel工具类</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/1/16 9:35</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出文件 到浏览器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelName excel名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName sheet页面名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 要转换的实体类类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 要导出的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">export2Web</span><span class="params">(HttpServletResponse response, String excelName, String sheetName, Class clazz, List data)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"application/vnd.ms-excel"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码</span></span><br><span class="line">        excelName = URLEncoder.encode(excelName, <span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Content-disposition"</span>, <span class="string">"attachment;filename="</span> + excelName + ExcelTypeEnum.XLSX.getValue());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), clazz).sheet(sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取Excel表格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excel 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head 实体类映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> readListener 模板的读取类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readExcel</span><span class="params">(MultipartFile excel, Class head,ReadListener readListener)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        EasyExcel.read(excel.getInputStream(),head,readListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-模板读取类"><a href="#2-4-模板读取类" class="headerlink" title="2.4 模板读取类"></a>2.4 模板读取类</h3><p>创建模板读取类， 这个是表格导入的时候需要的，表格中的数据将在这个类里面单独处理，根据类里面设置的数值进行存库，也就是10w条数据，每当1000条就存一下表，方便内存回收。 不然一次性读10w，要占多少。。。<br>实际情况将下面的构造方法注释打开，相当于你在controller中调用，然后将Service传进来就ok了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.gmaya.demo.excelentity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.context.AnalysisContext;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.event.AnalysisEventListener;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   :  模板的读取类</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/1/16 10:43</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 有个很重要的点 UserListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去</span></span><br><span class="line"><span class="meta">@Slf</span>4j <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserListener</span> <span class="keyword">extends</span> <span class="title">AnalysisEventListener</span>&lt;<span class="title">UserExcel</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BATCH_COUNT = <span class="number">5</span>;</span><br><span class="line">    List&lt;UserExcel&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//    private UserService userService;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* public UserListener()&#123;</span></span><br><span class="line"><span class="comment">        // 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数</span></span><br><span class="line"><span class="comment">        userService = new UserService();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果使用了spring,请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="comment">/* public UserListener(UserService userService) &#123;</span></span><br><span class="line"><span class="comment">        this.userService = userService;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个每一条数据解析都会来调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(UserExcel data, AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"解析到一条数据:&#123;&#125;"</span>, data.getUserName());</span><br><span class="line">        list.add(data);</span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt;= BATCH_COUNT) &#123;</span><br><span class="line">            <span class="comment">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span></span><br><span class="line">            saveData();</span><br><span class="line">            <span class="comment">// 存储完成清理 list</span></span><br><span class="line">            list.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        saveData();</span><br><span class="line">        log.info(<span class="string">"所有数据解析完成！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加上存储数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;条数据，开始存储数据库！"</span>, list.size());</span><br><span class="line">        <span class="comment">//        userService.saveBatch(list);</span></span><br><span class="line">        log.info(<span class="string">"存储数据库成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-5-controller测试"><a href="#2-5-controller测试" class="headerlink" title="2.5 controller测试"></a>2.5 controller测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.gmaya.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.ExcelReader;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> top.gmaya.demo.entity.User;</span><br><span class="line"><span class="keyword">import</span> top.gmaya.demo.excelentity.UserExcel;</span><br><span class="line"><span class="keyword">import</span> top.gmaya.demo.excelentity.UserListener;</span><br><span class="line"><span class="keyword">import</span> top.gmaya.demo.util.ExcelUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Description   : 测试</span></span><br><span class="line"><span class="comment"> * @ Author        :  GMaya</span></span><br><span class="line"><span class="comment"> * @ CreateDate    :  2020/1/15 16:55</span></span><br><span class="line"><span class="comment"> * @ Version       :  1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j <span class="meta">@RestController</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出excel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/export2Web"</span>) <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">export2Web</span><span class="params">(HttpServletResponse response, String id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟数据</span></span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User((<span class="keyword">long</span>) i, <span class="string">"张三"</span> + i, i, <span class="string">"小三"</span> + i, <span class="string">"杭州"</span> + i, <span class="keyword">new</span> Date());</span><br><span class="line">            list.add(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ExcelUtil.export2Web(response, <span class="string">"用户表"</span>, <span class="string">"用户信息"</span>, UserExcel<span class="class">.<span class="keyword">class</span>, <span class="title">list</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"报表导出异常:"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导入excel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/exportImport"</span>) <span class="function"><span class="keyword">public</span> String <span class="title">exportImport</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ExcelUtil.readExcel(file, UserExcel<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">UserListener</span>())</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"succeed"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><h3 id="3-1-导出测试"><a href="#3-1-导出测试" class="headerlink" title="3.1 导出测试"></a>3.1 导出测试</h3><p>启动项目，浏览器访问接口<br>直接弹框提示保存位置。保存查看里面内容<br><img data-src="https://img-blog.csdnimg.cn/20200116140325950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="导出结果"></p>
<h3 id="3-2-导入测试"><a href="#3-2-导入测试" class="headerlink" title="3.2 导入测试"></a>3.2 导入测试</h3><p>使用postman测试文件导入<br><img data-src="https://img-blog.csdnimg.cn/20200116140457725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="导入结果"><br>key：Content-Type<br>value：multipart/form-data<br><img data-src="https://img-blog.csdnimg.cn/20200116140542185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="头部信息"><br><img data-src="https://img-blog.csdnimg.cn/20200116140701324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="结果"></p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>建站心得</title>
    <url>/2020/0110/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/799c2afb5e71ab9ae.jpg" alt=""></p>
<a id="more"></a>
<p>从偶然发现个人博客开始，就开始着手搭建一个自己的博客网站，也许写不出什么有技术含量的东西，但是也图个新鲜，练练手，记录一下自己的成长经历！<br>但是就是这个随手开始弄得网站，前前后后花了将近一个月，SO,我要将自己的过程记录下来！</p>
<h3 id="1-买服务器"><a href="#1-买服务器" class="headerlink" title="1. 买服务器"></a>1. 买服务器</h3><p>&lt;此步骤可以省略&gt;<br>我是购买的腾讯云，首次大幅度优惠，99/年。当然，博客如果都是静态页面，也可以不需要服务器，直接部署到github，或者码云上，都是可以的（免费）。<br>如果你只需要搭建博客不需要其他的，可以不买服务器，忽略即可。我是因为还要用服务器干点其他的。</p>
<h3 id="2-买域名"><a href="#2-买域名" class="headerlink" title="2. 买域名"></a>2. 买域名</h3><p>&lt;此步骤可以省略&gt;<br>我是在腾讯云打折5块钱买了一年的域名，虽然不买也行，用github自动生成的也中，但我不想要！</p>
<h4 id="2-1-备案"><a href="#2-1-备案" class="headerlink" title="2.1 备案"></a>2.1 备案</h4><p>使用国内服务器，域名不管是哪里的，都需要备案！反正我资料啥的一顿填，大概半个月备案成功！我刚开始买了之后大概一星期左右网站使用域名已经进不去了，一直让我去备案。</p>
<h4 id="2-2-域名解析"><a href="#2-2-域名解析" class="headerlink" title="2.2 域名解析"></a>2.2 域名解析</h4><p>将域名解析到我的服务器</p>
<h4 id="2-3-nginx代理"><a href="#2-3-nginx代理" class="headerlink" title="2.3 nginx代理"></a>2.3 nginx代理</h4><p>我是使用的nginx代理的静态页面，然后将我生成好的博客页面直接放到服务器，配置好nginx的配置就ok，然后直接访问域名。当然也可以搞个tomcat放到里面。</p>
<h4 id="2-4-SSL证书"><a href="#2-4-SSL证书" class="headerlink" title="2.4 SSL证书"></a>2.4 SSL证书</h4><p>弄完之后我的访问域名是不安全的链接，所以我又免费申请了一个SSL证书，配置到nginx中，然后博客就可以https访问了。</p>
<h3 id="3-hexo建站"><a href="#3-hexo建站" class="headerlink" title="3. hexo建站"></a>3. hexo建站</h3><h4 id="3-1-配置环境"><a href="#3-1-配置环境" class="headerlink" title="3.1 配置环境"></a>3.1 配置环境</h4><p>首先根据hexo官方网站将本地环境搭建起来，对于经常使用git提交拉取公司项目的人，很快都搞定了。</p>
<h4 id="3-2-挑选模板"><a href="#3-2-挑选模板" class="headerlink" title="3.2 挑选模板"></a>3.2 挑选模板</h4><p>直接在hexo官方网站挑选自己中意的博客模板，我默默挑了好多，中间改过好几次，总之挑一个自己喜欢的。</p>
<h4 id="3-3-修改模板"><a href="#3-3-修改模板" class="headerlink" title="3.3 修改模板"></a>3.3 修改模板</h4><p>一般都是根据模板的博主介绍，一步一步一步一步一步一步修改成为自己的博客。总之我感觉这一步是最长的。</p>
<h3 id="4-写博客"><a href="#4-写博客" class="headerlink" title="4. 写博客"></a>4. 写博客</h3><p>不积跬步，无以至千里；不积小流，无以成江海。在接下来的岁月写你想写的东西吧。</p>
]]></content>
      <categories>
        <category>自我抒写</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>认识酷q</title>
    <url>/2019/kuq-know/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/81bc7bcc4eb1ba03c.jpg" alt=""></p>
<a id="more"></a>

<p>##酷q是干嘛的</p>
<blockquote>
<p>酷Q Air 是一个轻巧、免费、高效的机器人核心，功能需要安装“应用”实现。登录酷Q，完成教程后，建议 访问 酷Q应用发布板块，下载安装您所需要的应用，创造让大家喜爱并且属于你自己的专属机器人。</p>
</blockquote>
<p>官网：<a href="https://cqp.cc/" target="_blank" rel="noopener">酷q社区</a></p>
<p>通俗的讲就是，打造一个属于自己的qq机器人，有点类似于现在的q群管家，qq小冰。但是你可以把他的功能再次扩大！（活跃群气氛必不可少）。主要有：入群欢迎，问答，便民（查天气，查快递等），各种小游戏娱乐，关键词禁言等等，需要看代码功底，当然你也可以去社区下载别人分享的插件，直接使用。</p>
<p>我也是在偶然的机会认识到了酷q，然后就爱不释手，从0开始学习了易语言，然后写出了第一个酷q插件<a href="https://cqp.cc/t/46270" target="_blank" rel="noopener">猜拳签到游戏</a>，当然我并不满足，然后又写出了查电影，问答，查运势，查天气，查新闻，随机笑话等，当然这些我并没有发布出来， 因为这些第三方接口我是免费用的，每天有限制几百条， 所以不适合分享，只是在自己的群里面使用而已。</p>
<p>如果你和我一样刚刚认识酷q，那么你不妨看一下这个<a href="https://docs.cqp.im/" target="_blank" rel="noopener">快速入门</a><br>使用<a href="https://cqp.cc/t/15124" target="_blank" rel="noopener">sdk</a>进行酷q开发。由于教程很多，我就没得写了，如果有不懂的可以留言评论或者到关于我页面查看联系方式。</p>
<p>但是我是java开发者，使用易语言难免有所不习惯，所以参考了<a href="https://cqp.cc/t/37318" target="_blank" rel="noopener">南荒喵</a>大佬的教程，使用支持java的sdk进行开发。</p>
<p>到了最后我在此demo上又加上mybatis-plus，springboot，连接数据库，等一系列操作。</p>
<p>有的时候思路是个好东西，当我弄完之后，我不知道写什么东西了，整天都是配环境，搭建环境，但是到最后写插件内容的时候，迷茫了，写什么呢，写什么好呢，写什么会有人用呢，看社区里面，那都是人家写出来的，你再写一遍干嘛呢。</p>
<p>好多东西都是 从简单，到复杂，到迷茫，到不知所措。（服务器自己买了一个，酷q是用的免费的）</p>
<p>然后我就认识了jsoup，百度百科是这样说的</p>
<blockquote>
<p>jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p>
</blockquote>
<p>然后我就又陷入了进去，忘记了游戏，忘记了时间。</p>
<p>希望前进的路上不再迷茫！</p>
]]></content>
      <categories>
        <category>酷q</category>
      </categories>
      <tags>
        <tag>酷q</tag>
      </tags>
  </entry>
  <entry>
    <title>idea在jdk1.8情况下使用反编译插件</title>
    <url>/2019/idea-decompilation/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/9.jpg" alt=""></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用JD-GUI在jdk1.8情况下失效，我也查找了好多办法，最后看到idea有默认的，只是没有打开，瞬间搞定，记录一下！</p>
<p>没有反编译是显示compiled code</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(java.lang.String... messages)</span> </span>&#123; <span class="comment">/* compiled code */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(java.lang.Object... messages)</span> </span>&#123; <span class="comment">/* compiled code */</span> &#125;</span><br></pre></td></tr></table></figure>
<p>idea不需要安装任何插件， 比如JD-GUI（这个在jdk1.8还是打不开）</p>
<p>因为，安装idea默认有，只是没有打开罢了</p>
<p>打开setting –&gt;plugings 搜索 Java Bytecode Decompiler</p>
<p><img data-src="https://img-blog.csdnimg.cn/20191230114857888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="设置"><br>勾选，然后重启idea （注意：你的其他反编译插件就不要开了，关掉）</p>
<p>重启之后会让你选择 是否同意使用此插件， 点击最左面accept，同意即可！</p>
<p><img data-src="https://img-blog.csdnimg.cn/2019123011510349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dmbDE0MjcwOTcxMDM=,size_16,color_FFFFFF,t_70" alt="结果"></p>
]]></content>
      <categories>
        <category>自我抒写</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>idea插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java性能测试大比拼</title>
    <url>/2019/property-compare/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/113decce27b2d5f5bd.jpg" alt=""></p>
<a id="more"></a>

<p>实体类转换哪个快？Map循环遍历哪个快？转换为字符串哪个快？测试，分析，看源码，看底层知识。</p>
<h2 id="dao和vo实体转换比拼"><a href="#dao和vo实体转换比拼" class="headerlink" title="dao和vo实体转换比拼"></a>dao和vo实体转换比拼</h2><p>参与比拼的两个选手:</p>
<ol>
<li>org.springframework.beans.BeanUtils</li>
<li>org.springframework.cglib.beans.BeanCopier</li>
</ol>
<p>测试方式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> leng = <span class="number">10000000</span>;</span><br><span class="line">        Stu stu = <span class="keyword">new</span> Stu();</span><br><span class="line">        stu.setStuId(<span class="string">"id"</span>);</span><br><span class="line">        stu.setStuName(<span class="string">"name"</span>);</span><br><span class="line">        stu.setStuAge(<span class="number">12</span>);</span><br><span class="line">        stu.setStuClassId(<span class="string">"ClassId"</span>);</span><br><span class="line">        StuVO stuVO = <span class="keyword">new</span> StuVO();</span><br><span class="line">        <span class="keyword">long</span> l = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; leng; i++) &#123;</span><br><span class="line">            BeanCopier beanCopier = BeanCopier.create(stu.getClass(), stuVO.getClass(), <span class="keyword">false</span>);</span><br><span class="line">            beanCopier.copy(stu,stuVO,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"beanCopier.copy:"</span>+(System.currentTimeMillis()-l));</span><br><span class="line">        l = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; leng; i++) &#123;</span><br><span class="line">            BeanUtils.copyProperties(stu,stuVO);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"BeanUtils.copyProperties:"</span>+(System.currentTimeMillis()-l));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>比拼结果:</p>
<p><img data-src="https://img-blog.csdnimg.cn/20190426160609633.png" alt="结果"></p>
<p><strong>备注:</strong> 如果把BeanCopier.create放到循环外,效率还可以加快!!!  可能由于各方面原因,次数较少时测试不准</p>
<h2 id="Map遍历几种方式比拼"><a href="#Map遍历几种方式比拼" class="headerlink" title="Map遍历几种方式比拼"></a>Map遍历几种方式比拼</h2><p>参与比拼的四个选手:</p>
<ol>
<li>keySet的for循环方式</li>
<li>keySet的iterator迭代器方式</li>
<li>entrySet的for循环方式</li>
<li>entrySet的iterator迭代器方式</li>
</ol>
<p>测试方式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++) &#123;</span><br><span class="line">            map.put(i + <span class="string">""</span>, i + <span class="string">"AA"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        keySet(map);</span><br><span class="line">        keySetIterator(map);</span><br><span class="line">        entrySet(map);</span><br><span class="line">        entrySetIterator(map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * keySet的for循环方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">keySet</span><span class="params">(Map&lt;String, String&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">            String value = map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"keySet运行时间"</span> + (endTime - startTime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * keySet的iterator迭代器方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">keySetIterator</span><span class="params">(Map&lt;String, String&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        Iterator&lt;String&gt; iterator = map.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            String key = iterator.next();</span><br><span class="line">            String value = map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"keySetIterator运行时间"</span> + (endTime - startTime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * entrySet的for循环方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">entrySet</span><span class="params">(Map&lt;String, String&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            String value = entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"entrySet运行时间"</span> + (endTime - startTime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * entrySet的iterator迭代器方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">entrySetIterator</span><span class="params">(Map&lt;String, String&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, String&gt; entry = iterator.next();</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            String value = entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"entrySetIterator运行时间"</span> + (endTime - startTime));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>比拼结果:</p>
<p><img data-src="https://img-blog.csdnimg.cn/20190426164641566.png" alt="结果2"></p>
<p>备注:可能由于各方面原因,次数较少时测试不准</p>
<h2 id="基本数据类型转为字符串方法比拼"><a href="#基本数据类型转为字符串方法比拼" class="headerlink" title="基本数据类型转为字符串方法比拼"></a>基本数据类型转为字符串方法比拼</h2><p>参与比拼的三个选手:</p>
<ol>
<li>基本数据类型.toString()</li>
<li>String.valueOf(数据)</li>
<li>数据+””</li>
</ol>
<p>测试方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">1000000000</span>;</span><br><span class="line">        Integer t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end; i++)&#123;</span><br><span class="line">            String str = t.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Integer.toString()："</span> + (System.currentTimeMillis() - startTime) + <span class="string">"ms"</span>);</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end; i++)&#123;</span><br><span class="line">            String str = String.valueOf(t);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"String.valueOf()："</span> + (System.currentTimeMillis() - startTime) + <span class="string">"ms"</span>);</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end; i++)&#123;</span><br><span class="line">            String str = t + <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"t + '' :"</span> + (System.currentTimeMillis() - startTime) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>比拼结果:</p>
<p><img data-src="https://img-blog.csdnimg.cn/20190426171337502.png" alt="结果3"></p>
<p>备注:可能由于各方面原因,次数较少时测试不准</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.String.valueOf()方法底层调用了Integer.toString()方法，但是会在调用前做空判断</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.Integer.toString()方法，直接调用</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.t + <span class="string">""</span>底层使用了StringBuilder实现，先用append方法拼接，再用toString()方法获取字符串</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>性能比较</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-plus之自动生成</title>
    <url>/2019/Mybatis-plus/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/104c0c7cc995b2dab6.jpg" alt=""></p>
<a id="more"></a>

<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>本文章首次是在csdn上写的，本次发布到自己的博客中，增添一点色彩。</p>
<p>点击查看<a href="https://mybatis.plus/" target="_blank" rel="noopener">Mybatis-plus官方文档</a></p>
<blockquote>
<p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
</blockquote>
<h2 id="2-创建spring-boot-项目"><a href="#2-创建spring-boot-项目" class="headerlink" title="2. 创建spring boot 项目"></a>2. 创建spring boot 项目</h2><p>使用idea默认生成即可 …</p>
<h2 id="3-修改pom文件"><a href="#3-修改pom文件" class="headerlink" title="3. 修改pom文件"></a>3. 修改pom文件</h2><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">  </span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;<span class="keyword">optional</span>&gt;<span class="literal">true</span>&lt;/<span class="keyword">optional</span>&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--mybatis-plus自动生成代码--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- velocity 模版引擎 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--lombok--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.16</span><span class="number">.16</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">    &lt;<span class="keyword">optional</span>&gt;<span class="literal">true</span>&lt;/<span class="keyword">optional</span>&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--swagger2--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="4-修改application-yml文件"><a href="#4-修改application-yml文件" class="headerlink" title="4. 修改application.yml文件"></a>4. 修改application.yml文件</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath*:mapper/*.xml</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">com.mybatis.plus.demo.model</span> <span class="comment"># mybatis 别名包扫描路径</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment">#逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="comment">#线上关闭sql日志打印</span></span><br></pre></td></tr></table></figure>
<h2 id="5-修改启动类"><a href="#5-修改启动类" class="headerlink" title="5. 修改启动类"></a>5. 修改启动类</h2><p><img data-src="https://img-blog.csdnimg.cn/20190612171238629.png" alt="启动类"></p>
<h2 id="6-创建Mybatis-plus配置"><a href="#6-创建Mybatis-plus配置" class="headerlink" title="6. 创建Mybatis-plus配置"></a>6. 创建Mybatis-plus配置</h2><p>新建文件MyBatisPlusConfiguration</p>
<p><strong>注意</strong> : 如果使用mp自带的控制逻辑删除和控制版本号还有分页功能,则需要添加这个配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.plus.demo.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.ISqlInjector;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.injector.LogicSqlInjector;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制逻辑删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制版本号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-编写自动生成工具类"><a href="#7-编写自动生成工具类" class="headerlink" title="7. 编写自动生成工具类"></a>7. 编写自动生成工具类</h2><p><strong>注 :</strong> 直接把Controller/service/serviceImpl/dao/mapper/form/vo全部生成</p>
<p>此处使用默认velocity 模版引擎 则没有常用的crud方法,使用自己的模板则可以生成常用的crud方法</p>
<p>其中自定义模板中有工具类是公司自己的jar包,所以只推荐参考</p>
<p>拷贝mybatis-plus-generator jar包中的模板到自己项目resources下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis.plus.demo.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.converts.MySqlTypeConvert;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DbColumnType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.IColumnType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码生成器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MabatisPlusGenerator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String path = <span class="string">"E:\\idea\\springboot-mybatis-plus"</span>; <span class="comment">//文件路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String table = <span class="string">"tm_user"</span>; <span class="comment">//table名字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 全局配置</span></span><br><span class="line">        GlobalConfig config = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        config.setActiveRecord(<span class="keyword">false</span>) <span class="comment">// 是否支持AR模式</span></span><br><span class="line">            .setAuthor(<span class="string">"GMaya"</span>) <span class="comment">// 作者</span></span><br><span class="line">            .setSwagger2(<span class="keyword">true</span>) <span class="comment">// 使用Swagger</span></span><br><span class="line">            .setOutputDir(path + <span class="string">"/src/main/java"</span>) <span class="comment">// 生成路径</span></span><br><span class="line">            .setFileOverride(<span class="keyword">true</span>) <span class="comment">// 文件覆盖</span></span><br><span class="line">            .setIdType(IdType.AUTO) <span class="comment">// 主键策略</span></span><br><span class="line">            <span class="comment">// 自定义文件命名，注意 %s 会自动填充表实体属性！</span></span><br><span class="line">            .setServiceName(<span class="string">"%sService"</span>).setServiceImplName(<span class="string">"%sServiceImpl"</span>)</span><br><span class="line">            .setControllerName(<span class="string">"%sController"</span>).setMapperName(<span class="string">"%sDao"</span>).setXmlName(<span class="string">"%sMapper"</span>)</span><br><span class="line">            .setOpen(<span class="keyword">false</span>) <span class="comment">// 生成文件后 不打开文件夹</span></span><br><span class="line">            .setBaseResultMap(<span class="keyword">true</span>) <span class="comment">// XML ResultMap</span></span><br><span class="line">            .setBaseColumnList(<span class="keyword">true</span>); <span class="comment">// XML columList</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 数据源配置</span></span><br><span class="line">        DataSourceConfig dsConfig = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsConfig.setDbType(DbType.MYSQL) <span class="comment">// 设置数据库类型</span></span><br><span class="line">            .setDriverName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">            .setUrl(</span><br><span class="line">                <span class="string">"jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8"</span>)</span><br><span class="line">            .setUsername(<span class="string">"root"</span>).setPassword(<span class="string">"admin"</span>).setTypeConvert(<span class="keyword">new</span> MySqlTypeConvert() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> IColumnType <span class="title">processTypeConvert</span><span class="params">(GlobalConfig globalConfig, String fieldType)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (fieldType.toLowerCase().contains(<span class="string">"tinyint"</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> DbColumnType.BOOLEAN;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//将数据库中datetime转换成date</span></span><br><span class="line">                    <span class="keyword">if</span> (fieldType.toLowerCase().contains(<span class="string">"datetime"</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> DbColumnType.DATE;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">super</span>.processTypeConvert(globalConfig, fieldType);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 策略配置</span></span><br><span class="line">        StrategyConfig stConfig = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        stConfig.setColumnNaming(NamingStrategy.underline_to_camel)</span><br><span class="line">            .setNaming(NamingStrategy.underline_to_camel) <span class="comment">// 数据库表映射到实体的命名策略</span></span><br><span class="line">            .setEntityLombokModel(<span class="keyword">true</span>) <span class="comment">// 使用Lombok</span></span><br><span class="line">            .setVersionFieldName(<span class="string">"version"</span>) <span class="comment">// 数据库版本控制字段</span></span><br><span class="line">            .setLogicDeleteFieldName(<span class="string">"status"</span>) <span class="comment">// 数据库逻辑删除字段</span></span><br><span class="line">            .setRestControllerStyle(<span class="keyword">true</span>)</span><br><span class="line">            .setSuperServiceClass(<span class="string">"com.baomidou.mybatisplus.extension.service.IService"</span>)</span><br><span class="line">            .setInclude(<span class="keyword">new</span> String[]&#123;table&#125;); <span class="comment">// 生成的表</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 包名策略配置</span></span><br><span class="line">        PackageConfig pkConfig = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pkConfig.setParent(<span class="string">"com.mybatis.plus.demo"</span>).setMapper(<span class="string">"dao"</span>).setService(<span class="string">"service"</span>)</span><br><span class="line">            .setServiceImpl(<span class="string">"service.impl"</span>).setController(<span class="string">"controller"</span>).setEntity(<span class="string">"model"</span>);</span><br><span class="line">        <span class="comment">//5.自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        String templatePath = <span class="string">"/templates/mapper.xml.vm"</span>; <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 自定义输出配置</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123; <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// mapper自定义输出文件名</span></span><br><span class="line">                <span class="keyword">return</span> path + <span class="string">"/src/main/resources/mapper/"</span> + tableInfo.getEntityName() + <span class="string">"Mapper"</span></span><br><span class="line">                       + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// ------------form vo 使用默认模板请注释-begin-----------</span></span><br><span class="line">        templatePath = <span class="string">"/templates/entityForm.java.vm"</span>;</span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123; <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// form自定义输出文件名</span></span><br><span class="line">                <span class="keyword">return</span> path + <span class="string">"/src/main/java/com/mybatis/plus/demo/pojo/"</span> + tableInfo.getEntityName() + <span class="string">"Form"</span></span><br><span class="line">                       + StringPool.DOT_JAVA;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        templatePath = <span class="string">"/templates/entityVO.java.vm"</span>;</span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123; <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// VO自定义输出文件名</span></span><br><span class="line">                <span class="keyword">return</span> path + <span class="string">"/src/main/java/com/mybatis/plus/demo/pojo/"</span> + tableInfo.getEntityName() + <span class="string">"VO"</span></span><br><span class="line">                       + StringPool.DOT_JAVA;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// ------------form vo 使用默认模板请注释-end-----------</span></span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6 配置模板 自定义模板/在resources/templates 可以编辑</span></span><br><span class="line">        TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line">        <span class="comment">// 关闭默认 xml 生成，调整生成 至 根目录</span></span><br><span class="line">        templateConfig.setEntity(<span class="string">"/templates/entity.java"</span>).setService(<span class="string">"/templates/service.java"</span>)</span><br><span class="line">            .setController(<span class="string">"/templates/controller.java"</span>).setMapper(<span class="string">"/templates/mapper.java"</span>)</span><br><span class="line">            .setServiceImpl(<span class="string">"/templates/serviceImpl.java"</span>).setXml(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7. 整合配置</span></span><br><span class="line">        AutoGenerator ag = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        ag.setGlobalConfig(config).setDataSource(dsConfig).setStrategy(stConfig).setCfg(cfg)</span><br><span class="line">            .setPackageInfo(pkConfig).setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8. 执行</span></span><br><span class="line">        ag.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注 :</strong> 如果是使用自定义模板,请注意修改模板中的form,vo引入包路径等</p>
<p>使用默认模板请注释代码中生成form/vo代码</p>
<p>第一次运行可能有以下错误,如果没有请忽略</p>
<p><strong>问题1 :</strong> The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or represents</p>
<p><strong>解决 :</strong> set global time_zone=’+8:00’</p>
<p><strong>问题2 :</strong> 使用Lombok插件,Idea,Eclipse必须安装改插件,否则找不到get/set方法</p>
<p><strong>解决 :</strong> IDEA安装Lombok步骤</p>
<p><img data-src="https://img-blog.csdnimg.cn/20190612104955146.png" alt="安装Lombok1"><br><img data-src="https://img-blog.csdnimg.cn/20190612105005460.png" alt="安装Lombok2"><br>Eclipse的自行百度  /滑稽</p>
<p>修改文件路径表名之后运行</p>
<p>生成结构图如下</p>
<p><img data-src="https://img-blog.csdnimg.cn/20190612105718114.png" alt="结构图"><br>perfect  ! ! !</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/hello-world/</url>
    <content><![CDATA[<p><img data-src="http://s1.wailian.download/2020/03/12/160172f10791af664.jpg" alt=""></p>
<a id="more"></a>

<h2 id="各种语言的Hello-World"><a href="#各种语言的Hello-World" class="headerlink" title="各种语言的Hello World"></a>各种语言的Hello World</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ System.out.println(<span class="string">"Hello,World!"</span>);</span><br></pre></td></tr></table></figure>

<p>我说Java天下第一,你信么!</p>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">printf</span>(<span class="string">"Hello,World!"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ std::cout &lt;&lt; <span class="string">"Hello,World!"</span> &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>

<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ &gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">"Hello,World!"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Console.WriteLine(<span class="string">"Hello,World!"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"Hello,World!"</span>;</span><br></pre></td></tr></table></figure>

<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ var sys = require(<span class="string">"sys"</span>);  </span><br><span class="line">  sys.puts(<span class="string">"Hello,World!"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ puts  <span class="string">"Hello,World!"</span></span><br></pre></td></tr></table></figure>

<h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">print</span>(<span class="string">"Hello,World!"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ select <span class="string">'Hello,World!'</span> from dual;</span><br></pre></td></tr></table></figure>

<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ &lt;p&gt;Hello,World!&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="VB"><a href="#VB" class="headerlink" title="VB"></a>VB</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ MsgBox(<span class="string">"Hello,World!"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"Hello,World!"</span></span><br></pre></td></tr></table></figure>

<h3 id="Delphi"><a href="#Delphi" class="headerlink" title="Delphi"></a>Delphi</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ label1.Caption := <span class="string">'Hello,World!'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="TCL"><a href="#TCL" class="headerlink" title="TCL"></a>TCL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ % puts <span class="string">"Hello,World!"</span></span><br></pre></td></tr></table></figure>

<h3 id="Pascal"><a href="#Pascal" class="headerlink" title="Pascal"></a>Pascal</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ writeln(<span class="string">'Hello, world!'</span>)</span><br></pre></td></tr></table></figure>


<p>我认输了, 我是菜鸟! 一个Hello, world! 打败我了</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
